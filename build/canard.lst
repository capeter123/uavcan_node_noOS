ARM GAS  /tmp/ccbnltLA.s 			page 1


   1              		.cpu cortex-m3
   2              		.eabi_attribute 20, 1
   3              		.eabi_attribute 21, 1
   4              		.eabi_attribute 23, 3
   5              		.eabi_attribute 24, 1
   6              		.eabi_attribute 25, 1
   7              		.eabi_attribute 26, 1
   8              		.eabi_attribute 30, 1
   9              		.eabi_attribute 34, 1
  10              		.eabi_attribute 18, 4
  11              		.file	"canard.c"
  12              		.text
  13              	.Ltext0:
  14              		.cfi_sections	.debug_frame
  15              		.section	.text.computeTransferIDForwardDistance,"ax",%progbits
  16              		.align	1
  17              		.syntax unified
  18              		.thumb
  19              		.thumb_func
  20              		.fpu softvfp
  22              	computeTransferIDForwardDistance:
  23              	.LFB16:
  24              		.file 1 "libcanard/canard.c"
   1:libcanard/canard.c **** /*
   2:libcanard/canard.c ****  * Copyright (c) 2016-2017 UAVCAN Team
   3:libcanard/canard.c ****  *
   4:libcanard/canard.c ****  * Permission is hereby granted, free of charge, to any person obtaining a copy
   5:libcanard/canard.c ****  * of this software and associated documentation files (the "Software"), to deal
   6:libcanard/canard.c ****  * in the Software without restriction, including without limitation the rights
   7:libcanard/canard.c ****  * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
   8:libcanard/canard.c ****  * copies of the Software, and to permit persons to whom the Software is
   9:libcanard/canard.c ****  * furnished to do so, subject to the following conditions:
  10:libcanard/canard.c ****  *
  11:libcanard/canard.c ****  * The above copyright notice and this permission notice shall be included in all
  12:libcanard/canard.c ****  * copies or substantial portions of the Software.
  13:libcanard/canard.c ****  *
  14:libcanard/canard.c ****  * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  15:libcanard/canard.c ****  * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  16:libcanard/canard.c ****  * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
  17:libcanard/canard.c ****  * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
  18:libcanard/canard.c ****  * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
  19:libcanard/canard.c ****  * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
  20:libcanard/canard.c ****  * SOFTWARE.
  21:libcanard/canard.c ****  *
  22:libcanard/canard.c ****  * Contributors: https://github.com/UAVCAN/libcanard/contributors
  23:libcanard/canard.c ****  *
  24:libcanard/canard.c ****  * Documentation: http://uavcan.org/Implementations/Libcanard
  25:libcanard/canard.c ****  */
  26:libcanard/canard.c **** 
  27:libcanard/canard.c **** #include "canard_internals.h"
  28:libcanard/canard.c **** #include <string.h>
  29:libcanard/canard.c **** 
  30:libcanard/canard.c **** 
  31:libcanard/canard.c **** #undef MIN
  32:libcanard/canard.c **** #undef MAX
  33:libcanard/canard.c **** #define MIN(a, b)   (((a) < (b)) ? (a) : (b))
  34:libcanard/canard.c **** #define MAX(a, b)   (((a) > (b)) ? (a) : (b))
ARM GAS  /tmp/ccbnltLA.s 			page 2


  35:libcanard/canard.c **** 
  36:libcanard/canard.c **** 
  37:libcanard/canard.c **** #define TRANSFER_TIMEOUT_USEC                       2000000
  38:libcanard/canard.c **** 
  39:libcanard/canard.c **** #define TRANSFER_ID_BIT_LEN                         5U
  40:libcanard/canard.c **** #define ANON_MSG_DATA_TYPE_ID_BIT_LEN               2U
  41:libcanard/canard.c **** 
  42:libcanard/canard.c **** #define SOURCE_ID_FROM_ID(x)                        ((uint8_t) (((x) >> 0U)  & 0x7FU))
  43:libcanard/canard.c **** #define SERVICE_NOT_MSG_FROM_ID(x)                  ((bool)    (((x) >> 7U)  & 0x1U))
  44:libcanard/canard.c **** #define REQUEST_NOT_RESPONSE_FROM_ID(x)             ((bool)    (((x) >> 15U) & 0x1U))
  45:libcanard/canard.c **** #define DEST_ID_FROM_ID(x)                          ((uint8_t) (((x) >> 8U)  & 0x7FU))
  46:libcanard/canard.c **** #define PRIORITY_FROM_ID(x)                         ((uint8_t) (((x) >> 24U) & 0x1FU))
  47:libcanard/canard.c **** #define MSG_TYPE_FROM_ID(x)                         ((uint16_t)(((x) >> 8U)  & 0xFFFFU))
  48:libcanard/canard.c **** #define SRV_TYPE_FROM_ID(x)                         ((uint8_t) (((x) >> 16U) & 0xFFU))
  49:libcanard/canard.c **** 
  50:libcanard/canard.c **** #define MAKE_TRANSFER_DESCRIPTOR(data_type_id, transfer_type, src_node_id, dst_node_id)            
  51:libcanard/canard.c ****     (((uint32_t)(data_type_id)) | (((uint32_t)(transfer_type)) << 16U) |                           
  52:libcanard/canard.c ****     (((uint32_t)(src_node_id)) << 18U) | (((uint32_t)(dst_node_id)) << 25U))
  53:libcanard/canard.c **** 
  54:libcanard/canard.c **** #define TRANSFER_ID_FROM_TAIL_BYTE(x)               ((uint8_t)((x) & 0x1FU))
  55:libcanard/canard.c **** 
  56:libcanard/canard.c **** // The extra cast to unsigned is needed to squelch warnings from clang-tidy
  57:libcanard/canard.c **** #define IS_START_OF_TRANSFER(x)                     ((bool)(((uint32_t)(x) >> 7U) & 0x1U))
  58:libcanard/canard.c **** #define IS_END_OF_TRANSFER(x)                       ((bool)(((uint32_t)(x) >> 6U) & 0x1U))
  59:libcanard/canard.c **** #define TOGGLE_BIT(x)                               ((bool)(((uint32_t)(x) >> 5U) & 0x1U))
  60:libcanard/canard.c **** 
  61:libcanard/canard.c **** 
  62:libcanard/canard.c **** struct CanardTxQueueItem
  63:libcanard/canard.c **** {
  64:libcanard/canard.c ****     CanardTxQueueItem* next;
  65:libcanard/canard.c ****     CanardCANFrame frame;
  66:libcanard/canard.c **** };
  67:libcanard/canard.c **** 
  68:libcanard/canard.c **** 
  69:libcanard/canard.c **** /*
  70:libcanard/canard.c ****  * API functions
  71:libcanard/canard.c ****  */
  72:libcanard/canard.c **** void canardInit(CanardInstance* out_ins,
  73:libcanard/canard.c ****                 void* mem_arena,
  74:libcanard/canard.c ****                 size_t mem_arena_size,
  75:libcanard/canard.c ****                 CanardOnTransferReception on_reception,
  76:libcanard/canard.c ****                 CanardShouldAcceptTransfer should_accept,
  77:libcanard/canard.c ****                 void* user_reference)
  78:libcanard/canard.c **** {
  79:libcanard/canard.c ****     CANARD_ASSERT(out_ins != NULL);
  80:libcanard/canard.c **** 
  81:libcanard/canard.c ****     /*
  82:libcanard/canard.c ****      * Checking memory layout.
  83:libcanard/canard.c ****      * This condition is supposed to be true for all 32-bit and smaller platforms.
  84:libcanard/canard.c ****      * If your application fails here, make sure it's not built in 64-bit mode.
  85:libcanard/canard.c ****      * Refer to the design documentation for more info.
  86:libcanard/canard.c ****      */
  87:libcanard/canard.c ****     CANARD_ASSERT(CANARD_MULTIFRAME_RX_PAYLOAD_HEAD_SIZE >= 6);
  88:libcanard/canard.c **** 
  89:libcanard/canard.c ****     memset(out_ins, 0, sizeof(*out_ins));
  90:libcanard/canard.c **** 
  91:libcanard/canard.c ****     out_ins->node_id = CANARD_BROADCAST_NODE_ID;
ARM GAS  /tmp/ccbnltLA.s 			page 3


  92:libcanard/canard.c ****     out_ins->on_reception = on_reception;
  93:libcanard/canard.c ****     out_ins->should_accept = should_accept;
  94:libcanard/canard.c ****     out_ins->rx_states = NULL;
  95:libcanard/canard.c ****     out_ins->tx_queue = NULL;
  96:libcanard/canard.c ****     out_ins->user_reference = user_reference;
  97:libcanard/canard.c **** 
  98:libcanard/canard.c ****     size_t pool_capacity = mem_arena_size / CANARD_MEM_BLOCK_SIZE;
  99:libcanard/canard.c ****     if (pool_capacity > 0xFFFFU)
 100:libcanard/canard.c ****     {
 101:libcanard/canard.c ****         pool_capacity = 0xFFFFU;
 102:libcanard/canard.c ****     }
 103:libcanard/canard.c **** 
 104:libcanard/canard.c ****     initPoolAllocator(&out_ins->allocator, mem_arena, (uint16_t)pool_capacity);
 105:libcanard/canard.c **** }
 106:libcanard/canard.c **** 
 107:libcanard/canard.c **** void* canardGetUserReference(CanardInstance* ins)
 108:libcanard/canard.c **** {
 109:libcanard/canard.c ****     CANARD_ASSERT(ins != NULL);
 110:libcanard/canard.c ****     return ins->user_reference;
 111:libcanard/canard.c **** }
 112:libcanard/canard.c **** 
 113:libcanard/canard.c **** void canardSetLocalNodeID(CanardInstance* ins, uint8_t self_node_id)
 114:libcanard/canard.c **** {
 115:libcanard/canard.c ****     CANARD_ASSERT(ins != NULL);
 116:libcanard/canard.c **** 
 117:libcanard/canard.c ****     if ((ins->node_id == CANARD_BROADCAST_NODE_ID) &&
 118:libcanard/canard.c ****         (self_node_id >= CANARD_MIN_NODE_ID) &&
 119:libcanard/canard.c ****         (self_node_id <= CANARD_MAX_NODE_ID))
 120:libcanard/canard.c ****     {
 121:libcanard/canard.c ****         ins->node_id = self_node_id;
 122:libcanard/canard.c ****     }
 123:libcanard/canard.c ****     else
 124:libcanard/canard.c ****     {
 125:libcanard/canard.c ****         CANARD_ASSERT(false);
 126:libcanard/canard.c ****     }
 127:libcanard/canard.c **** }
 128:libcanard/canard.c **** 
 129:libcanard/canard.c **** uint8_t canardGetLocalNodeID(const CanardInstance* ins)
 130:libcanard/canard.c **** {
 131:libcanard/canard.c ****     return ins->node_id;
 132:libcanard/canard.c **** }
 133:libcanard/canard.c **** 
 134:libcanard/canard.c **** int16_t canardBroadcast(CanardInstance* ins,
 135:libcanard/canard.c ****                         uint64_t data_type_signature,
 136:libcanard/canard.c ****                         uint16_t data_type_id,
 137:libcanard/canard.c ****                         uint8_t* inout_transfer_id,
 138:libcanard/canard.c ****                         uint8_t priority,
 139:libcanard/canard.c ****                         const void* payload,
 140:libcanard/canard.c ****                         uint16_t payload_len)
 141:libcanard/canard.c **** {
 142:libcanard/canard.c ****     if (payload == NULL && payload_len > 0)
 143:libcanard/canard.c ****     {
 144:libcanard/canard.c ****         return -CANARD_ERROR_INVALID_ARGUMENT;
 145:libcanard/canard.c ****     }
 146:libcanard/canard.c ****     if (priority > CANARD_TRANSFER_PRIORITY_LOWEST)
 147:libcanard/canard.c ****     {
 148:libcanard/canard.c ****         return -CANARD_ERROR_INVALID_ARGUMENT;
ARM GAS  /tmp/ccbnltLA.s 			page 4


 149:libcanard/canard.c ****     }
 150:libcanard/canard.c **** 
 151:libcanard/canard.c ****     uint32_t can_id = 0;
 152:libcanard/canard.c ****     uint16_t crc = 0xFFFFU;
 153:libcanard/canard.c **** 
 154:libcanard/canard.c ****     if (canardGetLocalNodeID(ins) == 0)
 155:libcanard/canard.c ****     {
 156:libcanard/canard.c ****         if (payload_len > 7)
 157:libcanard/canard.c ****         {
 158:libcanard/canard.c ****             return -CANARD_ERROR_NODE_ID_NOT_SET;
 159:libcanard/canard.c ****         }
 160:libcanard/canard.c **** 
 161:libcanard/canard.c ****         static const uint16_t DTIDMask = (1U << ANON_MSG_DATA_TYPE_ID_BIT_LEN) - 1U;
 162:libcanard/canard.c **** 
 163:libcanard/canard.c ****         if ((data_type_id & DTIDMask) != data_type_id)
 164:libcanard/canard.c ****         {
 165:libcanard/canard.c ****             return -CANARD_ERROR_INVALID_ARGUMENT;
 166:libcanard/canard.c ****         }
 167:libcanard/canard.c **** 
 168:libcanard/canard.c ****         // anonymous transfer, random discriminator
 169:libcanard/canard.c ****         const uint16_t discriminator = (uint16_t)((crcAdd(0xFFFFU, payload, payload_len)) & 0x7FFEU
 170:libcanard/canard.c ****         can_id = ((uint32_t) priority << 24U) | ((uint32_t) discriminator << 9U) |
 171:libcanard/canard.c ****                  ((uint32_t) (data_type_id & DTIDMask) << 8U) | (uint32_t) canardGetLocalNodeID(ins
 172:libcanard/canard.c ****     }
 173:libcanard/canard.c ****     else
 174:libcanard/canard.c ****     {
 175:libcanard/canard.c ****         can_id = ((uint32_t) priority << 24U) | ((uint32_t) data_type_id << 8U) | (uint32_t) canard
 176:libcanard/canard.c **** 
 177:libcanard/canard.c ****         if (payload_len > 7)
 178:libcanard/canard.c ****         {
 179:libcanard/canard.c ****             crc = crcAddSignature(crc, data_type_signature);
 180:libcanard/canard.c ****             crc = crcAdd(crc, payload, payload_len);
 181:libcanard/canard.c ****         }
 182:libcanard/canard.c ****     }
 183:libcanard/canard.c **** 
 184:libcanard/canard.c ****     const int16_t result = enqueueTxFrames(ins, can_id, inout_transfer_id, crc, payload, payload_le
 185:libcanard/canard.c **** 
 186:libcanard/canard.c ****     incrementTransferID(inout_transfer_id);
 187:libcanard/canard.c **** 
 188:libcanard/canard.c ****     return result;
 189:libcanard/canard.c **** }
 190:libcanard/canard.c **** 
 191:libcanard/canard.c **** int16_t canardRequestOrRespond(CanardInstance* ins,
 192:libcanard/canard.c ****                                uint8_t destination_node_id,
 193:libcanard/canard.c ****                                uint64_t data_type_signature,
 194:libcanard/canard.c ****                                uint8_t data_type_id,
 195:libcanard/canard.c ****                                uint8_t* inout_transfer_id,
 196:libcanard/canard.c ****                                uint8_t priority,
 197:libcanard/canard.c ****                                CanardRequestResponse kind,
 198:libcanard/canard.c ****                                const void* payload,
 199:libcanard/canard.c ****                                uint16_t payload_len)
 200:libcanard/canard.c **** {
 201:libcanard/canard.c ****     if (payload == NULL && payload_len > 0)
 202:libcanard/canard.c ****     {
 203:libcanard/canard.c ****         return -CANARD_ERROR_INVALID_ARGUMENT;
 204:libcanard/canard.c ****     }
 205:libcanard/canard.c ****     if (priority > CANARD_TRANSFER_PRIORITY_LOWEST)
ARM GAS  /tmp/ccbnltLA.s 			page 5


 206:libcanard/canard.c ****     {
 207:libcanard/canard.c ****         return -CANARD_ERROR_INVALID_ARGUMENT;
 208:libcanard/canard.c ****     }
 209:libcanard/canard.c ****     if (canardGetLocalNodeID(ins) == 0)
 210:libcanard/canard.c ****     {
 211:libcanard/canard.c ****         return -CANARD_ERROR_NODE_ID_NOT_SET;
 212:libcanard/canard.c ****     }
 213:libcanard/canard.c **** 
 214:libcanard/canard.c ****     const uint32_t can_id = ((uint32_t) priority << 24U) | ((uint32_t) data_type_id << 16U) |
 215:libcanard/canard.c ****                             ((uint32_t) kind << 15U) | ((uint32_t) destination_node_id << 8U) |
 216:libcanard/canard.c ****                             (1U << 7U) | (uint32_t) canardGetLocalNodeID(ins);
 217:libcanard/canard.c ****     uint16_t crc = 0xFFFFU;
 218:libcanard/canard.c **** 
 219:libcanard/canard.c ****     if (payload_len > 7)
 220:libcanard/canard.c ****     {
 221:libcanard/canard.c ****         crc = crcAddSignature(crc, data_type_signature);
 222:libcanard/canard.c ****         crc = crcAdd(crc, payload, payload_len);
 223:libcanard/canard.c ****     }
 224:libcanard/canard.c **** 
 225:libcanard/canard.c ****     const int16_t result = enqueueTxFrames(ins, can_id, inout_transfer_id, crc, payload, payload_le
 226:libcanard/canard.c **** 
 227:libcanard/canard.c ****     if (kind == CanardRequest)                      // Response Transfer ID must not be altered
 228:libcanard/canard.c ****     {
 229:libcanard/canard.c ****         incrementTransferID(inout_transfer_id);
 230:libcanard/canard.c ****     }
 231:libcanard/canard.c **** 
 232:libcanard/canard.c ****     return result;
 233:libcanard/canard.c **** }
 234:libcanard/canard.c **** 
 235:libcanard/canard.c **** const CanardCANFrame* canardPeekTxQueue(const CanardInstance* ins)
 236:libcanard/canard.c **** {
 237:libcanard/canard.c ****     if (ins->tx_queue == NULL)
 238:libcanard/canard.c ****     {
 239:libcanard/canard.c ****         return NULL;
 240:libcanard/canard.c ****     }
 241:libcanard/canard.c ****     return &ins->tx_queue->frame;
 242:libcanard/canard.c **** }
 243:libcanard/canard.c **** 
 244:libcanard/canard.c **** void canardPopTxQueue(CanardInstance* ins)
 245:libcanard/canard.c **** {
 246:libcanard/canard.c ****     CanardTxQueueItem* item = ins->tx_queue;
 247:libcanard/canard.c ****     ins->tx_queue = item->next;
 248:libcanard/canard.c ****     freeBlock(&ins->allocator, item);
 249:libcanard/canard.c **** }
 250:libcanard/canard.c **** 
 251:libcanard/canard.c **** void canardHandleRxFrame(CanardInstance* ins, const CanardCANFrame* frame, uint64_t timestamp_usec)
 252:libcanard/canard.c **** {
 253:libcanard/canard.c ****     const CanardTransferType transfer_type = extractTransferType(frame->id);
 254:libcanard/canard.c ****     const uint8_t destination_node_id = (transfer_type == CanardTransferTypeBroadcast) ?
 255:libcanard/canard.c ****                                         (uint8_t)CANARD_BROADCAST_NODE_ID :
 256:libcanard/canard.c ****                                         DEST_ID_FROM_ID(frame->id);
 257:libcanard/canard.c **** 
 258:libcanard/canard.c ****     // TODO: This function should maintain statistics of transfer errors and such.
 259:libcanard/canard.c **** 
 260:libcanard/canard.c ****     if ((frame->id & CANARD_CAN_FRAME_EFF) == 0 ||
 261:libcanard/canard.c ****         (frame->id & CANARD_CAN_FRAME_RTR) != 0 ||
 262:libcanard/canard.c ****         (frame->id & CANARD_CAN_FRAME_ERR) != 0 ||
ARM GAS  /tmp/ccbnltLA.s 			page 6


 263:libcanard/canard.c ****         (frame->data_len < 1))
 264:libcanard/canard.c ****     {
 265:libcanard/canard.c ****         return;     // Unsupported frame, not UAVCAN - ignore
 266:libcanard/canard.c ****     }
 267:libcanard/canard.c **** 
 268:libcanard/canard.c ****     if (transfer_type != CanardTransferTypeBroadcast &&
 269:libcanard/canard.c ****         destination_node_id != canardGetLocalNodeID(ins))
 270:libcanard/canard.c ****     {
 271:libcanard/canard.c ****         return;     // Address mismatch
 272:libcanard/canard.c ****     }
 273:libcanard/canard.c **** 
 274:libcanard/canard.c ****     const uint8_t priority = PRIORITY_FROM_ID(frame->id);
 275:libcanard/canard.c ****     const uint8_t source_node_id = SOURCE_ID_FROM_ID(frame->id);
 276:libcanard/canard.c ****     const uint16_t data_type_id = extractDataType(frame->id);
 277:libcanard/canard.c ****     const uint32_t transfer_descriptor =
 278:libcanard/canard.c ****             MAKE_TRANSFER_DESCRIPTOR(data_type_id, transfer_type, source_node_id, destination_node_
 279:libcanard/canard.c **** 
 280:libcanard/canard.c ****     const uint8_t tail_byte = frame->data[frame->data_len - 1];
 281:libcanard/canard.c **** 
 282:libcanard/canard.c ****     CanardRxState* rx_state = NULL;
 283:libcanard/canard.c **** 
 284:libcanard/canard.c ****     if (IS_START_OF_TRANSFER(tail_byte))
 285:libcanard/canard.c ****     {
 286:libcanard/canard.c ****         uint64_t data_type_signature = 0;
 287:libcanard/canard.c **** 
 288:libcanard/canard.c ****         if (ins->should_accept(ins, &data_type_signature, data_type_id, transfer_type, source_node_
 289:libcanard/canard.c ****         {
 290:libcanard/canard.c ****             rx_state = traverseRxStates(ins, transfer_descriptor);
 291:libcanard/canard.c **** 
 292:libcanard/canard.c ****             if(rx_state == NULL)
 293:libcanard/canard.c ****             {
 294:libcanard/canard.c ****                 return; // No allocator room for this frame
 295:libcanard/canard.c ****             }
 296:libcanard/canard.c **** 
 297:libcanard/canard.c ****             rx_state->calculated_crc = crcAddSignature(0xFFFFU, data_type_signature);
 298:libcanard/canard.c ****         }
 299:libcanard/canard.c ****         else
 300:libcanard/canard.c ****         {
 301:libcanard/canard.c ****             return;     // The application doesn't want this transfer
 302:libcanard/canard.c ****         }
 303:libcanard/canard.c ****     }
 304:libcanard/canard.c ****     else
 305:libcanard/canard.c ****     {
 306:libcanard/canard.c ****         rx_state = findRxState(ins->rx_states, transfer_descriptor);
 307:libcanard/canard.c **** 
 308:libcanard/canard.c ****         if (rx_state == NULL)
 309:libcanard/canard.c ****         {
 310:libcanard/canard.c ****             return;
 311:libcanard/canard.c ****         }
 312:libcanard/canard.c ****     }
 313:libcanard/canard.c **** 
 314:libcanard/canard.c ****     CANARD_ASSERT(rx_state != NULL);    // All paths that lead to NULL should be terminated with re
 315:libcanard/canard.c **** 
 316:libcanard/canard.c ****     // Resolving the state flags:
 317:libcanard/canard.c ****     const bool not_initialized = rx_state->timestamp_usec == 0;
 318:libcanard/canard.c ****     const bool tid_timed_out = (timestamp_usec - rx_state->timestamp_usec) > TRANSFER_TIMEOUT_USEC;
 319:libcanard/canard.c ****     const bool first_frame = IS_START_OF_TRANSFER(tail_byte);
ARM GAS  /tmp/ccbnltLA.s 			page 7


 320:libcanard/canard.c ****     const bool not_previous_tid =
 321:libcanard/canard.c ****         computeTransferIDForwardDistance((uint8_t) rx_state->transfer_id, TRANSFER_ID_FROM_TAIL_BYT
 322:libcanard/canard.c **** 
 323:libcanard/canard.c ****     const bool need_restart =
 324:libcanard/canard.c ****             (not_initialized) ||
 325:libcanard/canard.c ****             (tid_timed_out) ||
 326:libcanard/canard.c ****             (first_frame && not_previous_tid);
 327:libcanard/canard.c **** 
 328:libcanard/canard.c ****     if (need_restart)
 329:libcanard/canard.c ****     {
 330:libcanard/canard.c ****         rx_state->transfer_id = TRANSFER_ID_FROM_TAIL_BYTE(tail_byte);
 331:libcanard/canard.c ****         rx_state->next_toggle = 0;
 332:libcanard/canard.c ****         releaseStatePayload(ins, rx_state);
 333:libcanard/canard.c ****         if (!IS_START_OF_TRANSFER(tail_byte)) // missed the first frame
 334:libcanard/canard.c ****         {
 335:libcanard/canard.c ****             rx_state->transfer_id++;
 336:libcanard/canard.c ****             return;
 337:libcanard/canard.c ****         }
 338:libcanard/canard.c ****     }
 339:libcanard/canard.c **** 
 340:libcanard/canard.c ****     if (IS_START_OF_TRANSFER(tail_byte) && IS_END_OF_TRANSFER(tail_byte)) // single frame transfer
 341:libcanard/canard.c ****     {
 342:libcanard/canard.c ****         rx_state->timestamp_usec = timestamp_usec;
 343:libcanard/canard.c ****         CanardRxTransfer rx_transfer = {
 344:libcanard/canard.c ****             .timestamp_usec = timestamp_usec,
 345:libcanard/canard.c ****             .payload_head = frame->data,
 346:libcanard/canard.c ****             .payload_len = (uint8_t)(frame->data_len - 1U),
 347:libcanard/canard.c ****             .data_type_id = data_type_id,
 348:libcanard/canard.c ****             .transfer_type = transfer_type,
 349:libcanard/canard.c ****             .transfer_id = TRANSFER_ID_FROM_TAIL_BYTE(tail_byte),
 350:libcanard/canard.c ****             .priority = priority,
 351:libcanard/canard.c ****             .source_node_id = source_node_id
 352:libcanard/canard.c ****         };
 353:libcanard/canard.c **** 
 354:libcanard/canard.c ****         ins->on_reception(ins, &rx_transfer);
 355:libcanard/canard.c **** 
 356:libcanard/canard.c ****         prepareForNextTransfer(rx_state);
 357:libcanard/canard.c ****         return;
 358:libcanard/canard.c ****     }
 359:libcanard/canard.c **** 
 360:libcanard/canard.c ****     if (TOGGLE_BIT(tail_byte) != rx_state->next_toggle)
 361:libcanard/canard.c ****     {
 362:libcanard/canard.c ****         return; // wrong toggle
 363:libcanard/canard.c ****     }
 364:libcanard/canard.c **** 
 365:libcanard/canard.c ****     if (TRANSFER_ID_FROM_TAIL_BYTE(tail_byte) != rx_state->transfer_id)
 366:libcanard/canard.c ****     {
 367:libcanard/canard.c ****         return; // unexpected tid
 368:libcanard/canard.c ****     }
 369:libcanard/canard.c **** 
 370:libcanard/canard.c ****     if (IS_START_OF_TRANSFER(tail_byte) && !IS_END_OF_TRANSFER(tail_byte))      // Beginning of mul
 371:libcanard/canard.c ****     {
 372:libcanard/canard.c ****         if (frame->data_len <= 3)
 373:libcanard/canard.c ****         {
 374:libcanard/canard.c ****             return;     // Not enough data
 375:libcanard/canard.c ****         }
 376:libcanard/canard.c **** 
ARM GAS  /tmp/ccbnltLA.s 			page 8


 377:libcanard/canard.c ****         // take off the crc and store the payload
 378:libcanard/canard.c ****         rx_state->timestamp_usec = timestamp_usec;
 379:libcanard/canard.c ****         const int16_t ret = bufferBlockPushBytes(&ins->allocator, rx_state, frame->data + 2,
 380:libcanard/canard.c ****                                                  (uint8_t) (frame->data_len - 3));
 381:libcanard/canard.c ****         if (ret < 0)
 382:libcanard/canard.c ****         {
 383:libcanard/canard.c ****             releaseStatePayload(ins, rx_state);
 384:libcanard/canard.c ****             prepareForNextTransfer(rx_state);
 385:libcanard/canard.c ****             return;
 386:libcanard/canard.c ****         }
 387:libcanard/canard.c ****         rx_state->payload_crc = (uint16_t)(((uint16_t) frame->data[0]) | (uint16_t)((uint16_t) fram
 388:libcanard/canard.c ****         rx_state->calculated_crc = crcAdd((uint16_t)rx_state->calculated_crc,
 389:libcanard/canard.c ****                                           frame->data + 2, (uint8_t)(frame->data_len - 3));
 390:libcanard/canard.c ****     }
 391:libcanard/canard.c ****     else if (!IS_START_OF_TRANSFER(tail_byte) && !IS_END_OF_TRANSFER(tail_byte))    // Middle of a 
 392:libcanard/canard.c ****     {
 393:libcanard/canard.c ****         const int16_t ret = bufferBlockPushBytes(&ins->allocator, rx_state, frame->data,
 394:libcanard/canard.c ****                                                  (uint8_t) (frame->data_len - 1));
 395:libcanard/canard.c ****         if (ret < 0)
 396:libcanard/canard.c ****         {
 397:libcanard/canard.c ****             releaseStatePayload(ins, rx_state);
 398:libcanard/canard.c ****             prepareForNextTransfer(rx_state);
 399:libcanard/canard.c ****             return;
 400:libcanard/canard.c ****         }
 401:libcanard/canard.c ****         rx_state->calculated_crc = crcAdd((uint16_t)rx_state->calculated_crc,
 402:libcanard/canard.c ****                                           frame->data, (uint8_t)(frame->data_len - 1));
 403:libcanard/canard.c ****     }
 404:libcanard/canard.c ****     else                                                                            // End of a mul
 405:libcanard/canard.c ****     {
 406:libcanard/canard.c ****         const uint8_t frame_payload_size = (uint8_t)(frame->data_len - 1);
 407:libcanard/canard.c **** 
 408:libcanard/canard.c ****         uint8_t tail_offset = 0;
 409:libcanard/canard.c **** 
 410:libcanard/canard.c ****         if (rx_state->payload_len < CANARD_MULTIFRAME_RX_PAYLOAD_HEAD_SIZE)
 411:libcanard/canard.c ****         {
 412:libcanard/canard.c ****             // Copy the beginning of the frame into the head, point the tail pointer to the remaind
 413:libcanard/canard.c ****             for (size_t i = rx_state->payload_len;
 414:libcanard/canard.c ****                  (i < CANARD_MULTIFRAME_RX_PAYLOAD_HEAD_SIZE) && (tail_offset < frame_payload_size)
 415:libcanard/canard.c ****                  i++, tail_offset++)
 416:libcanard/canard.c ****             {
 417:libcanard/canard.c ****                 rx_state->buffer_head[i] = frame->data[tail_offset];
 418:libcanard/canard.c ****             }
 419:libcanard/canard.c ****         }
 420:libcanard/canard.c ****         else
 421:libcanard/canard.c ****         {
 422:libcanard/canard.c ****             // Like above, except that the beginning goes into the last block of the storage
 423:libcanard/canard.c ****             CanardBufferBlock* block = rx_state->buffer_blocks;
 424:libcanard/canard.c ****             if (block != NULL)          // If there's no middle, that's fine, we'll use only head a
 425:libcanard/canard.c ****             {
 426:libcanard/canard.c ****                 size_t offset = CANARD_MULTIFRAME_RX_PAYLOAD_HEAD_SIZE;    // Payload offset of the
 427:libcanard/canard.c ****                 while (block->next != NULL)
 428:libcanard/canard.c ****                 {
 429:libcanard/canard.c ****                     block = block->next;
 430:libcanard/canard.c ****                     offset += CANARD_BUFFER_BLOCK_DATA_SIZE;
 431:libcanard/canard.c ****                 }
 432:libcanard/canard.c ****                 CANARD_ASSERT(block != NULL);
 433:libcanard/canard.c **** 
ARM GAS  /tmp/ccbnltLA.s 			page 9


 434:libcanard/canard.c ****                 const size_t offset_within_block = rx_state->payload_len - offset;
 435:libcanard/canard.c ****                 CANARD_ASSERT(offset_within_block < CANARD_BUFFER_BLOCK_DATA_SIZE);
 436:libcanard/canard.c **** 
 437:libcanard/canard.c ****                 for (size_t i = offset_within_block;
 438:libcanard/canard.c ****                      (i < CANARD_BUFFER_BLOCK_DATA_SIZE) && (tail_offset < frame_payload_size);
 439:libcanard/canard.c ****                      i++, tail_offset++)
 440:libcanard/canard.c ****                 {
 441:libcanard/canard.c ****                     block->data[i] = frame->data[tail_offset];
 442:libcanard/canard.c ****                 }
 443:libcanard/canard.c ****             }
 444:libcanard/canard.c ****         }
 445:libcanard/canard.c **** 
 446:libcanard/canard.c ****         CanardRxTransfer rx_transfer = {
 447:libcanard/canard.c ****             .timestamp_usec = timestamp_usec,
 448:libcanard/canard.c ****             .payload_head = rx_state->buffer_head,
 449:libcanard/canard.c ****             .payload_middle = rx_state->buffer_blocks,
 450:libcanard/canard.c ****             .payload_tail = (tail_offset >= frame_payload_size) ? NULL : (&frame->data[tail_offset]
 451:libcanard/canard.c ****             .payload_len = (uint16_t)(rx_state->payload_len + frame_payload_size),
 452:libcanard/canard.c ****             .data_type_id = data_type_id,
 453:libcanard/canard.c ****             .transfer_type = transfer_type,
 454:libcanard/canard.c ****             .transfer_id = TRANSFER_ID_FROM_TAIL_BYTE(tail_byte),
 455:libcanard/canard.c ****             .priority = priority,
 456:libcanard/canard.c ****             .source_node_id = source_node_id
 457:libcanard/canard.c ****         };
 458:libcanard/canard.c **** 
 459:libcanard/canard.c ****         rx_state->buffer_blocks = NULL;     // Block list ownership has been transferred to rx_tran
 460:libcanard/canard.c **** 
 461:libcanard/canard.c ****         // CRC validation
 462:libcanard/canard.c ****         rx_state->calculated_crc = crcAdd((uint16_t)rx_state->calculated_crc, frame->data, frame->d
 463:libcanard/canard.c ****         if (rx_state->calculated_crc == rx_state->payload_crc)
 464:libcanard/canard.c ****         {
 465:libcanard/canard.c ****             ins->on_reception(ins, &rx_transfer);
 466:libcanard/canard.c ****         }
 467:libcanard/canard.c **** 
 468:libcanard/canard.c ****         // Making sure the payload is released even if the application didn't bother with it
 469:libcanard/canard.c ****         canardReleaseRxTransferPayload(ins, &rx_transfer);
 470:libcanard/canard.c ****         prepareForNextTransfer(rx_state);
 471:libcanard/canard.c ****         return;
 472:libcanard/canard.c ****     }
 473:libcanard/canard.c **** 
 474:libcanard/canard.c ****     rx_state->next_toggle = rx_state->next_toggle ? 0 : 1;
 475:libcanard/canard.c **** }
 476:libcanard/canard.c **** 
 477:libcanard/canard.c **** void canardCleanupStaleTransfers(CanardInstance* ins, uint64_t current_time_usec)
 478:libcanard/canard.c **** {
 479:libcanard/canard.c ****     CanardRxState* prev = ins->rx_states, * state = ins->rx_states;
 480:libcanard/canard.c **** 
 481:libcanard/canard.c ****     while (state != NULL)
 482:libcanard/canard.c ****     {
 483:libcanard/canard.c ****         if ((current_time_usec - state->timestamp_usec) > TRANSFER_TIMEOUT_USEC)
 484:libcanard/canard.c ****         {
 485:libcanard/canard.c ****             if (state == ins->rx_states)
 486:libcanard/canard.c ****             {
 487:libcanard/canard.c ****                 releaseStatePayload(ins, state);
 488:libcanard/canard.c ****                 ins->rx_states = ins->rx_states->next;
 489:libcanard/canard.c ****                 freeBlock(&ins->allocator, state);
 490:libcanard/canard.c ****                 state = ins->rx_states;
ARM GAS  /tmp/ccbnltLA.s 			page 10


 491:libcanard/canard.c ****                 prev = state;
 492:libcanard/canard.c ****             }
 493:libcanard/canard.c ****             else
 494:libcanard/canard.c ****             {
 495:libcanard/canard.c ****                 releaseStatePayload(ins, state);
 496:libcanard/canard.c ****                 prev->next = state->next;
 497:libcanard/canard.c ****                 freeBlock(&ins->allocator, state);
 498:libcanard/canard.c ****                 state = prev->next;
 499:libcanard/canard.c ****             }
 500:libcanard/canard.c ****         }
 501:libcanard/canard.c ****         else
 502:libcanard/canard.c ****         {
 503:libcanard/canard.c ****             prev = state;
 504:libcanard/canard.c ****             state = state->next;
 505:libcanard/canard.c ****         }
 506:libcanard/canard.c ****     }
 507:libcanard/canard.c **** }
 508:libcanard/canard.c **** 
 509:libcanard/canard.c **** int16_t canardDecodeScalar(const CanardRxTransfer* transfer,
 510:libcanard/canard.c ****                            uint32_t bit_offset,
 511:libcanard/canard.c ****                            uint8_t bit_length,
 512:libcanard/canard.c ****                            bool value_is_signed,
 513:libcanard/canard.c ****                            void* out_value)
 514:libcanard/canard.c **** {
 515:libcanard/canard.c ****     if (transfer == NULL || out_value == NULL)
 516:libcanard/canard.c ****     {
 517:libcanard/canard.c ****         return -CANARD_ERROR_INVALID_ARGUMENT;
 518:libcanard/canard.c ****     }
 519:libcanard/canard.c **** 
 520:libcanard/canard.c ****     if (bit_length < 1 || bit_length > 64)
 521:libcanard/canard.c ****     {
 522:libcanard/canard.c ****         return -CANARD_ERROR_INVALID_ARGUMENT;
 523:libcanard/canard.c ****     }
 524:libcanard/canard.c **** 
 525:libcanard/canard.c ****     if (bit_length == 1 && value_is_signed)
 526:libcanard/canard.c ****     {
 527:libcanard/canard.c ****         return -CANARD_ERROR_INVALID_ARGUMENT;
 528:libcanard/canard.c ****     }
 529:libcanard/canard.c **** 
 530:libcanard/canard.c ****     /*
 531:libcanard/canard.c ****      * Reading raw bytes into the temporary storage.
 532:libcanard/canard.c ****      * Luckily, C guarantees that every element is aligned at the beginning (lower address) of the 
 533:libcanard/canard.c ****      */
 534:libcanard/canard.c ****     union
 535:libcanard/canard.c ****     {
 536:libcanard/canard.c ****         bool     boolean;       ///< sizeof(bool) is implementation-defined, so it has to be handle
 537:libcanard/canard.c ****         uint8_t  u8;            ///< Also char
 538:libcanard/canard.c ****         int8_t   s8;
 539:libcanard/canard.c ****         uint16_t u16;
 540:libcanard/canard.c ****         int16_t  s16;
 541:libcanard/canard.c ****         uint32_t u32;
 542:libcanard/canard.c ****         int32_t  s32;           ///< Also float, possibly double, possibly long double (depends on 
 543:libcanard/canard.c ****         uint64_t u64;
 544:libcanard/canard.c ****         int64_t  s64;           ///< Also double, possibly float, possibly long double (depends on 
 545:libcanard/canard.c ****         uint8_t bytes[8];
 546:libcanard/canard.c ****     } storage;
 547:libcanard/canard.c **** 
ARM GAS  /tmp/ccbnltLA.s 			page 11


 548:libcanard/canard.c ****     memset(&storage, 0, sizeof(storage));   // This is important
 549:libcanard/canard.c **** 
 550:libcanard/canard.c ****     const int16_t result = descatterTransferPayload(transfer, bit_offset, bit_length, &storage.byte
 551:libcanard/canard.c ****     if (result <= 0)
 552:libcanard/canard.c ****     {
 553:libcanard/canard.c ****         return result;
 554:libcanard/canard.c ****     }
 555:libcanard/canard.c **** 
 556:libcanard/canard.c ****     CANARD_ASSERT((result > 0) && (result <= 64) && (result <= bit_length));
 557:libcanard/canard.c **** 
 558:libcanard/canard.c ****     /*
 559:libcanard/canard.c ****      * The bit copy algorithm assumes that more significant bits have lower index, so we need to sh
 560:libcanard/canard.c ****      * Extra most significant bits will be filled with zeroes, which is fine.
 561:libcanard/canard.c ****      * Coverity Scan mistakenly believes that the array may be overrun if bit_length == 64; however
 562:libcanard/canard.c ****      * not be taken if bit_length == 64, because 64 % 8 == 0.
 563:libcanard/canard.c ****      */
 564:libcanard/canard.c ****     if ((bit_length % 8) != 0)
 565:libcanard/canard.c ****     {
 566:libcanard/canard.c ****         // coverity[overrun-local]
 567:libcanard/canard.c ****         storage.bytes[bit_length / 8U] = (uint8_t)(storage.bytes[bit_length / 8U] >> ((8U - (bit_le
 568:libcanard/canard.c ****     }
 569:libcanard/canard.c **** 
 570:libcanard/canard.c ****     /*
 571:libcanard/canard.c ****      * Determining the closest standard byte length - this will be needed for byte reordering and s
 572:libcanard/canard.c ****      */
 573:libcanard/canard.c ****     uint8_t std_byte_length = 0;
 574:libcanard/canard.c ****     if      (bit_length == 1)   { std_byte_length = sizeof(bool); }
 575:libcanard/canard.c ****     else if (bit_length <= 8)   { std_byte_length = 1; }
 576:libcanard/canard.c ****     else if (bit_length <= 16)  { std_byte_length = 2; }
 577:libcanard/canard.c ****     else if (bit_length <= 32)  { std_byte_length = 4; }
 578:libcanard/canard.c ****     else if (bit_length <= 64)  { std_byte_length = 8; }
 579:libcanard/canard.c ****     else
 580:libcanard/canard.c ****     {
 581:libcanard/canard.c ****         CANARD_ASSERT(false);
 582:libcanard/canard.c ****         return -CANARD_ERROR_INTERNAL;
 583:libcanard/canard.c ****     }
 584:libcanard/canard.c **** 
 585:libcanard/canard.c ****     CANARD_ASSERT((std_byte_length > 0) && (std_byte_length <= 8));
 586:libcanard/canard.c **** 
 587:libcanard/canard.c ****     /*
 588:libcanard/canard.c ****      * Flipping the byte order if needed.
 589:libcanard/canard.c ****      */
 590:libcanard/canard.c ****     if (isBigEndian())
 591:libcanard/canard.c ****     {
 592:libcanard/canard.c ****         swapByteOrder(&storage.bytes[0], std_byte_length);
 593:libcanard/canard.c ****     }
 594:libcanard/canard.c **** 
 595:libcanard/canard.c ****     /*
 596:libcanard/canard.c ****      * Extending the sign bit if needed. I miss templates.
 597:libcanard/canard.c ****      * Note that we operate on unsigned values in order to avoid undefined behaviors.
 598:libcanard/canard.c ****      */
 599:libcanard/canard.c ****     if (value_is_signed && (std_byte_length * 8 != bit_length))
 600:libcanard/canard.c ****     {
 601:libcanard/canard.c ****         if (bit_length <= 8)
 602:libcanard/canard.c ****         {
 603:libcanard/canard.c ****             if ((storage.u8 & (1U << (bit_length - 1U))) != 0)                           // If the 
 604:libcanard/canard.c ****             {
ARM GAS  /tmp/ccbnltLA.s 			page 12


 605:libcanard/canard.c ****                 storage.u8 |= (uint8_t) 0xFFU & (uint8_t) ~((1U << bit_length) - 1U);   // ...set a
 606:libcanard/canard.c ****             }
 607:libcanard/canard.c ****         }
 608:libcanard/canard.c ****         else if (bit_length <= 16)
 609:libcanard/canard.c ****         {
 610:libcanard/canard.c ****             if ((storage.u16 & (1U << (bit_length - 1U))) != 0)
 611:libcanard/canard.c ****             {
 612:libcanard/canard.c ****                 storage.u16 |= (uint16_t) 0xFFFFU & (uint16_t) ~((1U << bit_length) - 1U);
 613:libcanard/canard.c ****             }
 614:libcanard/canard.c ****         }
 615:libcanard/canard.c ****         else if (bit_length <= 32)
 616:libcanard/canard.c ****         {
 617:libcanard/canard.c ****             if ((storage.u32 & (((uint32_t) 1) << (bit_length - 1U))) != 0)
 618:libcanard/canard.c ****             {
 619:libcanard/canard.c ****                 storage.u32 |= (uint32_t) 0xFFFFFFFFUL & (uint32_t) ~((((uint32_t) 1) << bit_length
 620:libcanard/canard.c ****             }
 621:libcanard/canard.c ****         }
 622:libcanard/canard.c ****         else if (bit_length < 64)   // Strictly less, this is not a typo
 623:libcanard/canard.c ****         {
 624:libcanard/canard.c ****             if ((storage.u64 & (((uint64_t) 1) << (bit_length - 1U))) != 0)
 625:libcanard/canard.c ****             {
 626:libcanard/canard.c ****                 storage.u64 |= (uint64_t) 0xFFFFFFFFFFFFFFFFULL & (uint64_t) ~((((uint64_t) 1) << b
 627:libcanard/canard.c ****             }
 628:libcanard/canard.c ****         }
 629:libcanard/canard.c ****         else
 630:libcanard/canard.c ****         {
 631:libcanard/canard.c ****             CANARD_ASSERT(false);
 632:libcanard/canard.c ****             return -CANARD_ERROR_INTERNAL;
 633:libcanard/canard.c ****         }
 634:libcanard/canard.c ****     }
 635:libcanard/canard.c **** 
 636:libcanard/canard.c ****     /*
 637:libcanard/canard.c ****      * Copying the result out.
 638:libcanard/canard.c ****      */
 639:libcanard/canard.c ****     if (value_is_signed)
 640:libcanard/canard.c ****     {
 641:libcanard/canard.c ****         if      (bit_length <= 8)   { *( (int8_t*) out_value) = storage.s8;  }
 642:libcanard/canard.c ****         else if (bit_length <= 16)  { *((int16_t*) out_value) = storage.s16; }
 643:libcanard/canard.c ****         else if (bit_length <= 32)  { *((int32_t*) out_value) = storage.s32; }
 644:libcanard/canard.c ****         else if (bit_length <= 64)  { *((int64_t*) out_value) = storage.s64; }
 645:libcanard/canard.c ****         else
 646:libcanard/canard.c ****         {
 647:libcanard/canard.c ****             CANARD_ASSERT(false);
 648:libcanard/canard.c ****             return -CANARD_ERROR_INTERNAL;
 649:libcanard/canard.c ****         }
 650:libcanard/canard.c ****     }
 651:libcanard/canard.c ****     else
 652:libcanard/canard.c ****     {
 653:libcanard/canard.c ****         if      (bit_length == 1)   { *(    (bool*) out_value) = storage.boolean; }
 654:libcanard/canard.c ****         else if (bit_length <= 8)   { *( (uint8_t*) out_value) = storage.u8;  }
 655:libcanard/canard.c ****         else if (bit_length <= 16)  { *((uint16_t*) out_value) = storage.u16; }
 656:libcanard/canard.c ****         else if (bit_length <= 32)  { *((uint32_t*) out_value) = storage.u32; }
 657:libcanard/canard.c ****         else if (bit_length <= 64)  { *((uint64_t*) out_value) = storage.u64; }
 658:libcanard/canard.c ****         else
 659:libcanard/canard.c ****         {
 660:libcanard/canard.c ****             CANARD_ASSERT(false);
 661:libcanard/canard.c ****             return -CANARD_ERROR_INTERNAL;
ARM GAS  /tmp/ccbnltLA.s 			page 13


 662:libcanard/canard.c ****         }
 663:libcanard/canard.c ****     }
 664:libcanard/canard.c **** 
 665:libcanard/canard.c ****     CANARD_ASSERT(result <= bit_length);
 666:libcanard/canard.c ****     CANARD_ASSERT(result > 0);
 667:libcanard/canard.c ****     return result;
 668:libcanard/canard.c **** }
 669:libcanard/canard.c **** 
 670:libcanard/canard.c **** void canardEncodeScalar(void* destination,
 671:libcanard/canard.c ****                         uint32_t bit_offset,
 672:libcanard/canard.c ****                         uint8_t bit_length,
 673:libcanard/canard.c ****                         const void* value)
 674:libcanard/canard.c **** {
 675:libcanard/canard.c ****     /*
 676:libcanard/canard.c ****      * This function can only fail due to invalid arguments, so it was decided to make it return vo
 677:libcanard/canard.c ****      * and in the case of bad arguments try the best effort or just trigger an CANARD_ASSERTion fai
 678:libcanard/canard.c ****      * Maybe not the best solution, but it simplifies the API.
 679:libcanard/canard.c ****      */
 680:libcanard/canard.c ****     CANARD_ASSERT(destination != NULL);
 681:libcanard/canard.c ****     CANARD_ASSERT(value != NULL);
 682:libcanard/canard.c **** 
 683:libcanard/canard.c ****     if (bit_length > 64)
 684:libcanard/canard.c ****     {
 685:libcanard/canard.c ****         CANARD_ASSERT(false);
 686:libcanard/canard.c ****         bit_length = 64;
 687:libcanard/canard.c ****     }
 688:libcanard/canard.c **** 
 689:libcanard/canard.c ****     if (bit_length < 1)
 690:libcanard/canard.c ****     {
 691:libcanard/canard.c ****         CANARD_ASSERT(false);
 692:libcanard/canard.c ****         bit_length = 1;
 693:libcanard/canard.c ****     }
 694:libcanard/canard.c **** 
 695:libcanard/canard.c ****     /*
 696:libcanard/canard.c ****      * Preparing the data in the temporary storage.
 697:libcanard/canard.c ****      */
 698:libcanard/canard.c ****     union
 699:libcanard/canard.c ****     {
 700:libcanard/canard.c ****         bool     boolean;
 701:libcanard/canard.c ****         uint8_t  u8;
 702:libcanard/canard.c ****         uint16_t u16;
 703:libcanard/canard.c ****         uint32_t u32;
 704:libcanard/canard.c ****         uint64_t u64;
 705:libcanard/canard.c ****         uint8_t bytes[8];
 706:libcanard/canard.c ****     } storage;
 707:libcanard/canard.c **** 
 708:libcanard/canard.c ****     memset(&storage, 0, sizeof(storage));
 709:libcanard/canard.c **** 
 710:libcanard/canard.c ****     uint8_t std_byte_length = 0;
 711:libcanard/canard.c **** 
 712:libcanard/canard.c ****     // Extra most significant bits can be safely ignored here.
 713:libcanard/canard.c ****     if      (bit_length == 1)   { std_byte_length = sizeof(bool);   storage.boolean = (*((bool*) va
 714:libcanard/canard.c ****     else if (bit_length <= 8)   { std_byte_length = 1;              storage.u8  = *((uint8_t*) valu
 715:libcanard/canard.c ****     else if (bit_length <= 16)  { std_byte_length = 2;              storage.u16 = *((uint16_t*) val
 716:libcanard/canard.c ****     else if (bit_length <= 32)  { std_byte_length = 4;              storage.u32 = *((uint32_t*) val
 717:libcanard/canard.c ****     else if (bit_length <= 64)  { std_byte_length = 8;              storage.u64 = *((uint64_t*) val
 718:libcanard/canard.c ****     else
ARM GAS  /tmp/ccbnltLA.s 			page 14


 719:libcanard/canard.c ****     {
 720:libcanard/canard.c ****         CANARD_ASSERT(false);
 721:libcanard/canard.c ****     }
 722:libcanard/canard.c **** 
 723:libcanard/canard.c ****     CANARD_ASSERT(std_byte_length > 0);
 724:libcanard/canard.c **** 
 725:libcanard/canard.c ****     if (isBigEndian())
 726:libcanard/canard.c ****     {
 727:libcanard/canard.c ****         swapByteOrder(&storage.bytes[0], std_byte_length);
 728:libcanard/canard.c ****     }
 729:libcanard/canard.c **** 
 730:libcanard/canard.c ****     /*
 731:libcanard/canard.c ****      * The bit copy algorithm assumes that more significant bits have lower index, so we need to sh
 732:libcanard/canard.c ****      * Extra least significant bits will be filled with zeroes, which is fine.
 733:libcanard/canard.c ****      * Extra most significant bits will be discarded here.
 734:libcanard/canard.c ****      * Coverity Scan mistakenly believes that the array may be overrun if bit_length == 64; however
 735:libcanard/canard.c ****      * not be taken if bit_length == 64, because 64 % 8 == 0.
 736:libcanard/canard.c ****      */
 737:libcanard/canard.c ****     if ((bit_length % 8) != 0)
 738:libcanard/canard.c ****     {
 739:libcanard/canard.c ****         // coverity[overrun-local]
 740:libcanard/canard.c ****         storage.bytes[bit_length / 8U] = (uint8_t)(storage.bytes[bit_length / 8U] << ((8U - (bit_le
 741:libcanard/canard.c ****     }
 742:libcanard/canard.c **** 
 743:libcanard/canard.c ****     /*
 744:libcanard/canard.c ****      * Now, the storage contains properly serialized scalar. Copying it out.
 745:libcanard/canard.c ****      */
 746:libcanard/canard.c ****     copyBitArray(&storage.bytes[0], 0, bit_length, (uint8_t*) destination, bit_offset);
 747:libcanard/canard.c **** }
 748:libcanard/canard.c **** 
 749:libcanard/canard.c **** void canardReleaseRxTransferPayload(CanardInstance* ins, CanardRxTransfer* transfer)
 750:libcanard/canard.c **** {
 751:libcanard/canard.c ****     while (transfer->payload_middle != NULL)
 752:libcanard/canard.c ****     {
 753:libcanard/canard.c ****         CanardBufferBlock* const temp = transfer->payload_middle->next;
 754:libcanard/canard.c ****         freeBlock(&ins->allocator, transfer->payload_middle);
 755:libcanard/canard.c ****         transfer->payload_middle = temp;
 756:libcanard/canard.c ****     }
 757:libcanard/canard.c **** 
 758:libcanard/canard.c ****     transfer->payload_middle = NULL;
 759:libcanard/canard.c ****     transfer->payload_head = NULL;
 760:libcanard/canard.c ****     transfer->payload_tail = NULL;
 761:libcanard/canard.c ****     transfer->payload_len = 0;
 762:libcanard/canard.c **** }
 763:libcanard/canard.c **** 
 764:libcanard/canard.c **** CanardPoolAllocatorStatistics canardGetPoolAllocatorStatistics(CanardInstance* ins)
 765:libcanard/canard.c **** {
 766:libcanard/canard.c ****     return ins->allocator.statistics;
 767:libcanard/canard.c **** }
 768:libcanard/canard.c **** 
 769:libcanard/canard.c **** uint16_t canardConvertNativeFloatToFloat16(float value)
 770:libcanard/canard.c **** {
 771:libcanard/canard.c ****     CANARD_ASSERT(sizeof(float) == 4);
 772:libcanard/canard.c **** 
 773:libcanard/canard.c ****     union FP32
 774:libcanard/canard.c ****     {
 775:libcanard/canard.c ****         uint32_t u;
ARM GAS  /tmp/ccbnltLA.s 			page 15


 776:libcanard/canard.c ****         float f;
 777:libcanard/canard.c ****     };
 778:libcanard/canard.c **** 
 779:libcanard/canard.c ****     const union FP32 f32inf = { 255UL << 23U };
 780:libcanard/canard.c ****     const union FP32 f16inf = { 31UL << 23U };
 781:libcanard/canard.c ****     const union FP32 magic = { 15UL << 23U };
 782:libcanard/canard.c ****     const uint32_t sign_mask = 0x80000000UL;
 783:libcanard/canard.c ****     const uint32_t round_mask = ~0xFFFUL;
 784:libcanard/canard.c **** 
 785:libcanard/canard.c ****     union FP32 in;
 786:libcanard/canard.c ****     in.f = value;
 787:libcanard/canard.c ****     uint32_t sign = in.u & sign_mask;
 788:libcanard/canard.c ****     in.u ^= sign;
 789:libcanard/canard.c **** 
 790:libcanard/canard.c ****     uint16_t out = 0;
 791:libcanard/canard.c **** 
 792:libcanard/canard.c ****     if (in.u >= f32inf.u)
 793:libcanard/canard.c ****     {
 794:libcanard/canard.c ****         out = (in.u > f32inf.u) ? (uint16_t)0x7FFFU : (uint16_t)0x7C00U;
 795:libcanard/canard.c ****     }
 796:libcanard/canard.c ****     else
 797:libcanard/canard.c ****     {
 798:libcanard/canard.c ****         in.u &= round_mask;
 799:libcanard/canard.c ****         in.f *= magic.f;
 800:libcanard/canard.c ****         in.u -= round_mask;
 801:libcanard/canard.c ****         if (in.u > f16inf.u)
 802:libcanard/canard.c ****         {
 803:libcanard/canard.c ****             in.u = f16inf.u;
 804:libcanard/canard.c ****         }
 805:libcanard/canard.c ****         out = (uint16_t)(in.u >> 13U);
 806:libcanard/canard.c ****     }
 807:libcanard/canard.c **** 
 808:libcanard/canard.c ****     out |= (uint16_t)(sign >> 16U);
 809:libcanard/canard.c **** 
 810:libcanard/canard.c ****     return out;
 811:libcanard/canard.c **** }
 812:libcanard/canard.c **** 
 813:libcanard/canard.c **** float canardConvertFloat16ToNativeFloat(uint16_t value)
 814:libcanard/canard.c **** {
 815:libcanard/canard.c ****     CANARD_ASSERT(sizeof(float) == 4);
 816:libcanard/canard.c **** 
 817:libcanard/canard.c ****     union FP32
 818:libcanard/canard.c ****     {
 819:libcanard/canard.c ****         uint32_t u;
 820:libcanard/canard.c ****         float f;
 821:libcanard/canard.c ****     };
 822:libcanard/canard.c **** 
 823:libcanard/canard.c ****     const union FP32 magic = { (254UL - 15UL) << 23U };
 824:libcanard/canard.c ****     const union FP32 was_inf_nan = { (127UL + 16UL) << 23U };
 825:libcanard/canard.c ****     union FP32 out;
 826:libcanard/canard.c **** 
 827:libcanard/canard.c ****     out.u = (value & 0x7FFFU) << 13U;
 828:libcanard/canard.c ****     out.f *= magic.f;
 829:libcanard/canard.c ****     if (out.f >= was_inf_nan.f)
 830:libcanard/canard.c ****     {
 831:libcanard/canard.c ****         out.u |= 255UL << 23U;
 832:libcanard/canard.c ****     }
ARM GAS  /tmp/ccbnltLA.s 			page 16


 833:libcanard/canard.c ****     out.u |= (value & 0x8000UL) << 16U;
 834:libcanard/canard.c **** 
 835:libcanard/canard.c ****     return out.f;
 836:libcanard/canard.c **** }
 837:libcanard/canard.c **** 
 838:libcanard/canard.c **** /*
 839:libcanard/canard.c ****  * Internal (static functions)
 840:libcanard/canard.c ****  */
 841:libcanard/canard.c **** CANARD_INTERNAL int16_t computeTransferIDForwardDistance(uint8_t a, uint8_t b)
 842:libcanard/canard.c **** {
  25              		.loc 1 842 0
  26              		.cfi_startproc
  27              		@ args = 0, pretend = 0, frame = 0
  28              		@ frame_needed = 0, uses_anonymous_args = 0
  29              		@ link register save eliminated.
  30              	.LVL0:
 843:libcanard/canard.c ****     int16_t d = (int16_t)(b - a);
  31              		.loc 1 843 0
  32 0000 091A     		subs	r1, r1, r0
  33              	.LVL1:
  34 0002 89B2     		uxth	r1, r1
  35 0004 08B2     		sxth	r0, r1
  36              	.LVL2:
 844:libcanard/canard.c ****     if (d < 0)
  37              		.loc 1 844 0
  38 0006 0028     		cmp	r0, #0
  39 0008 00DB     		blt	.L3
  40              	.L2:
 845:libcanard/canard.c ****     {
 846:libcanard/canard.c ****         d = (int16_t)(d + (int16_t)(1U << TRANSFER_ID_BIT_LEN));
 847:libcanard/canard.c ****     }
 848:libcanard/canard.c ****     return d;
 849:libcanard/canard.c **** }
  41              		.loc 1 849 0
  42 000a 7047     		bx	lr
  43              	.L3:
 846:libcanard/canard.c ****     }
  44              		.loc 1 846 0
  45 000c 2031     		adds	r1, r1, #32
  46 000e 08B2     		sxth	r0, r1
  47              	.LVL3:
  48 0010 FBE7     		b	.L2
  49              		.cfi_endproc
  50              	.LFE16:
  52              		.section	.text.isPriorityHigher,"ax",%progbits
  53              		.align	1
  54              		.syntax unified
  55              		.thumb
  56              		.thumb_func
  57              		.fpu softvfp
  59              	isPriorityHigher:
  60              	.LFB21:
 850:libcanard/canard.c **** 
 851:libcanard/canard.c **** CANARD_INTERNAL void incrementTransferID(uint8_t* transfer_id)
 852:libcanard/canard.c **** {
 853:libcanard/canard.c ****     CANARD_ASSERT(transfer_id != NULL);
 854:libcanard/canard.c **** 
ARM GAS  /tmp/ccbnltLA.s 			page 17


 855:libcanard/canard.c ****     (*transfer_id)++;
 856:libcanard/canard.c ****     if (*transfer_id >= 32)
 857:libcanard/canard.c ****     {
 858:libcanard/canard.c ****         *transfer_id = 0;
 859:libcanard/canard.c ****     }
 860:libcanard/canard.c **** }
 861:libcanard/canard.c **** 
 862:libcanard/canard.c **** CANARD_INTERNAL int16_t enqueueTxFrames(CanardInstance* ins,
 863:libcanard/canard.c ****                                         uint32_t can_id,
 864:libcanard/canard.c ****                                         uint8_t* transfer_id,
 865:libcanard/canard.c ****                                         uint16_t crc,
 866:libcanard/canard.c ****                                         const uint8_t* payload,
 867:libcanard/canard.c ****                                         uint16_t payload_len)
 868:libcanard/canard.c **** {
 869:libcanard/canard.c ****     CANARD_ASSERT(ins != NULL);
 870:libcanard/canard.c ****     CANARD_ASSERT((can_id & CANARD_CAN_EXT_ID_MASK) == can_id);            // Flags must be cleared
 871:libcanard/canard.c **** 
 872:libcanard/canard.c ****     if (transfer_id == NULL)
 873:libcanard/canard.c ****     {
 874:libcanard/canard.c ****         return -CANARD_ERROR_INVALID_ARGUMENT;
 875:libcanard/canard.c ****     }
 876:libcanard/canard.c **** 
 877:libcanard/canard.c ****     if ((payload_len > 0) && (payload == NULL))
 878:libcanard/canard.c ****     {
 879:libcanard/canard.c ****         return -CANARD_ERROR_INVALID_ARGUMENT;
 880:libcanard/canard.c ****     }
 881:libcanard/canard.c **** 
 882:libcanard/canard.c ****     int16_t result = 0;
 883:libcanard/canard.c **** 
 884:libcanard/canard.c ****     if (payload_len < CANARD_CAN_FRAME_MAX_DATA_LEN)                        // Single frame transfe
 885:libcanard/canard.c ****     {
 886:libcanard/canard.c ****         CanardTxQueueItem* queue_item = createTxItem(&ins->allocator);
 887:libcanard/canard.c ****         if (queue_item == NULL)
 888:libcanard/canard.c ****         {
 889:libcanard/canard.c ****             return -CANARD_ERROR_OUT_OF_MEMORY;
 890:libcanard/canard.c ****         }
 891:libcanard/canard.c **** 
 892:libcanard/canard.c ****         memcpy(queue_item->frame.data, payload, payload_len);
 893:libcanard/canard.c **** 
 894:libcanard/canard.c ****         queue_item->frame.data_len = (uint8_t)(payload_len + 1);
 895:libcanard/canard.c ****         queue_item->frame.data[payload_len] = (uint8_t)(0xC0U | (*transfer_id & 31U));
 896:libcanard/canard.c ****         queue_item->frame.id = can_id | CANARD_CAN_FRAME_EFF;
 897:libcanard/canard.c **** 
 898:libcanard/canard.c ****         pushTxQueue(ins, queue_item);
 899:libcanard/canard.c ****         result++;
 900:libcanard/canard.c ****     }
 901:libcanard/canard.c ****     else                                                                    // Multi frame transfer
 902:libcanard/canard.c ****     {
 903:libcanard/canard.c ****         uint16_t data_index = 0;
 904:libcanard/canard.c ****         uint8_t toggle = 0;
 905:libcanard/canard.c ****         uint8_t sot_eot = 0x80;
 906:libcanard/canard.c **** 
 907:libcanard/canard.c ****         CanardTxQueueItem* queue_item = NULL;
 908:libcanard/canard.c **** 
 909:libcanard/canard.c ****         while (payload_len - data_index != 0)
 910:libcanard/canard.c ****         {
 911:libcanard/canard.c ****             queue_item = createTxItem(&ins->allocator);
ARM GAS  /tmp/ccbnltLA.s 			page 18


 912:libcanard/canard.c ****             if (queue_item == NULL)
 913:libcanard/canard.c ****             {
 914:libcanard/canard.c ****                 return -CANARD_ERROR_OUT_OF_MEMORY;          // TODO: Purge all frames enqueued so 
 915:libcanard/canard.c ****             }
 916:libcanard/canard.c **** 
 917:libcanard/canard.c ****             uint8_t i = 0;
 918:libcanard/canard.c ****             if (data_index == 0)
 919:libcanard/canard.c ****             {
 920:libcanard/canard.c ****                 // add crc
 921:libcanard/canard.c ****                 queue_item->frame.data[0] = (uint8_t) (crc);
 922:libcanard/canard.c ****                 queue_item->frame.data[1] = (uint8_t) (crc >> 8U);
 923:libcanard/canard.c ****                 i = 2;
 924:libcanard/canard.c ****             }
 925:libcanard/canard.c ****             else
 926:libcanard/canard.c ****             {
 927:libcanard/canard.c ****                 i = 0;
 928:libcanard/canard.c ****             }
 929:libcanard/canard.c **** 
 930:libcanard/canard.c ****             for (; i < (CANARD_CAN_FRAME_MAX_DATA_LEN - 1) && data_index < payload_len; i++, data_i
 931:libcanard/canard.c ****             {
 932:libcanard/canard.c ****                 queue_item->frame.data[i] = payload[data_index];
 933:libcanard/canard.c ****             }
 934:libcanard/canard.c ****             // tail byte
 935:libcanard/canard.c ****             sot_eot = (data_index == payload_len) ? (uint8_t)0x40 : sot_eot;
 936:libcanard/canard.c **** 
 937:libcanard/canard.c ****             queue_item->frame.data[i] = (uint8_t)(sot_eot | ((uint32_t)toggle << 5U) | ((uint32_t)*
 938:libcanard/canard.c ****             queue_item->frame.id = can_id | CANARD_CAN_FRAME_EFF;
 939:libcanard/canard.c ****             queue_item->frame.data_len = (uint8_t)(i + 1);
 940:libcanard/canard.c ****             pushTxQueue(ins, queue_item);
 941:libcanard/canard.c **** 
 942:libcanard/canard.c ****             result++;
 943:libcanard/canard.c ****             toggle ^= 1;
 944:libcanard/canard.c ****             sot_eot = 0;
 945:libcanard/canard.c ****         }
 946:libcanard/canard.c ****     }
 947:libcanard/canard.c **** 
 948:libcanard/canard.c ****     return result;
 949:libcanard/canard.c **** }
 950:libcanard/canard.c **** 
 951:libcanard/canard.c **** /**
 952:libcanard/canard.c ****  * Puts frame on on the TX queue. Higher priority placed first
 953:libcanard/canard.c ****  */
 954:libcanard/canard.c **** CANARD_INTERNAL void pushTxQueue(CanardInstance* ins, CanardTxQueueItem* item)
 955:libcanard/canard.c **** {
 956:libcanard/canard.c ****     CANARD_ASSERT(ins != NULL);
 957:libcanard/canard.c ****     CANARD_ASSERT(item->frame.data_len > 0);       // UAVCAN doesn't allow zero-payload frames
 958:libcanard/canard.c **** 
 959:libcanard/canard.c ****     if (ins->tx_queue == NULL)
 960:libcanard/canard.c ****     {
 961:libcanard/canard.c ****         ins->tx_queue = item;
 962:libcanard/canard.c ****         return;
 963:libcanard/canard.c ****     }
 964:libcanard/canard.c **** 
 965:libcanard/canard.c ****     CanardTxQueueItem* queue = ins->tx_queue;
 966:libcanard/canard.c ****     CanardTxQueueItem* previous = ins->tx_queue;
 967:libcanard/canard.c **** 
 968:libcanard/canard.c ****     while (queue != NULL)
ARM GAS  /tmp/ccbnltLA.s 			page 19


 969:libcanard/canard.c ****     {
 970:libcanard/canard.c ****         if (isPriorityHigher(queue->frame.id, item->frame.id)) // lower number wins
 971:libcanard/canard.c ****         {
 972:libcanard/canard.c ****             if (queue == ins->tx_queue)
 973:libcanard/canard.c ****             {
 974:libcanard/canard.c ****                 item->next = queue;
 975:libcanard/canard.c ****                 ins->tx_queue = item;
 976:libcanard/canard.c ****             }
 977:libcanard/canard.c ****             else
 978:libcanard/canard.c ****             {
 979:libcanard/canard.c ****                 previous->next = item;
 980:libcanard/canard.c ****                 item->next = queue;
 981:libcanard/canard.c ****             }
 982:libcanard/canard.c ****             return;
 983:libcanard/canard.c ****         }
 984:libcanard/canard.c ****         else
 985:libcanard/canard.c ****         {
 986:libcanard/canard.c ****             if (queue->next == NULL)
 987:libcanard/canard.c ****             {
 988:libcanard/canard.c ****                 queue->next = item;
 989:libcanard/canard.c ****                 return;
 990:libcanard/canard.c ****             }
 991:libcanard/canard.c ****             else
 992:libcanard/canard.c ****             {
 993:libcanard/canard.c ****                 previous = queue;
 994:libcanard/canard.c ****                 queue = queue->next;
 995:libcanard/canard.c ****             }
 996:libcanard/canard.c ****         }
 997:libcanard/canard.c ****     }
 998:libcanard/canard.c **** }
 999:libcanard/canard.c **** 
1000:libcanard/canard.c **** /**
1001:libcanard/canard.c ****  * Creates new tx queue item from allocator
1002:libcanard/canard.c ****  */
1003:libcanard/canard.c **** CANARD_INTERNAL CanardTxQueueItem* createTxItem(CanardPoolAllocator* allocator)
1004:libcanard/canard.c **** {
1005:libcanard/canard.c ****     CanardTxQueueItem* item = (CanardTxQueueItem*) allocateBlock(allocator);
1006:libcanard/canard.c ****     if (item == NULL)
1007:libcanard/canard.c ****     {
1008:libcanard/canard.c ****         return NULL;
1009:libcanard/canard.c ****     }
1010:libcanard/canard.c ****     memset(item, 0, sizeof(*item));
1011:libcanard/canard.c ****     return item;
1012:libcanard/canard.c **** }
1013:libcanard/canard.c **** 
1014:libcanard/canard.c **** /**
1015:libcanard/canard.c ****  * Returns true if priority of rhs is higher than id
1016:libcanard/canard.c ****  */
1017:libcanard/canard.c **** CANARD_INTERNAL bool isPriorityHigher(uint32_t rhs, uint32_t id)
1018:libcanard/canard.c **** {
  61              		.loc 1 1018 0
  62              		.cfi_startproc
  63              		@ args = 0, pretend = 0, frame = 0
  64              		@ frame_needed = 0, uses_anonymous_args = 0
  65              		@ link register save eliminated.
  66              	.LVL4:
  67 0000 10B4     		push	{r4}
ARM GAS  /tmp/ccbnltLA.s 			page 20


  68              	.LCFI0:
  69              		.cfi_def_cfa_offset 4
  70              		.cfi_offset 4, -4
1019:libcanard/canard.c ****     const uint32_t clean_id = id & CANARD_CAN_EXT_ID_MASK;
  71              		.loc 1 1019 0
  72 0002 21F06044 		bic	r4, r1, #-536870912
  73              	.LVL5:
1020:libcanard/canard.c ****     const uint32_t rhs_clean_id = rhs & CANARD_CAN_EXT_ID_MASK;
  74              		.loc 1 1020 0
  75 0006 20F06042 		bic	r2, r0, #-536870912
  76              	.LVL6:
1021:libcanard/canard.c **** 
1022:libcanard/canard.c ****     /*
1023:libcanard/canard.c ****      * STD vs EXT - if 11 most significant bits are the same, EXT loses.
1024:libcanard/canard.c ****      */
1025:libcanard/canard.c ****     const bool ext = (id & CANARD_CAN_FRAME_EFF) != 0;
1026:libcanard/canard.c ****     const bool rhs_ext = (rhs & CANARD_CAN_FRAME_EFF) != 0;
  77              		.loc 1 1026 0
  78 000a C30F     		lsrs	r3, r0, #31
  79              	.LVL7:
1027:libcanard/canard.c ****     if (ext != rhs_ext)
  80              		.loc 1 1027 0
  81 000c B3EBD17F 		cmp	r3, r1, lsr #31
  82 0010 0FD0     		beq	.L5
  83              	.LBB2:
1028:libcanard/canard.c ****     {
1029:libcanard/canard.c ****         uint32_t arb11 = ext ? (clean_id >> 18U) : clean_id;
  84              		.loc 1 1029 0
  85 0012 0029     		cmp	r1, #0
  86 0014 09DB     		blt	.L13
  87              	.LVL8:
  88              	.L6:
1030:libcanard/canard.c ****         uint32_t rhs_arb11 = rhs_ext ? (rhs_clean_id >> 18U) : rhs_clean_id;
  89              		.loc 1 1030 0 discriminator 4
  90 0016 0028     		cmp	r0, #0
  91 0018 09DB     		blt	.L14
  92              	.LVL9:
  93              	.L7:
1031:libcanard/canard.c ****         if (arb11 != rhs_arb11)
  94              		.loc 1 1031 0 discriminator 4
  95 001a 9442     		cmp	r4, r2
  96 001c 17D0     		beq	.L10
1032:libcanard/canard.c ****         {
1033:libcanard/canard.c ****             return arb11 < rhs_arb11;
  97              		.loc 1 1033 0
  98 001e 9442     		cmp	r4, r2
  99 0020 2CBF     		ite	cs
 100 0022 0020     		movcs	r0, #0
 101              	.LVL10:
 102 0024 0120     		movcc	r0, #1
 103              	.LVL11:
 104              	.L8:
 105              	.LBE2:
1034:libcanard/canard.c ****         }
1035:libcanard/canard.c ****         else
1036:libcanard/canard.c ****         {
1037:libcanard/canard.c ****             return rhs_ext;
ARM GAS  /tmp/ccbnltLA.s 			page 21


1038:libcanard/canard.c ****         }
1039:libcanard/canard.c ****     }
1040:libcanard/canard.c **** 
1041:libcanard/canard.c ****     /*
1042:libcanard/canard.c ****      * RTR vs Data frame - if frame identifiers and frame types are the same, RTR loses.
1043:libcanard/canard.c ****      */
1044:libcanard/canard.c ****     const bool rtr = (id & CANARD_CAN_FRAME_RTR) != 0;
1045:libcanard/canard.c ****     const bool rhs_rtr = (rhs & CANARD_CAN_FRAME_RTR) != 0;
1046:libcanard/canard.c ****     if (clean_id == rhs_clean_id && rtr != rhs_rtr)
1047:libcanard/canard.c ****     {
1048:libcanard/canard.c ****         return rhs_rtr;
1049:libcanard/canard.c ****     }
1050:libcanard/canard.c **** 
1051:libcanard/canard.c ****     /*
1052:libcanard/canard.c ****      * Plain ID arbitration - greater value loses.
1053:libcanard/canard.c ****      */
1054:libcanard/canard.c ****     return clean_id < rhs_clean_id;
1055:libcanard/canard.c **** }
 106              		.loc 1 1055 0
 107 0026 10BC     		pop	{r4}
 108              	.LCFI1:
 109              		.cfi_remember_state
 110              		.cfi_restore 4
 111              		.cfi_def_cfa_offset 0
 112 0028 7047     		bx	lr
 113              	.LVL12:
 114              	.L13:
 115              	.LCFI2:
 116              		.cfi_restore_state
 117              	.LBB3:
1029:libcanard/canard.c ****         uint32_t rhs_arb11 = rhs_ext ? (rhs_clean_id >> 18U) : rhs_clean_id;
 118              		.loc 1 1029 0 discriminator 1
 119 002a A40C     		lsrs	r4, r4, #18
 120              	.LVL13:
 121 002c F3E7     		b	.L6
 122              	.LVL14:
 123              	.L14:
1030:libcanard/canard.c ****         if (arb11 != rhs_arb11)
 124              		.loc 1 1030 0 discriminator 1
 125 002e 920C     		lsrs	r2, r2, #18
 126              	.LVL15:
 127 0030 F3E7     		b	.L7
 128              	.LVL16:
 129              	.L5:
 130              	.LBE3:
1044:libcanard/canard.c ****     const bool rhs_rtr = (rhs & CANARD_CAN_FRAME_RTR) != 0;
 131              		.loc 1 1044 0
 132 0032 C1F38071 		ubfx	r1, r1, #30, #1
 133              	.LVL17:
1045:libcanard/canard.c ****     if (clean_id == rhs_clean_id && rtr != rhs_rtr)
 134              		.loc 1 1045 0
 135 0036 C0F38070 		ubfx	r0, r0, #30, #1
 136              	.LVL18:
1046:libcanard/canard.c ****     {
 137              		.loc 1 1046 0
 138 003a 9442     		cmp	r4, r2
 139 003c 04D0     		beq	.L15
ARM GAS  /tmp/ccbnltLA.s 			page 22


 140              	.L9:
1054:libcanard/canard.c **** }
 141              		.loc 1 1054 0
 142 003e 9442     		cmp	r4, r2
 143 0040 2CBF     		ite	cs
 144 0042 0020     		movcs	r0, #0
 145              	.LVL19:
 146 0044 0120     		movcc	r0, #1
 147 0046 EEE7     		b	.L8
 148              	.LVL20:
 149              	.L15:
1046:libcanard/canard.c ****     {
 150              		.loc 1 1046 0 discriminator 1
 151 0048 8142     		cmp	r1, r0
 152 004a ECD1     		bne	.L8
 153 004c F7E7     		b	.L9
 154              	.LVL21:
 155              	.L10:
 156              	.LBB4:
1037:libcanard/canard.c ****         }
 157              		.loc 1 1037 0
 158 004e 1846     		mov	r0, r3
 159              	.LVL22:
 160 0050 E9E7     		b	.L8
 161              	.LBE4:
 162              		.cfi_endproc
 163              	.LFE21:
 165              		.section	.text.extractTransferType,"ax",%progbits
 166              		.align	1
 167              		.syntax unified
 168              		.thumb
 169              		.thumb_func
 170              		.fpu softvfp
 172              	extractTransferType:
 173              	.LFB24:
1056:libcanard/canard.c **** 
1057:libcanard/canard.c **** /**
1058:libcanard/canard.c ****  * preps the rx state for the next transfer. does not delete the state
1059:libcanard/canard.c ****  */
1060:libcanard/canard.c **** CANARD_INTERNAL void prepareForNextTransfer(CanardRxState* state)
1061:libcanard/canard.c **** {
1062:libcanard/canard.c ****     CANARD_ASSERT(state->buffer_blocks == NULL);
1063:libcanard/canard.c ****     state->transfer_id++;
1064:libcanard/canard.c ****     state->payload_len = 0;
1065:libcanard/canard.c ****     state->next_toggle = 0;
1066:libcanard/canard.c **** }
1067:libcanard/canard.c **** 
1068:libcanard/canard.c **** /**
1069:libcanard/canard.c ****  * returns data type from id
1070:libcanard/canard.c ****  */
1071:libcanard/canard.c **** CANARD_INTERNAL uint16_t extractDataType(uint32_t id)
1072:libcanard/canard.c **** {
1073:libcanard/canard.c ****     if (extractTransferType(id) == CanardTransferTypeBroadcast)
1074:libcanard/canard.c ****     {
1075:libcanard/canard.c ****         uint16_t dtid = MSG_TYPE_FROM_ID(id);
1076:libcanard/canard.c ****         if (SOURCE_ID_FROM_ID(id) == CANARD_BROADCAST_NODE_ID)
1077:libcanard/canard.c ****         {
ARM GAS  /tmp/ccbnltLA.s 			page 23


1078:libcanard/canard.c ****             dtid &= (1U << ANON_MSG_DATA_TYPE_ID_BIT_LEN) - 1U;
1079:libcanard/canard.c ****         }
1080:libcanard/canard.c ****         return dtid;
1081:libcanard/canard.c ****     }
1082:libcanard/canard.c ****     else
1083:libcanard/canard.c ****     {
1084:libcanard/canard.c ****         return (uint16_t) SRV_TYPE_FROM_ID(id);
1085:libcanard/canard.c ****     }
1086:libcanard/canard.c **** }
1087:libcanard/canard.c **** 
1088:libcanard/canard.c **** /**
1089:libcanard/canard.c ****  * returns transfer type from id
1090:libcanard/canard.c ****  */
1091:libcanard/canard.c **** CANARD_INTERNAL CanardTransferType extractTransferType(uint32_t id)
1092:libcanard/canard.c **** {
 174              		.loc 1 1092 0
 175              		.cfi_startproc
 176              		@ args = 0, pretend = 0, frame = 0
 177              		@ frame_needed = 0, uses_anonymous_args = 0
 178              		@ link register save eliminated.
 179              	.LVL23:
1093:libcanard/canard.c ****     const bool is_service = SERVICE_NOT_MSG_FROM_ID(id);
1094:libcanard/canard.c ****     if (!is_service)
 180              		.loc 1 1094 0
 181 0000 10F0800F 		tst	r0, #128
 182 0004 01D1     		bne	.L20
1095:libcanard/canard.c ****     {
1096:libcanard/canard.c ****         return CanardTransferTypeBroadcast;
 183              		.loc 1 1096 0
 184 0006 0220     		movs	r0, #2
 185              	.LVL24:
 186 0008 7047     		bx	lr
 187              	.LVL25:
 188              	.L20:
1097:libcanard/canard.c ****     }
1098:libcanard/canard.c ****     else if (REQUEST_NOT_RESPONSE_FROM_ID(id) == 1)
 189              		.loc 1 1098 0
 190 000a 10F4004F 		tst	r0, #32768
 191 000e 01D1     		bne	.L21
1099:libcanard/canard.c ****     {
1100:libcanard/canard.c ****         return CanardTransferTypeRequest;
1101:libcanard/canard.c ****     }
1102:libcanard/canard.c ****     else
1103:libcanard/canard.c ****     {
1104:libcanard/canard.c ****         return CanardTransferTypeResponse;
 192              		.loc 1 1104 0
 193 0010 0020     		movs	r0, #0
 194              	.LVL26:
1105:libcanard/canard.c ****     }
1106:libcanard/canard.c **** }
 195              		.loc 1 1106 0
 196 0012 7047     		bx	lr
 197              	.LVL27:
 198              	.L21:
1100:libcanard/canard.c ****     }
 199              		.loc 1 1100 0
 200 0014 0120     		movs	r0, #1
ARM GAS  /tmp/ccbnltLA.s 			page 24


 201              	.LVL28:
 202 0016 7047     		bx	lr
 203              		.cfi_endproc
 204              	.LFE24:
 206              		.section	.text.extractDataType,"ax",%progbits
 207              		.align	1
 208              		.syntax unified
 209              		.thumb
 210              		.thumb_func
 211              		.fpu softvfp
 213              	extractDataType:
 214              	.LFB23:
1072:libcanard/canard.c ****     if (extractTransferType(id) == CanardTransferTypeBroadcast)
 215              		.loc 1 1072 0
 216              		.cfi_startproc
 217              		@ args = 0, pretend = 0, frame = 0
 218              		@ frame_needed = 0, uses_anonymous_args = 0
 219              	.LVL29:
 220 0000 10B5     		push	{r4, lr}
 221              	.LCFI3:
 222              		.cfi_def_cfa_offset 8
 223              		.cfi_offset 4, -8
 224              		.cfi_offset 14, -4
 225 0002 0446     		mov	r4, r0
1073:libcanard/canard.c ****     {
 226              		.loc 1 1073 0
 227 0004 FFF7FEFF 		bl	extractTransferType
 228              	.LVL30:
 229 0008 0228     		cmp	r0, #2
 230 000a 02D0     		beq	.L26
1084:libcanard/canard.c ****     }
 231              		.loc 1 1084 0
 232 000c C4F30740 		ubfx	r0, r4, #16, #8
 233              	.L24:
1086:libcanard/canard.c **** 
 234              		.loc 1 1086 0
 235 0010 10BD     		pop	{r4, pc}
 236              	.LVL31:
 237              	.L26:
 238              	.LBB5:
1075:libcanard/canard.c ****         if (SOURCE_ID_FROM_ID(id) == CANARD_BROADCAST_NODE_ID)
 239              		.loc 1 1075 0
 240 0012 C4F30F20 		ubfx	r0, r4, #8, #16
 241              	.LVL32:
1076:libcanard/canard.c ****         {
 242              		.loc 1 1076 0
 243 0016 14F07F0F 		tst	r4, #127
 244 001a F9D1     		bne	.L24
1078:libcanard/canard.c ****         }
 245              		.loc 1 1078 0
 246 001c 00F00300 		and	r0, r0, #3
 247              	.LVL33:
 248 0020 10BD     		pop	{r4, pc}
 249              	.LBE5:
 250              		.cfi_endproc
 251              	.LFE23:
 253              		.section	.text.findRxState,"ax",%progbits
ARM GAS  /tmp/ccbnltLA.s 			page 25


 254              		.align	1
 255              		.syntax unified
 256              		.thumb
 257              		.thumb_func
 258              		.fpu softvfp
 260              	findRxState:
 261              	.LFB26:
1107:libcanard/canard.c **** 
1108:libcanard/canard.c **** /*
1109:libcanard/canard.c ****  *  CanardRxState functions
1110:libcanard/canard.c ****  */
1111:libcanard/canard.c **** 
1112:libcanard/canard.c **** /**
1113:libcanard/canard.c ****  * Traverses the list of CanardRxState's and returns a pointer to the CanardRxState
1114:libcanard/canard.c ****  * with either the Id or a new one at the end
1115:libcanard/canard.c ****  */
1116:libcanard/canard.c **** CANARD_INTERNAL CanardRxState* traverseRxStates(CanardInstance* ins, uint32_t transfer_descriptor)
1117:libcanard/canard.c **** {
1118:libcanard/canard.c ****     CanardRxState* states = ins->rx_states;
1119:libcanard/canard.c **** 
1120:libcanard/canard.c ****     if (states == NULL) // initialize CanardRxStates
1121:libcanard/canard.c ****     {
1122:libcanard/canard.c ****         states = createRxState(&ins->allocator, transfer_descriptor);
1123:libcanard/canard.c ****         
1124:libcanard/canard.c ****         if(states == NULL)
1125:libcanard/canard.c ****         {
1126:libcanard/canard.c ****             return NULL;
1127:libcanard/canard.c ****         }
1128:libcanard/canard.c **** 
1129:libcanard/canard.c ****         ins->rx_states = states;
1130:libcanard/canard.c ****         return states;
1131:libcanard/canard.c ****     }
1132:libcanard/canard.c **** 
1133:libcanard/canard.c ****     states = findRxState(states, transfer_descriptor);
1134:libcanard/canard.c ****     if (states != NULL)
1135:libcanard/canard.c ****     {
1136:libcanard/canard.c ****         return states;
1137:libcanard/canard.c ****     }
1138:libcanard/canard.c ****     else
1139:libcanard/canard.c ****     {
1140:libcanard/canard.c ****         return prependRxState(ins, transfer_descriptor);
1141:libcanard/canard.c ****     }
1142:libcanard/canard.c **** }
1143:libcanard/canard.c **** 
1144:libcanard/canard.c **** /**
1145:libcanard/canard.c ****  * returns pointer to the rx state of transfer descriptor or null if not found
1146:libcanard/canard.c ****  */
1147:libcanard/canard.c **** CANARD_INTERNAL CanardRxState* findRxState(CanardRxState* state, uint32_t transfer_descriptor)
1148:libcanard/canard.c **** {
 262              		.loc 1 1148 0
 263              		.cfi_startproc
 264              		@ args = 0, pretend = 0, frame = 0
 265              		@ frame_needed = 0, uses_anonymous_args = 0
 266              		@ link register save eliminated.
 267              	.LVL34:
 268              	.L28:
1149:libcanard/canard.c ****     while (state != NULL)
ARM GAS  /tmp/ccbnltLA.s 			page 26


 269              		.loc 1 1149 0
 270 0000 20B1     		cbz	r0, .L29
1150:libcanard/canard.c ****     {
1151:libcanard/canard.c ****         if (state->dtid_tt_snid_dnid == transfer_descriptor)
 271              		.loc 1 1151 0
 272 0002 0369     		ldr	r3, [r0, #16]
 273 0004 8B42     		cmp	r3, r1
 274 0006 01D0     		beq	.L29
1152:libcanard/canard.c ****         {
1153:libcanard/canard.c ****             return state;
1154:libcanard/canard.c ****         }
1155:libcanard/canard.c ****         state = state->next;
 275              		.loc 1 1155 0
 276 0008 0068     		ldr	r0, [r0]
 277              	.LVL35:
 278 000a F9E7     		b	.L28
 279              	.L29:
1156:libcanard/canard.c ****     }
1157:libcanard/canard.c ****     return NULL;
1158:libcanard/canard.c **** }
 280              		.loc 1 1158 0
 281 000c 7047     		bx	lr
 282              		.cfi_endproc
 283              	.LFE26:
 285              		.section	.text.isBigEndian,"ax",%progbits
 286              		.align	1
 287              		.syntax unified
 288              		.thumb
 289              		.thumb_func
 290              		.fpu softvfp
 292              	isBigEndian:
 293              	.LFB34:
1159:libcanard/canard.c **** 
1160:libcanard/canard.c **** /**
1161:libcanard/canard.c ****  * prepends rx state to the canard instance rx_states
1162:libcanard/canard.c ****  */
1163:libcanard/canard.c **** CANARD_INTERNAL CanardRxState* prependRxState(CanardInstance* ins, uint32_t transfer_descriptor)
1164:libcanard/canard.c **** {
1165:libcanard/canard.c ****     CanardRxState* state = createRxState(&ins->allocator, transfer_descriptor);
1166:libcanard/canard.c **** 
1167:libcanard/canard.c ****     if(state == NULL)
1168:libcanard/canard.c ****     {
1169:libcanard/canard.c ****         return NULL;
1170:libcanard/canard.c ****     }
1171:libcanard/canard.c **** 
1172:libcanard/canard.c ****     state->next = ins->rx_states;
1173:libcanard/canard.c ****     ins->rx_states = state;
1174:libcanard/canard.c ****     return state;
1175:libcanard/canard.c **** }
1176:libcanard/canard.c **** 
1177:libcanard/canard.c **** CANARD_INTERNAL CanardRxState* createRxState(CanardPoolAllocator* allocator, uint32_t transfer_desc
1178:libcanard/canard.c **** {
1179:libcanard/canard.c ****     CanardRxState init = {
1180:libcanard/canard.c ****         .next = NULL,
1181:libcanard/canard.c ****         .buffer_blocks = NULL,
1182:libcanard/canard.c ****         .dtid_tt_snid_dnid = transfer_descriptor
1183:libcanard/canard.c ****     };
ARM GAS  /tmp/ccbnltLA.s 			page 27


1184:libcanard/canard.c **** 
1185:libcanard/canard.c ****     CanardRxState* state = (CanardRxState*) allocateBlock(allocator);
1186:libcanard/canard.c ****     if (state == NULL)
1187:libcanard/canard.c ****     {
1188:libcanard/canard.c ****         return NULL;
1189:libcanard/canard.c ****     }
1190:libcanard/canard.c ****     memcpy(state, &init, sizeof(*state));
1191:libcanard/canard.c **** 
1192:libcanard/canard.c ****     return state;
1193:libcanard/canard.c **** }
1194:libcanard/canard.c **** 
1195:libcanard/canard.c **** CANARD_INTERNAL uint64_t releaseStatePayload(CanardInstance* ins, CanardRxState* rxstate)
1196:libcanard/canard.c **** {
1197:libcanard/canard.c ****     while (rxstate->buffer_blocks != NULL)
1198:libcanard/canard.c ****     {
1199:libcanard/canard.c ****         CanardBufferBlock* const temp = rxstate->buffer_blocks->next;
1200:libcanard/canard.c ****         freeBlock(&ins->allocator, rxstate->buffer_blocks);
1201:libcanard/canard.c ****         rxstate->buffer_blocks = temp;
1202:libcanard/canard.c ****     }
1203:libcanard/canard.c ****     rxstate->payload_len = 0;
1204:libcanard/canard.c ****     return CANARD_OK;
1205:libcanard/canard.c **** }
1206:libcanard/canard.c **** 
1207:libcanard/canard.c **** /*
1208:libcanard/canard.c ****  *  CanardBufferBlock functions
1209:libcanard/canard.c ****  */
1210:libcanard/canard.c **** 
1211:libcanard/canard.c **** /**
1212:libcanard/canard.c ****  * pushes data into the rx state. Fills the buffer head, then appends data to buffer blocks
1213:libcanard/canard.c ****  */
1214:libcanard/canard.c **** CANARD_INTERNAL int16_t bufferBlockPushBytes(CanardPoolAllocator* allocator,
1215:libcanard/canard.c ****                                              CanardRxState* state,
1216:libcanard/canard.c ****                                              const uint8_t* data,
1217:libcanard/canard.c ****                                              uint8_t data_len)
1218:libcanard/canard.c **** {
1219:libcanard/canard.c ****     uint16_t data_index = 0;
1220:libcanard/canard.c **** 
1221:libcanard/canard.c ****     // if head is not full, add data to head
1222:libcanard/canard.c ****     if ((CANARD_MULTIFRAME_RX_PAYLOAD_HEAD_SIZE - state->payload_len) > 0)
1223:libcanard/canard.c ****     {
1224:libcanard/canard.c ****         for (uint16_t i = (uint16_t)state->payload_len;
1225:libcanard/canard.c ****              i < CANARD_MULTIFRAME_RX_PAYLOAD_HEAD_SIZE && data_index < data_len;
1226:libcanard/canard.c ****              i++, data_index++)
1227:libcanard/canard.c ****         {
1228:libcanard/canard.c ****             state->buffer_head[i] = data[data_index];
1229:libcanard/canard.c ****         }
1230:libcanard/canard.c ****         if (data_index >= data_len)
1231:libcanard/canard.c ****         {
1232:libcanard/canard.c ****             state->payload_len =
1233:libcanard/canard.c ****                 (uint16_t)(state->payload_len + data_len) & ((1U << CANARD_TRANSFER_PAYLOAD_LEN_BIT
1234:libcanard/canard.c ****             return 1;
1235:libcanard/canard.c ****         }
1236:libcanard/canard.c ****     } // head is full.
1237:libcanard/canard.c **** 
1238:libcanard/canard.c ****     uint16_t index_at_nth_block =
1239:libcanard/canard.c ****         (uint16_t)(((state->payload_len) - CANARD_MULTIFRAME_RX_PAYLOAD_HEAD_SIZE) % CANARD_BUFFER_
1240:libcanard/canard.c **** 
ARM GAS  /tmp/ccbnltLA.s 			page 28


1241:libcanard/canard.c ****     // get to current block
1242:libcanard/canard.c ****     CanardBufferBlock* block = NULL;
1243:libcanard/canard.c **** 
1244:libcanard/canard.c ****     // buffer blocks uninitialized
1245:libcanard/canard.c ****     if (state->buffer_blocks == NULL)
1246:libcanard/canard.c ****     {
1247:libcanard/canard.c ****         state->buffer_blocks = createBufferBlock(allocator);
1248:libcanard/canard.c **** 
1249:libcanard/canard.c ****         if (state->buffer_blocks == NULL)
1250:libcanard/canard.c ****         {
1251:libcanard/canard.c ****             return -CANARD_ERROR_OUT_OF_MEMORY;
1252:libcanard/canard.c ****         }
1253:libcanard/canard.c **** 
1254:libcanard/canard.c ****         block = state->buffer_blocks;
1255:libcanard/canard.c ****         index_at_nth_block = 0;
1256:libcanard/canard.c ****     }
1257:libcanard/canard.c ****     else
1258:libcanard/canard.c ****     {
1259:libcanard/canard.c ****         uint16_t nth_block = 1;
1260:libcanard/canard.c **** 
1261:libcanard/canard.c ****         // get to block
1262:libcanard/canard.c ****         block = state->buffer_blocks;
1263:libcanard/canard.c ****         while (block->next != NULL)
1264:libcanard/canard.c ****         {
1265:libcanard/canard.c ****             nth_block++;
1266:libcanard/canard.c ****             block = block->next;
1267:libcanard/canard.c ****         }
1268:libcanard/canard.c **** 
1269:libcanard/canard.c ****         const uint16_t num_buffer_blocks =
1270:libcanard/canard.c ****             (uint16_t) (((((uint32_t)state->payload_len + data_len) - CANARD_MULTIFRAME_RX_PAYLOAD_
1271:libcanard/canard.c ****                          CANARD_BUFFER_BLOCK_DATA_SIZE) + 1U);
1272:libcanard/canard.c **** 
1273:libcanard/canard.c ****         if (num_buffer_blocks > nth_block && index_at_nth_block == 0)
1274:libcanard/canard.c ****         {
1275:libcanard/canard.c ****             block->next = createBufferBlock(allocator);
1276:libcanard/canard.c ****             if (block->next == NULL)
1277:libcanard/canard.c ****             {
1278:libcanard/canard.c ****                 return -CANARD_ERROR_OUT_OF_MEMORY;
1279:libcanard/canard.c ****             }
1280:libcanard/canard.c ****             block = block->next;
1281:libcanard/canard.c ****         }
1282:libcanard/canard.c ****     }
1283:libcanard/canard.c **** 
1284:libcanard/canard.c ****     // add data to current block until it becomes full, add new block if necessary
1285:libcanard/canard.c ****     while (data_index < data_len)
1286:libcanard/canard.c ****     {
1287:libcanard/canard.c ****         for (uint16_t i = index_at_nth_block;
1288:libcanard/canard.c ****              i < CANARD_BUFFER_BLOCK_DATA_SIZE && data_index < data_len;
1289:libcanard/canard.c ****              i++, data_index++)
1290:libcanard/canard.c ****         {
1291:libcanard/canard.c ****             block->data[i] = data[data_index];
1292:libcanard/canard.c ****         }
1293:libcanard/canard.c **** 
1294:libcanard/canard.c ****         if (data_index < data_len)
1295:libcanard/canard.c ****         {
1296:libcanard/canard.c ****             block->next = createBufferBlock(allocator);
1297:libcanard/canard.c ****             if (block->next == NULL)
ARM GAS  /tmp/ccbnltLA.s 			page 29


1298:libcanard/canard.c ****             {
1299:libcanard/canard.c ****                 return -CANARD_ERROR_OUT_OF_MEMORY;
1300:libcanard/canard.c ****             }
1301:libcanard/canard.c ****             block = block->next;
1302:libcanard/canard.c ****             index_at_nth_block = 0;
1303:libcanard/canard.c ****         }
1304:libcanard/canard.c ****     }
1305:libcanard/canard.c **** 
1306:libcanard/canard.c ****     state->payload_len = (uint16_t)(state->payload_len + data_len) & ((1U << CANARD_TRANSFER_PAYLOA
1307:libcanard/canard.c **** 
1308:libcanard/canard.c ****     return 1;
1309:libcanard/canard.c **** }
1310:libcanard/canard.c **** 
1311:libcanard/canard.c **** CANARD_INTERNAL CanardBufferBlock* createBufferBlock(CanardPoolAllocator* allocator)
1312:libcanard/canard.c **** {
1313:libcanard/canard.c ****     CanardBufferBlock* block = (CanardBufferBlock*) allocateBlock(allocator);
1314:libcanard/canard.c ****     if (block == NULL)
1315:libcanard/canard.c ****     {
1316:libcanard/canard.c ****         return NULL;
1317:libcanard/canard.c ****     }
1318:libcanard/canard.c ****     block->next = NULL;
1319:libcanard/canard.c ****     return block;
1320:libcanard/canard.c **** }
1321:libcanard/canard.c **** 
1322:libcanard/canard.c **** /**
1323:libcanard/canard.c ****  * Bit array copy routine, originally developed by Ben Dyer for Libuavcan. Thanks Ben.
1324:libcanard/canard.c ****  */
1325:libcanard/canard.c **** void copyBitArray(const uint8_t* src, uint32_t src_offset, uint32_t src_len,
1326:libcanard/canard.c ****                         uint8_t* dst, uint32_t dst_offset)
1327:libcanard/canard.c **** {
1328:libcanard/canard.c ****     CANARD_ASSERT(src_len > 0U);
1329:libcanard/canard.c **** 
1330:libcanard/canard.c ****     // Normalizing inputs
1331:libcanard/canard.c ****     src += src_offset / 8U;
1332:libcanard/canard.c ****     dst += dst_offset / 8U;
1333:libcanard/canard.c **** 
1334:libcanard/canard.c ****     src_offset %= 8U;
1335:libcanard/canard.c ****     dst_offset %= 8U;
1336:libcanard/canard.c **** 
1337:libcanard/canard.c ****     const size_t last_bit = src_offset + src_len;
1338:libcanard/canard.c ****     while (last_bit - src_offset)
1339:libcanard/canard.c ****     {
1340:libcanard/canard.c ****         const uint8_t src_bit_offset = (uint8_t)(src_offset % 8U);
1341:libcanard/canard.c ****         const uint8_t dst_bit_offset = (uint8_t)(dst_offset % 8U);
1342:libcanard/canard.c **** 
1343:libcanard/canard.c ****         const uint8_t max_offset = MAX(src_bit_offset, dst_bit_offset);
1344:libcanard/canard.c ****         const uint32_t copy_bits = MIN(last_bit - src_offset, 8U - max_offset);
1345:libcanard/canard.c **** 
1346:libcanard/canard.c ****         const uint8_t write_mask = (uint8_t)((uint8_t)(0xFF00U >> copy_bits) >> dst_bit_offset);
1347:libcanard/canard.c ****         const uint8_t src_data = (uint8_t)(((uint32_t)src[src_offset / 8U] << src_bit_offset) >> ds
1348:libcanard/canard.c **** 
1349:libcanard/canard.c ****         dst[dst_offset / 8U] =
1350:libcanard/canard.c ****             (uint8_t)(((uint32_t)dst[dst_offset / 8U] & (uint32_t)~write_mask) | (uint32_t)(src_dat
1351:libcanard/canard.c **** 
1352:libcanard/canard.c ****         src_offset += copy_bits;
1353:libcanard/canard.c ****         dst_offset += copy_bits;
1354:libcanard/canard.c ****     }
ARM GAS  /tmp/ccbnltLA.s 			page 30


1355:libcanard/canard.c **** }
1356:libcanard/canard.c **** 
1357:libcanard/canard.c **** CANARD_INTERNAL int16_t descatterTransferPayload(const CanardRxTransfer* transfer,
1358:libcanard/canard.c ****                                                  uint32_t bit_offset,
1359:libcanard/canard.c ****                                                  uint8_t bit_length,
1360:libcanard/canard.c ****                                                  void* output)
1361:libcanard/canard.c **** {
1362:libcanard/canard.c ****     CANARD_ASSERT(transfer != 0);
1363:libcanard/canard.c **** 
1364:libcanard/canard.c ****     if (bit_offset >= transfer->payload_len * 8)
1365:libcanard/canard.c ****     {
1366:libcanard/canard.c ****         return 0;       // Out of range, reading zero bits
1367:libcanard/canard.c ****     }
1368:libcanard/canard.c **** 
1369:libcanard/canard.c ****     if (bit_offset + bit_length > transfer->payload_len * 8)
1370:libcanard/canard.c ****     {
1371:libcanard/canard.c ****         bit_length = (uint8_t)(transfer->payload_len * 8U - bit_offset);
1372:libcanard/canard.c ****     }
1373:libcanard/canard.c **** 
1374:libcanard/canard.c ****     CANARD_ASSERT(bit_length > 0);
1375:libcanard/canard.c **** 
1376:libcanard/canard.c ****     if ((transfer->payload_middle != NULL) || (transfer->payload_tail != NULL)) // Multi frame
1377:libcanard/canard.c ****     {
1378:libcanard/canard.c ****         /*
1379:libcanard/canard.c ****          * This part is hideously complicated and probably should be redesigned.
1380:libcanard/canard.c ****          * The objective here is to copy the requested number of bits from scattered storage into t
1381:libcanard/canard.c ****          * local storage. We go through great pains to ensure that all corner cases are handled cor
1382:libcanard/canard.c ****          */
1383:libcanard/canard.c ****         uint32_t input_bit_offset = bit_offset;
1384:libcanard/canard.c ****         uint8_t output_bit_offset = 0;
1385:libcanard/canard.c ****         uint8_t remaining_bit_length = bit_length;
1386:libcanard/canard.c **** 
1387:libcanard/canard.c ****         // Reading head
1388:libcanard/canard.c ****         if (input_bit_offset < CANARD_MULTIFRAME_RX_PAYLOAD_HEAD_SIZE * 8)
1389:libcanard/canard.c ****         {
1390:libcanard/canard.c ****             const uint8_t amount = (uint8_t)MIN(remaining_bit_length,
1391:libcanard/canard.c ****                                                 CANARD_MULTIFRAME_RX_PAYLOAD_HEAD_SIZE * 8U - input
1392:libcanard/canard.c **** 
1393:libcanard/canard.c ****             copyBitArray(&transfer->payload_head[0], input_bit_offset, amount, (uint8_t*) output, 0
1394:libcanard/canard.c **** 
1395:libcanard/canard.c ****             input_bit_offset += amount;
1396:libcanard/canard.c ****             output_bit_offset = (uint8_t)(output_bit_offset + amount);
1397:libcanard/canard.c ****             remaining_bit_length = (uint8_t)(remaining_bit_length - amount);
1398:libcanard/canard.c ****         }
1399:libcanard/canard.c **** 
1400:libcanard/canard.c ****         // Reading middle
1401:libcanard/canard.c ****         uint32_t remaining_bits = transfer->payload_len * 8U - CANARD_MULTIFRAME_RX_PAYLOAD_HEAD_SI
1402:libcanard/canard.c ****         uint32_t block_bit_offset = CANARD_MULTIFRAME_RX_PAYLOAD_HEAD_SIZE * 8U;
1403:libcanard/canard.c ****         const CanardBufferBlock* block = transfer->payload_middle;
1404:libcanard/canard.c **** 
1405:libcanard/canard.c ****         while ((block != NULL) && (remaining_bit_length > 0))
1406:libcanard/canard.c ****         {
1407:libcanard/canard.c ****             CANARD_ASSERT(remaining_bits > 0);
1408:libcanard/canard.c ****             const uint32_t block_end_bit_offset = block_bit_offset + MIN(CANARD_BUFFER_BLOCK_DATA_S
1409:libcanard/canard.c ****                                                                          remaining_bits);
1410:libcanard/canard.c **** 
1411:libcanard/canard.c ****             // Perform copy if we've reached the requested offset, otherwise jump over this block a
ARM GAS  /tmp/ccbnltLA.s 			page 31


1412:libcanard/canard.c ****             if (block_end_bit_offset > input_bit_offset)
1413:libcanard/canard.c ****             {
1414:libcanard/canard.c ****                 const uint8_t amount = (uint8_t) MIN(remaining_bit_length, block_end_bit_offset - i
1415:libcanard/canard.c **** 
1416:libcanard/canard.c ****                 CANARD_ASSERT(input_bit_offset >= block_bit_offset);
1417:libcanard/canard.c ****                 const uint32_t bit_offset_within_block = input_bit_offset - block_bit_offset;
1418:libcanard/canard.c **** 
1419:libcanard/canard.c ****                 copyBitArray(&block->data[0], bit_offset_within_block, amount, (uint8_t*) output, o
1420:libcanard/canard.c **** 
1421:libcanard/canard.c ****                 input_bit_offset += amount;
1422:libcanard/canard.c ****                 output_bit_offset = (uint8_t)(output_bit_offset + amount);
1423:libcanard/canard.c ****                 remaining_bit_length = (uint8_t)(remaining_bit_length - amount);
1424:libcanard/canard.c ****             }
1425:libcanard/canard.c **** 
1426:libcanard/canard.c ****             CANARD_ASSERT(block_end_bit_offset > block_bit_offset);
1427:libcanard/canard.c ****             remaining_bits -= block_end_bit_offset - block_bit_offset;
1428:libcanard/canard.c ****             block_bit_offset = block_end_bit_offset;
1429:libcanard/canard.c ****             block = block->next;
1430:libcanard/canard.c ****         }
1431:libcanard/canard.c **** 
1432:libcanard/canard.c ****         CANARD_ASSERT(remaining_bit_length <= remaining_bits);
1433:libcanard/canard.c **** 
1434:libcanard/canard.c ****         // Reading tail
1435:libcanard/canard.c ****         if ((transfer->payload_tail != NULL) && (remaining_bit_length > 0))
1436:libcanard/canard.c ****         {
1437:libcanard/canard.c ****             CANARD_ASSERT(input_bit_offset >= block_bit_offset);
1438:libcanard/canard.c ****             const uint32_t offset = input_bit_offset - block_bit_offset;
1439:libcanard/canard.c **** 
1440:libcanard/canard.c ****             copyBitArray(&transfer->payload_tail[0], offset, remaining_bit_length, (uint8_t*) outpu
1441:libcanard/canard.c ****                          output_bit_offset);
1442:libcanard/canard.c **** 
1443:libcanard/canard.c ****             input_bit_offset += remaining_bit_length;
1444:libcanard/canard.c ****             output_bit_offset = (uint8_t)(output_bit_offset + remaining_bit_length);
1445:libcanard/canard.c ****             remaining_bit_length = 0;
1446:libcanard/canard.c ****         }
1447:libcanard/canard.c **** 
1448:libcanard/canard.c ****         CANARD_ASSERT(input_bit_offset <= transfer->payload_len * 8);
1449:libcanard/canard.c ****         CANARD_ASSERT(output_bit_offset <= 64);
1450:libcanard/canard.c ****         CANARD_ASSERT(remaining_bit_length == 0);
1451:libcanard/canard.c ****     }
1452:libcanard/canard.c ****     else                                                                    // Single frame
1453:libcanard/canard.c ****     {
1454:libcanard/canard.c ****         copyBitArray(&transfer->payload_head[0], bit_offset, bit_length, (uint8_t*) output, 0);
1455:libcanard/canard.c ****     }
1456:libcanard/canard.c **** 
1457:libcanard/canard.c ****     return bit_length;
1458:libcanard/canard.c **** }
1459:libcanard/canard.c **** 
1460:libcanard/canard.c **** CANARD_INTERNAL bool isBigEndian(void)
1461:libcanard/canard.c **** {
 294              		.loc 1 1461 0
 295              		.cfi_startproc
 296              		@ args = 0, pretend = 0, frame = 0
 297              		@ frame_needed = 0, uses_anonymous_args = 0
 298              		@ link register save eliminated.
1462:libcanard/canard.c **** #if defined(BYTE_ORDER) && defined(BIG_ENDIAN)
1463:libcanard/canard.c ****     return BYTE_ORDER == BIG_ENDIAN;                // Some compilers offer this neat shortcut
ARM GAS  /tmp/ccbnltLA.s 			page 32


1464:libcanard/canard.c **** #else
1465:libcanard/canard.c ****     union
1466:libcanard/canard.c ****     {
1467:libcanard/canard.c ****         uint16_t a;
1468:libcanard/canard.c ****         uint8_t b[2];
1469:libcanard/canard.c ****     } u;
1470:libcanard/canard.c ****     u.a = 1;
1471:libcanard/canard.c ****     return u.b[1] == 1;                             // Some don't...
1472:libcanard/canard.c **** #endif
1473:libcanard/canard.c **** }
 299              		.loc 1 1473 0
 300 0000 0020     		movs	r0, #0
 301 0002 7047     		bx	lr
 302              		.cfi_endproc
 303              	.LFE34:
 305              		.section	.text.crcAddByte,"ax",%progbits
 306              		.align	1
 307              		.syntax unified
 308              		.thumb
 309              		.thumb_func
 310              		.fpu softvfp
 312              	crcAddByte:
 313              	.LFB36:
1474:libcanard/canard.c **** 
1475:libcanard/canard.c **** CANARD_INTERNAL void swapByteOrder(void* data, size_t size)
1476:libcanard/canard.c **** {
1477:libcanard/canard.c ****     CANARD_ASSERT(data != NULL);
1478:libcanard/canard.c **** 
1479:libcanard/canard.c ****     uint8_t* const bytes = (uint8_t*) data;
1480:libcanard/canard.c **** 
1481:libcanard/canard.c ****     size_t fwd = 0;
1482:libcanard/canard.c ****     size_t rev = size - 1;
1483:libcanard/canard.c **** 
1484:libcanard/canard.c ****     while (fwd < rev)
1485:libcanard/canard.c ****     {
1486:libcanard/canard.c ****         const uint8_t x = bytes[fwd];
1487:libcanard/canard.c ****         bytes[fwd] = bytes[rev];
1488:libcanard/canard.c ****         bytes[rev] = x;
1489:libcanard/canard.c ****         fwd++;
1490:libcanard/canard.c ****         rev--;
1491:libcanard/canard.c ****     }
1492:libcanard/canard.c **** }
1493:libcanard/canard.c **** 
1494:libcanard/canard.c **** /*
1495:libcanard/canard.c ****  * CRC functions
1496:libcanard/canard.c ****  */
1497:libcanard/canard.c **** CANARD_INTERNAL uint16_t crcAddByte(uint16_t crc_val, uint8_t byte)
1498:libcanard/canard.c **** {
 314              		.loc 1 1498 0
 315              		.cfi_startproc
 316              		@ args = 0, pretend = 0, frame = 0
 317              		@ frame_needed = 0, uses_anonymous_args = 0
 318              		@ link register save eliminated.
 319              	.LVL36:
1499:libcanard/canard.c ****     crc_val ^= (uint16_t) ((uint16_t) (byte) << 8U);
 320              		.loc 1 1499 0
 321 0000 80EA0120 		eor	r0, r0, r1, lsl #8
ARM GAS  /tmp/ccbnltLA.s 			page 33


 322              	.LVL37:
 323              	.LBB6:
1500:libcanard/canard.c ****     for (uint8_t j = 0; j < 8; j++)
 324              		.loc 1 1500 0
 325 0004 0023     		movs	r3, #0
 326 0006 07E0     		b	.L33
 327              	.LVL38:
 328              	.L38:
1501:libcanard/canard.c ****     {
1502:libcanard/canard.c ****         if (crc_val & 0x8000U)
1503:libcanard/canard.c ****         {
1504:libcanard/canard.c ****             crc_val = (uint16_t) ((uint16_t) (crc_val << 1U) ^ 0x1021U);
 329              		.loc 1 1504 0
 330 0008 4000     		lsls	r0, r0, #1
 331              	.LVL39:
 332 000a 80B2     		uxth	r0, r0
 333 000c 80F48150 		eor	r0, r0, #4128
 334 0010 80F00100 		eor	r0, r0, #1
 335              	.LVL40:
 336              	.L35:
1500:libcanard/canard.c ****     for (uint8_t j = 0; j < 8; j++)
 337              		.loc 1 1500 0 discriminator 2
 338 0014 0133     		adds	r3, r3, #1
 339              	.LVL41:
 340 0016 DBB2     		uxtb	r3, r3
 341              	.LVL42:
 342              	.L33:
1500:libcanard/canard.c ****     for (uint8_t j = 0; j < 8; j++)
 343              		.loc 1 1500 0 is_stmt 0 discriminator 1
 344 0018 072B     		cmp	r3, #7
 345 001a 05D8     		bhi	.L37
1502:libcanard/canard.c ****         {
 346              		.loc 1 1502 0 is_stmt 1
 347 001c 10F4004F 		tst	r0, #32768
 348 0020 F2D1     		bne	.L38
1505:libcanard/canard.c ****         }
1506:libcanard/canard.c ****         else
1507:libcanard/canard.c ****         {
1508:libcanard/canard.c ****             crc_val = (uint16_t) (crc_val << 1U);
 349              		.loc 1 1508 0
 350 0022 4000     		lsls	r0, r0, #1
 351              	.LVL43:
 352 0024 80B2     		uxth	r0, r0
 353              	.LVL44:
 354 0026 F5E7     		b	.L35
 355              	.L37:
 356              	.LBE6:
1509:libcanard/canard.c ****         }
1510:libcanard/canard.c ****     }
1511:libcanard/canard.c ****     return crc_val;
1512:libcanard/canard.c **** }
 357              		.loc 1 1512 0
 358 0028 7047     		bx	lr
 359              		.cfi_endproc
 360              	.LFE36:
 362              		.section	.text.crcAddSignature,"ax",%progbits
 363              		.align	1
ARM GAS  /tmp/ccbnltLA.s 			page 34


 364              		.syntax unified
 365              		.thumb
 366              		.thumb_func
 367              		.fpu softvfp
 369              	crcAddSignature:
 370              	.LFB37:
1513:libcanard/canard.c **** 
1514:libcanard/canard.c **** CANARD_INTERNAL uint16_t crcAddSignature(uint16_t crc_val, uint64_t data_type_signature)
1515:libcanard/canard.c **** {
 371              		.loc 1 1515 0
 372              		.cfi_startproc
 373              		@ args = 0, pretend = 0, frame = 0
 374              		@ frame_needed = 0, uses_anonymous_args = 0
 375              	.LVL45:
 376 0000 70B5     		push	{r4, r5, r6, lr}
 377              	.LCFI4:
 378              		.cfi_def_cfa_offset 16
 379              		.cfi_offset 4, -16
 380              		.cfi_offset 5, -12
 381              		.cfi_offset 6, -8
 382              		.cfi_offset 14, -4
 383 0002 1646     		mov	r6, r2
 384 0004 1D46     		mov	r5, r3
 385              	.LVL46:
 386              	.LBB7:
1516:libcanard/canard.c ****     for (uint16_t shift_val = 0; shift_val < 64; shift_val = (uint16_t)(shift_val + 8U))
 387              		.loc 1 1516 0
 388 0006 0024     		movs	r4, #0
 389 0008 10E0     		b	.L40
 390              	.LVL47:
 391              	.L41:
1517:libcanard/canard.c ****     {
1518:libcanard/canard.c ****         crc_val = crcAddByte(crc_val, (uint8_t) (data_type_signature >> shift_val));
 392              		.loc 1 1518 0 discriminator 3
 393 000a C4F12002 		rsb	r2, r4, #32
 394 000e A4F12003 		sub	r3, r4, #32
 395 0012 26FA04F1 		lsr	r1, r6, r4
 396 0016 05FA02F2 		lsl	r2, r5, r2
 397 001a 1143     		orrs	r1, r1, r2
 398 001c 25FA03F3 		lsr	r3, r5, r3
 399 0020 1943     		orrs	r1, r1, r3
 400 0022 C9B2     		uxtb	r1, r1
 401 0024 FFF7FEFF 		bl	crcAddByte
 402              	.LVL48:
1516:libcanard/canard.c ****     for (uint16_t shift_val = 0; shift_val < 64; shift_val = (uint16_t)(shift_val + 8U))
 403              		.loc 1 1516 0 discriminator 3
 404 0028 0834     		adds	r4, r4, #8
 405              	.LVL49:
 406 002a A4B2     		uxth	r4, r4
 407              	.LVL50:
 408              	.L40:
1516:libcanard/canard.c ****     for (uint16_t shift_val = 0; shift_val < 64; shift_val = (uint16_t)(shift_val + 8U))
 409              		.loc 1 1516 0 is_stmt 0 discriminator 1
 410 002c 3F2C     		cmp	r4, #63
 411 002e ECD9     		bls	.L41
 412              	.LBE7:
1519:libcanard/canard.c ****     }
ARM GAS  /tmp/ccbnltLA.s 			page 35


1520:libcanard/canard.c ****     return crc_val;
1521:libcanard/canard.c **** }
 413              		.loc 1 1521 0 is_stmt 1
 414 0030 70BD     		pop	{r4, r5, r6, pc}
 415              		.cfi_endproc
 416              	.LFE37:
 418              		.section	.text.crcAdd,"ax",%progbits
 419              		.align	1
 420              		.syntax unified
 421              		.thumb
 422              		.thumb_func
 423              		.fpu softvfp
 425              	crcAdd:
 426              	.LFB38:
1522:libcanard/canard.c **** 
1523:libcanard/canard.c **** CANARD_INTERNAL uint16_t crcAdd(uint16_t crc_val, const uint8_t* bytes, size_t len)
1524:libcanard/canard.c **** {
 427              		.loc 1 1524 0
 428              		.cfi_startproc
 429              		@ args = 0, pretend = 0, frame = 0
 430              		@ frame_needed = 0, uses_anonymous_args = 0
 431              	.LVL51:
 432 0000 38B5     		push	{r3, r4, r5, lr}
 433              	.LCFI5:
 434              		.cfi_def_cfa_offset 16
 435              		.cfi_offset 3, -16
 436              		.cfi_offset 4, -12
 437              		.cfi_offset 5, -8
 438              		.cfi_offset 14, -4
1525:libcanard/canard.c ****     while (len--)
 439              		.loc 1 1525 0
 440 0002 05E0     		b	.L44
 441              	.LVL52:
 442              	.L45:
1526:libcanard/canard.c ****     {
1527:libcanard/canard.c ****         crc_val = crcAddByte(crc_val, *bytes++);
 443              		.loc 1 1527 0
 444 0004 4D1C     		adds	r5, r1, #1
 445              	.LVL53:
 446 0006 0978     		ldrb	r1, [r1]	@ zero_extendqisi2
 447 0008 FFF7FEFF 		bl	crcAddByte
 448              	.LVL54:
1525:libcanard/canard.c ****     while (len--)
 449              		.loc 1 1525 0
 450 000c 2246     		mov	r2, r4
 451              		.loc 1 1527 0
 452 000e 2946     		mov	r1, r5
 453              	.LVL55:
 454              	.L44:
1525:libcanard/canard.c ****     while (len--)
 455              		.loc 1 1525 0
 456 0010 541E     		subs	r4, r2, #1
 457              	.LVL56:
 458 0012 002A     		cmp	r2, #0
 459 0014 F6D1     		bne	.L45
1528:libcanard/canard.c ****     }
1529:libcanard/canard.c ****     return crc_val;
ARM GAS  /tmp/ccbnltLA.s 			page 36


1530:libcanard/canard.c **** }
 460              		.loc 1 1530 0
 461 0016 38BD     		pop	{r3, r4, r5, pc}
 462              		.cfi_endproc
 463              	.LFE38:
 465              		.section	.text.initPoolAllocator,"ax",%progbits
 466              		.align	1
 467              		.syntax unified
 468              		.thumb
 469              		.thumb_func
 470              		.fpu softvfp
 472              	initPoolAllocator:
 473              	.LFB39:
1531:libcanard/canard.c **** 
1532:libcanard/canard.c **** /*
1533:libcanard/canard.c ****  *  Pool Allocator functions
1534:libcanard/canard.c ****  */
1535:libcanard/canard.c **** CANARD_INTERNAL void initPoolAllocator(CanardPoolAllocator* allocator,
1536:libcanard/canard.c ****                                        CanardPoolAllocatorBlock* buf,
1537:libcanard/canard.c ****                                        uint16_t buf_len)
1538:libcanard/canard.c **** {
 474              		.loc 1 1538 0
 475              		.cfi_startproc
 476              		@ args = 0, pretend = 0, frame = 0
 477              		@ frame_needed = 0, uses_anonymous_args = 0
 478              		@ link register save eliminated.
 479              	.LVL57:
 480 0000 30B4     		push	{r4, r5}
 481              	.LCFI6:
 482              		.cfi_def_cfa_offset 8
 483              		.cfi_offset 4, -8
 484              		.cfi_offset 5, -4
 485              	.LVL58:
1539:libcanard/canard.c ****     size_t current_index = 0;
1540:libcanard/canard.c ****     CanardPoolAllocatorBlock** current_block = &(allocator->free_list);
 486              		.loc 1 1540 0
 487 0002 0546     		mov	r5, r0
 488              	.LVL59:
1539:libcanard/canard.c ****     size_t current_index = 0;
 489              		.loc 1 1539 0
 490 0004 0023     		movs	r3, #0
1541:libcanard/canard.c ****     while (current_index < buf_len)
 491              		.loc 1 1541 0
 492 0006 04E0     		b	.L48
 493              	.LVL60:
 494              	.L49:
1542:libcanard/canard.c ****     {
1543:libcanard/canard.c ****         *current_block = &buf[current_index];
 495              		.loc 1 1543 0
 496 0008 01EB4314 		add	r4, r1, r3, lsl #5
 497 000c 2C60     		str	r4, [r5]
1544:libcanard/canard.c ****         current_block = &((*current_block)->next);
 498              		.loc 1 1544 0
 499 000e 2546     		mov	r5, r4
 500              	.LVL61:
1545:libcanard/canard.c ****         current_index++;
 501              		.loc 1 1545 0
ARM GAS  /tmp/ccbnltLA.s 			page 37


 502 0010 0133     		adds	r3, r3, #1
 503              	.LVL62:
 504              	.L48:
1541:libcanard/canard.c ****     {
 505              		.loc 1 1541 0
 506 0012 9342     		cmp	r3, r2
 507 0014 F8D3     		bcc	.L49
1546:libcanard/canard.c ****     }
1547:libcanard/canard.c ****     *current_block = NULL;
 508              		.loc 1 1547 0
 509 0016 0023     		movs	r3, #0
 510              	.LVL63:
 511 0018 2B60     		str	r3, [r5]
1548:libcanard/canard.c **** 
1549:libcanard/canard.c ****     allocator->statistics.capacity_blocks = buf_len;
 512              		.loc 1 1549 0
 513 001a 8280     		strh	r2, [r0, #4]	@ movhi
1550:libcanard/canard.c ****     allocator->statistics.current_usage_blocks = 0;
 514              		.loc 1 1550 0
 515 001c C380     		strh	r3, [r0, #6]	@ movhi
1551:libcanard/canard.c ****     allocator->statistics.peak_usage_blocks = 0;
 516              		.loc 1 1551 0
 517 001e 0381     		strh	r3, [r0, #8]	@ movhi
1552:libcanard/canard.c **** }
 518              		.loc 1 1552 0
 519 0020 30BC     		pop	{r4, r5}
 520              	.LCFI7:
 521              		.cfi_restore 5
 522              		.cfi_restore 4
 523              		.cfi_def_cfa_offset 0
 524              	.LVL64:
 525 0022 7047     		bx	lr
 526              		.cfi_endproc
 527              	.LFE39:
 529              		.section	.text.allocateBlock,"ax",%progbits
 530              		.align	1
 531              		.syntax unified
 532              		.thumb
 533              		.thumb_func
 534              		.fpu softvfp
 536              	allocateBlock:
 537              	.LFB40:
1553:libcanard/canard.c **** 
1554:libcanard/canard.c **** CANARD_INTERNAL void* allocateBlock(CanardPoolAllocator* allocator)
1555:libcanard/canard.c **** {
 538              		.loc 1 1555 0
 539              		.cfi_startproc
 540              		@ args = 0, pretend = 0, frame = 0
 541              		@ frame_needed = 0, uses_anonymous_args = 0
 542              		@ link register save eliminated.
 543              	.LVL65:
1556:libcanard/canard.c ****     // Check if there are any blocks available in the free list.
1557:libcanard/canard.c ****     if (allocator->free_list == NULL)
 544              		.loc 1 1557 0
 545 0000 0268     		ldr	r2, [r0]
 546 0002 5AB1     		cbz	r2, .L53
 547              	.LVL66:
ARM GAS  /tmp/ccbnltLA.s 			page 38


1558:libcanard/canard.c ****     {
1559:libcanard/canard.c ****         return NULL;
1560:libcanard/canard.c ****     }
1561:libcanard/canard.c **** 
1562:libcanard/canard.c ****     // Take first available block and prepares next block for use.
1563:libcanard/canard.c ****     void* result = allocator->free_list;
1564:libcanard/canard.c ****     allocator->free_list = allocator->free_list->next;
 548              		.loc 1 1564 0
 549 0004 1368     		ldr	r3, [r2]
 550 0006 0360     		str	r3, [r0]
1565:libcanard/canard.c **** 
1566:libcanard/canard.c ****     // Update statistics
1567:libcanard/canard.c ****     allocator->statistics.current_usage_blocks++;
 551              		.loc 1 1567 0
 552 0008 C388     		ldrh	r3, [r0, #6]
 553 000a 0133     		adds	r3, r3, #1
 554 000c 9BB2     		uxth	r3, r3
 555 000e C380     		strh	r3, [r0, #6]	@ movhi
1568:libcanard/canard.c ****     if (allocator->statistics.peak_usage_blocks < allocator->statistics.current_usage_blocks)
 556              		.loc 1 1568 0
 557 0010 0189     		ldrh	r1, [r0, #8]
 558 0012 8B42     		cmp	r3, r1
 559 0014 04D9     		bls	.L54
1569:libcanard/canard.c ****     {
1570:libcanard/canard.c ****         allocator->statistics.peak_usage_blocks = allocator->statistics.current_usage_blocks;
 560              		.loc 1 1570 0
 561 0016 0381     		strh	r3, [r0, #8]	@ movhi
1571:libcanard/canard.c ****     }
1572:libcanard/canard.c **** 
1573:libcanard/canard.c ****     return result;
 562              		.loc 1 1573 0
 563 0018 1046     		mov	r0, r2
 564              	.LVL67:
 565 001a 7047     		bx	lr
 566              	.LVL68:
 567              	.L53:
1559:libcanard/canard.c ****     }
 568              		.loc 1 1559 0
 569 001c 0020     		movs	r0, #0
 570              	.LVL69:
 571 001e 7047     		bx	lr
 572              	.LVL70:
 573              	.L54:
 574              		.loc 1 1573 0
 575 0020 1046     		mov	r0, r2
 576              	.LVL71:
1574:libcanard/canard.c **** }
 577              		.loc 1 1574 0
 578 0022 7047     		bx	lr
 579              		.cfi_endproc
 580              	.LFE40:
 582              		.section	.text.createBufferBlock,"ax",%progbits
 583              		.align	1
 584              		.syntax unified
 585              		.thumb
 586              		.thumb_func
 587              		.fpu softvfp
ARM GAS  /tmp/ccbnltLA.s 			page 39


 589              	createBufferBlock:
 590              	.LFB31:
1312:libcanard/canard.c ****     CanardBufferBlock* block = (CanardBufferBlock*) allocateBlock(allocator);
 591              		.loc 1 1312 0
 592              		.cfi_startproc
 593              		@ args = 0, pretend = 0, frame = 0
 594              		@ frame_needed = 0, uses_anonymous_args = 0
 595              	.LVL72:
 596 0000 08B5     		push	{r3, lr}
 597              	.LCFI8:
 598              		.cfi_def_cfa_offset 8
 599              		.cfi_offset 3, -8
 600              		.cfi_offset 14, -4
1313:libcanard/canard.c ****     if (block == NULL)
 601              		.loc 1 1313 0
 602 0002 FFF7FEFF 		bl	allocateBlock
 603              	.LVL73:
1314:libcanard/canard.c ****     {
 604              		.loc 1 1314 0
 605 0006 0346     		mov	r3, r0
 606 0008 08B1     		cbz	r0, .L55
1318:libcanard/canard.c ****     return block;
 607              		.loc 1 1318 0
 608 000a 0022     		movs	r2, #0
 609 000c 0260     		str	r2, [r0]
 610              	.L55:
1320:libcanard/canard.c **** 
 611              		.loc 1 1320 0
 612 000e 1846     		mov	r0, r3
 613              	.LVL74:
 614 0010 08BD     		pop	{r3, pc}
 615              		.cfi_endproc
 616              	.LFE31:
 618              		.section	.text.bufferBlockPushBytes,"ax",%progbits
 619              		.align	1
 620              		.syntax unified
 621              		.thumb
 622              		.thumb_func
 623              		.fpu softvfp
 625              	bufferBlockPushBytes:
 626              	.LFB30:
1218:libcanard/canard.c ****     uint16_t data_index = 0;
 627              		.loc 1 1218 0
 628              		.cfi_startproc
 629              		@ args = 0, pretend = 0, frame = 0
 630              		@ frame_needed = 0, uses_anonymous_args = 0
 631              	.LVL75:
 632 0000 2DE9F84F 		push	{r3, r4, r5, r6, r7, r8, r9, r10, fp, lr}
 633              	.LCFI9:
 634              		.cfi_def_cfa_offset 40
 635              		.cfi_offset 3, -40
 636              		.cfi_offset 4, -36
 637              		.cfi_offset 5, -32
 638              		.cfi_offset 6, -28
 639              		.cfi_offset 7, -24
 640              		.cfi_offset 8, -20
 641              		.cfi_offset 9, -16
ARM GAS  /tmp/ccbnltLA.s 			page 40


 642              		.cfi_offset 10, -12
 643              		.cfi_offset 11, -8
 644              		.cfi_offset 14, -4
 645              	.LVL76:
1222:libcanard/canard.c ****     {
 646              		.loc 1 1222 0
 647 0004 CC8A     		ldrh	r4, [r1, #22]
 648 0006 C4F30904 		ubfx	r4, r4, #0, #10
 649 000a 062C     		cmp	r4, #6
 650 000c 1CD0     		beq	.L72
 651              	.LBB8:
1224:libcanard/canard.c ****              i < CANARD_MULTIFRAME_RX_PAYLOAD_HEAD_SIZE && data_index < data_len;
 652              		.loc 1 1224 0
 653 000e 2546     		mov	r5, r4
 654              	.LVL77:
 655 0010 2646     		mov	r6, r4
 656              	.LBE8:
1219:libcanard/canard.c **** 
 657              		.loc 1 1219 0
 658 0012 0024     		movs	r4, #0
 659              	.LVL78:
 660              	.L60:
 661              	.LBB9:
1224:libcanard/canard.c ****              i < CANARD_MULTIFRAME_RX_PAYLOAD_HEAD_SIZE && data_index < data_len;
 662              		.loc 1 1224 0 discriminator 1
 663 0014 052E     		cmp	r6, #5
 664 0016 02D8     		bhi	.L61
1225:libcanard/canard.c ****              i++, data_index++)
 665              		.loc 1 1225 0
 666 0018 9FB2     		uxth	r7, r3
 667 001a BC42     		cmp	r4, r7
 668 001c 0AD3     		bcc	.L62
 669              	.L61:
 670              	.LBE9:
1230:libcanard/canard.c ****         {
 671              		.loc 1 1230 0
 672 001e 9EB2     		uxth	r6, r3
 673              	.LVL79:
 674 0020 B442     		cmp	r4, r6
 675 0022 12D3     		bcc	.L59
1233:libcanard/canard.c ****             return 1;
 676              		.loc 1 1233 0
 677 0024 3544     		add	r5, r5, r6
1232:libcanard/canard.c ****                 (uint16_t)(state->payload_len + data_len) & ((1U << CANARD_TRANSFER_PAYLOAD_LEN_BIT
 678              		.loc 1 1232 0
 679 0026 CB8A     		ldrh	r3, [r1, #22]
 680              	.LVL80:
 681 0028 65F30903 		bfi	r3, r5, #0, #10
 682 002c CB82     		strh	r3, [r1, #22]	@ movhi
1234:libcanard/canard.c ****         }
 683              		.loc 1 1234 0
 684 002e 0120     		movs	r0, #1
 685              	.LVL81:
 686 0030 BDE8F88F 		pop	{r3, r4, r5, r6, r7, r8, r9, r10, fp, pc}
 687              	.LVL82:
 688              	.L62:
 689              	.LBB10:
ARM GAS  /tmp/ccbnltLA.s 			page 41


1228:libcanard/canard.c ****         }
 690              		.loc 1 1228 0
 691 0034 12F804E0 		ldrb	lr, [r2, r4]	@ zero_extendqisi2
 692 0038 8F19     		adds	r7, r1, r6
 693 003a 87F81AE0 		strb	lr, [r7, #26]
1226:libcanard/canard.c ****         {
 694              		.loc 1 1226 0
 695 003e 0136     		adds	r6, r6, #1
 696              	.LVL83:
 697 0040 B6B2     		uxth	r6, r6
 698              	.LVL84:
 699 0042 0134     		adds	r4, r4, #1
 700              	.LVL85:
 701 0044 A4B2     		uxth	r4, r4
 702              	.LVL86:
 703 0046 E5E7     		b	.L60
 704              	.LVL87:
 705              	.L72:
 706              	.LBE10:
1219:libcanard/canard.c **** 
 707              		.loc 1 1219 0
 708 0048 0024     		movs	r4, #0
 709              	.LVL88:
 710              	.L59:
 711 004a 9946     		mov	r9, r3
 712 004c 9346     		mov	fp, r2
 713 004e 0E46     		mov	r6, r1
 714 0050 8246     		mov	r10, r0
 715              	.LVL89:
1239:libcanard/canard.c **** 
 716              		.loc 1 1239 0
 717 0052 CD8A     		ldrh	r5, [r1, #22]
 718 0054 C5F30905 		ubfx	r5, r5, #0, #10
 719 0058 AA1F     		subs	r2, r5, #6
 720              	.LVL90:
 721 005a 1C23     		movs	r3, #28
 722              	.LVL91:
 723 005c B2FBF3F8 		udiv	r8, r2, r3
 724 0060 03FB1828 		mls	r8, r3, r8, r2
1238:libcanard/canard.c ****         (uint16_t)(((state->payload_len) - CANARD_MULTIFRAME_RX_PAYLOAD_HEAD_SIZE) % CANARD_BUFFER_
 725              		.loc 1 1238 0
 726 0064 1FFA88F8 		uxth	r8, r8
 727              	.LVL92:
1245:libcanard/canard.c ****     {
 728              		.loc 1 1245 0
 729 0068 4F68     		ldr	r7, [r1, #4]
 730 006a 87BB     		cbnz	r7, .L73
1247:libcanard/canard.c **** 
 731              		.loc 1 1247 0
 732 006c FFF7FEFF 		bl	createBufferBlock
 733              	.LVL93:
 734 0070 0746     		mov	r7, r0
 735 0072 7060     		str	r0, [r6, #4]
1249:libcanard/canard.c ****         {
 736              		.loc 1 1249 0
 737 0074 0028     		cmp	r0, #0
 738 0076 47D0     		beq	.L74
ARM GAS  /tmp/ccbnltLA.s 			page 42


1255:libcanard/canard.c ****     }
 739              		.loc 1 1255 0
 740 0078 4FF00008 		mov	r8, #0
 741              	.LVL94:
 742              	.L65:
1285:libcanard/canard.c ****     {
 743              		.loc 1 1285 0
 744 007c 1FFA89F1 		uxth	r1, r9
 745 0080 8C42     		cmp	r4, r1
 746 0082 3DD3     		bcc	.L78
1306:libcanard/canard.c **** 
 747              		.loc 1 1306 0
 748 0084 F28A     		ldrh	r2, [r6, #22]
 749 0086 C2F30903 		ubfx	r3, r2, #0, #10
 750 008a 0B44     		add	r3, r3, r1
 751 008c 63F30902 		bfi	r2, r3, #0, #10
 752 0090 F282     		strh	r2, [r6, #22]	@ movhi
1308:libcanard/canard.c **** }
 753              		.loc 1 1308 0
 754 0092 0120     		movs	r0, #1
 755 0094 BDE8F88F 		pop	{r3, r4, r5, r6, r7, r8, r9, r10, fp, pc}
 756              	.LVL95:
 757              	.L66:
 758              	.LBB11:
1265:libcanard/canard.c ****             block = block->next;
 759              		.loc 1 1265 0
 760 0098 0132     		adds	r2, r2, #1
 761              	.LVL96:
 762 009a 92B2     		uxth	r2, r2
 763              	.LVL97:
1266:libcanard/canard.c ****         }
 764              		.loc 1 1266 0
 765 009c 1F46     		mov	r7, r3
 766              	.LVL98:
 767              	.L64:
1263:libcanard/canard.c ****         {
 768              		.loc 1 1263 0
 769 009e 3B68     		ldr	r3, [r7]
 770 00a0 002B     		cmp	r3, #0
 771 00a2 F9D1     		bne	.L66
1270:libcanard/canard.c ****                          CANARD_BUFFER_BLOCK_DATA_SIZE) + 1U);
 772              		.loc 1 1270 0
 773 00a4 09EB0503 		add	r3, r9, r5
 774 00a8 063B     		subs	r3, r3, #6
 775 00aa 1C25     		movs	r5, #28
 776 00ac B3FBF5F3 		udiv	r3, r3, r5
 777 00b0 9BB2     		uxth	r3, r3
1269:libcanard/canard.c ****             (uint16_t) (((((uint32_t)state->payload_len + data_len) - CANARD_MULTIFRAME_RX_PAYLOAD_
 778              		.loc 1 1269 0
 779 00b2 0133     		adds	r3, r3, #1
 780 00b4 9BB2     		uxth	r3, r3
 781              	.LVL99:
1273:libcanard/canard.c ****         {
 782              		.loc 1 1273 0
 783 00b6 9A42     		cmp	r2, r3
 784 00b8 E0D2     		bcs	.L65
1273:libcanard/canard.c ****         {
ARM GAS  /tmp/ccbnltLA.s 			page 43


 785              		.loc 1 1273 0 is_stmt 0 discriminator 1
 786 00ba B8F1000F 		cmp	r8, #0
 787 00be DDD1     		bne	.L65
1275:libcanard/canard.c ****             if (block->next == NULL)
 788              		.loc 1 1275 0 is_stmt 1
 789 00c0 5046     		mov	r0, r10
 790              	.LVL100:
 791 00c2 FFF7FEFF 		bl	createBufferBlock
 792              	.LVL101:
 793 00c6 3860     		str	r0, [r7]
1276:libcanard/canard.c ****             {
 794              		.loc 1 1276 0
 795 00c8 10B3     		cbz	r0, .L75
1280:libcanard/canard.c ****         }
 796              		.loc 1 1280 0
 797 00ca 0746     		mov	r7, r0
 798              	.LVL102:
 799 00cc D6E7     		b	.L65
 800              	.LVL103:
 801              	.L73:
 802              	.LBE11:
 803 00ce 0122     		movs	r2, #1
 804 00d0 E5E7     		b	.L64
 805              	.LVL104:
 806              	.L69:
 807              	.LBB12:
1291:libcanard/canard.c ****         }
 808              		.loc 1 1291 0
 809 00d2 1BF80400 		ldrb	r0, [fp, r4]	@ zero_extendqisi2
 810 00d6 BB18     		adds	r3, r7, r2
 811 00d8 1871     		strb	r0, [r3, #4]
1289:libcanard/canard.c ****         {
 812              		.loc 1 1289 0
 813 00da 0132     		adds	r2, r2, #1
 814              	.LVL105:
 815 00dc 92B2     		uxth	r2, r2
 816              	.LVL106:
 817 00de 0134     		adds	r4, r4, #1
 818              	.LVL107:
 819 00e0 A4B2     		uxth	r4, r4
 820              	.LVL108:
 821              	.L71:
1287:libcanard/canard.c ****              i < CANARD_BUFFER_BLOCK_DATA_SIZE && data_index < data_len;
 822              		.loc 1 1287 0 discriminator 1
 823 00e2 1B2A     		cmp	r2, #27
 824 00e4 01D8     		bhi	.L68
1288:libcanard/canard.c ****              i++, data_index++)
 825              		.loc 1 1288 0
 826 00e6 8C42     		cmp	r4, r1
 827 00e8 F3D3     		bcc	.L69
 828              	.L68:
 829              	.LBE12:
1294:libcanard/canard.c ****         {
 830              		.loc 1 1294 0
 831 00ea 8C42     		cmp	r4, r1
 832 00ec 0AD2     		bcs	.L76
1296:libcanard/canard.c ****             if (block->next == NULL)
ARM GAS  /tmp/ccbnltLA.s 			page 44


 833              		.loc 1 1296 0
 834 00ee 5046     		mov	r0, r10
 835 00f0 FFF7FEFF 		bl	createBufferBlock
 836              	.LVL109:
 837 00f4 3860     		str	r0, [r7]
1297:libcanard/canard.c ****             {
 838              		.loc 1 1297 0
 839 00f6 78B1     		cbz	r0, .L77
1302:libcanard/canard.c ****         }
 840              		.loc 1 1302 0
 841 00f8 4FF00008 		mov	r8, #0
 842              	.LVL110:
 843              	.L70:
 844 00fc 0746     		mov	r7, r0
 845              	.LVL111:
 846 00fe BDE7     		b	.L65
 847              	.LVL112:
 848              	.L78:
 849 0100 4246     		mov	r2, r8
 850 0102 EEE7     		b	.L71
 851              	.LVL113:
 852              	.L76:
 853 0104 3846     		mov	r0, r7
 854 0106 F9E7     		b	.L70
 855              	.LVL114:
 856              	.L74:
1251:libcanard/canard.c ****         }
 857              		.loc 1 1251 0
 858 0108 6FF00200 		mvn	r0, #2
 859 010c BDE8F88F 		pop	{r3, r4, r5, r6, r7, r8, r9, r10, fp, pc}
 860              	.LVL115:
 861              	.L75:
 862              	.LBB13:
1278:libcanard/canard.c ****             }
 863              		.loc 1 1278 0
 864 0110 6FF00200 		mvn	r0, #2
 865 0114 BDE8F88F 		pop	{r3, r4, r5, r6, r7, r8, r9, r10, fp, pc}
 866              	.LVL116:
 867              	.L77:
 868              	.LBE13:
1299:libcanard/canard.c ****             }
 869              		.loc 1 1299 0
 870 0118 6FF00200 		mvn	r0, #2
1309:libcanard/canard.c **** 
 871              		.loc 1 1309 0
 872 011c BDE8F88F 		pop	{r3, r4, r5, r6, r7, r8, r9, r10, fp, pc}
 873              		.cfi_endproc
 874              	.LFE30:
 876              		.section	.text.pushTxQueue,"ax",%progbits
 877              		.align	1
 878              		.syntax unified
 879              		.thumb
 880              		.thumb_func
 881              		.fpu softvfp
 883              	pushTxQueue:
 884              	.LFB19:
 955:libcanard/canard.c ****     CANARD_ASSERT(ins != NULL);
ARM GAS  /tmp/ccbnltLA.s 			page 45


 885              		.loc 1 955 0
 886              		.cfi_startproc
 887              		@ args = 0, pretend = 0, frame = 0
 888              		@ frame_needed = 0, uses_anonymous_args = 0
 889              	.LVL117:
 890 0000 2DE9F041 		push	{r4, r5, r6, r7, r8, lr}
 891              	.LCFI10:
 892              		.cfi_def_cfa_offset 24
 893              		.cfi_offset 4, -24
 894              		.cfi_offset 5, -20
 895              		.cfi_offset 6, -16
 896              		.cfi_offset 7, -12
 897              		.cfi_offset 8, -8
 898              		.cfi_offset 14, -4
 956:libcanard/canard.c ****     CANARD_ASSERT(item->frame.data_len > 0);       // UAVCAN doesn't allow zero-payload frames
 899              		.loc 1 956 0
 900 0004 90B1     		cbz	r0, .L91
 901 0006 0D46     		mov	r5, r1
 902 0008 8046     		mov	r8, r0
 957:libcanard/canard.c **** 
 903              		.loc 1 957 0
 904 000a 0B7C     		ldrb	r3, [r1, #16]	@ zero_extendqisi2
 905 000c ABB1     		cbz	r3, .L92
 959:libcanard/canard.c ****     {
 906              		.loc 1 959 0
 907 000e C769     		ldr	r7, [r0, #28]
 908 0010 D7B1     		cbz	r7, .L93
 909 0012 3E46     		mov	r6, r7
 910 0014 3C46     		mov	r4, r7
 911              	.LVL118:
 912              	.L83:
 968:libcanard/canard.c ****     {
 913              		.loc 1 968 0
 914 0016 4CB3     		cbz	r4, .L94
 970:libcanard/canard.c ****         {
 915              		.loc 1 970 0
 916 0018 6968     		ldr	r1, [r5, #4]
 917 001a 6068     		ldr	r0, [r4, #4]
 918 001c FFF7FEFF 		bl	isPriorityHigher
 919              	.LVL119:
 920 0020 B0B9     		cbnz	r0, .L95
 986:libcanard/canard.c ****             {
 921              		.loc 1 986 0
 922 0022 2368     		ldr	r3, [r4]
 993:libcanard/canard.c ****                 queue = queue->next;
 923              		.loc 1 993 0
 924 0024 2646     		mov	r6, r4
 925              	.LVL120:
 986:libcanard/canard.c ****             {
 926              		.loc 1 986 0
 927 0026 F3B1     		cbz	r3, .L96
 994:libcanard/canard.c ****             }
 928              		.loc 1 994 0
 929 0028 1C46     		mov	r4, r3
 930              	.LVL121:
 931 002a F4E7     		b	.L83
 932              	.LVL122:
ARM GAS  /tmp/ccbnltLA.s 			page 46


 933              	.L91:
 956:libcanard/canard.c ****     CANARD_ASSERT(item->frame.data_len > 0);       // UAVCAN doesn't allow zero-payload frames
 934              		.loc 1 956 0 discriminator 1
 935 002c 104B     		ldr	r3, .L98
 936 002e 114A     		ldr	r2, .L98+4
 937 0030 4FF46F71 		mov	r1, #956
 938              	.LVL123:
 939 0034 1048     		ldr	r0, .L98+8
 940              	.LVL124:
 941 0036 FFF7FEFF 		bl	__assert_func
 942              	.LVL125:
 943              	.L92:
 957:libcanard/canard.c **** 
 944              		.loc 1 957 0 discriminator 1
 945 003a 104B     		ldr	r3, .L98+12
 946 003c 0D4A     		ldr	r2, .L98+4
 947 003e 40F2BD31 		movw	r1, #957
 948              	.LVL126:
 949 0042 0D48     		ldr	r0, .L98+8
 950              	.LVL127:
 951 0044 FFF7FEFF 		bl	__assert_func
 952              	.LVL128:
 953              	.L93:
 961:libcanard/canard.c ****         return;
 954              		.loc 1 961 0
 955 0048 C8F81C10 		str	r1, [r8, #28]
 962:libcanard/canard.c ****     }
 956              		.loc 1 962 0
 957 004c BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 958              	.LVL129:
 959              	.L95:
 972:libcanard/canard.c ****             {
 960              		.loc 1 972 0
 961 0050 BC42     		cmp	r4, r7
 962 0052 03D0     		beq	.L97
 979:libcanard/canard.c ****                 item->next = queue;
 963              		.loc 1 979 0
 964 0054 3560     		str	r5, [r6]
 980:libcanard/canard.c ****             }
 965              		.loc 1 980 0
 966 0056 2C60     		str	r4, [r5]
 967 0058 BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 968              	.LVL130:
 969              	.L97:
 974:libcanard/canard.c ****                 ins->tx_queue = item;
 970              		.loc 1 974 0
 971 005c 2C60     		str	r4, [r5]
 975:libcanard/canard.c ****             }
 972              		.loc 1 975 0
 973 005e C8F81C50 		str	r5, [r8, #28]
 974 0062 BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 975              	.LVL131:
 976              	.L96:
 988:libcanard/canard.c ****                 return;
 977              		.loc 1 988 0
 978 0066 2560     		str	r5, [r4]
 989:libcanard/canard.c ****             }
ARM GAS  /tmp/ccbnltLA.s 			page 47


 979              		.loc 1 989 0
 980 0068 BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 981              	.LVL132:
 982              	.L94:
 983 006c BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 984              	.LVL133:
 985              	.L99:
 986              		.align	2
 987              	.L98:
 988 0070 00000000 		.word	.LC0
 989 0074 00000000 		.word	.LANCHOR0
 990 0078 14000000 		.word	.LC1
 991 007c 28000000 		.word	.LC2
 992              		.cfi_endproc
 993              	.LFE19:
 995              		.section	.text.incrementTransferID,"ax",%progbits
 996              		.align	1
 997              		.syntax unified
 998              		.thumb
 999              		.thumb_func
 1000              		.fpu softvfp
 1002              	incrementTransferID:
 1003              	.LFB17:
 852:libcanard/canard.c ****     CANARD_ASSERT(transfer_id != NULL);
 1004              		.loc 1 852 0
 1005              		.cfi_startproc
 1006              		@ args = 0, pretend = 0, frame = 0
 1007              		@ frame_needed = 0, uses_anonymous_args = 0
 1008              	.LVL134:
 1009 0000 08B5     		push	{r3, lr}
 1010              	.LCFI11:
 1011              		.cfi_def_cfa_offset 8
 1012              		.cfi_offset 3, -8
 1013              		.cfi_offset 14, -4
 853:libcanard/canard.c **** 
 1014              		.loc 1 853 0
 1015 0002 40B1     		cbz	r0, .L104
 855:libcanard/canard.c ****     if (*transfer_id >= 32)
 1016              		.loc 1 855 0
 1017 0004 0378     		ldrb	r3, [r0]	@ zero_extendqisi2
 1018 0006 0133     		adds	r3, r3, #1
 1019 0008 DBB2     		uxtb	r3, r3
 1020 000a 0370     		strb	r3, [r0]
 856:libcanard/canard.c ****     {
 1021              		.loc 1 856 0
 1022 000c 1F2B     		cmp	r3, #31
 1023 000e 01D9     		bls	.L100
 858:libcanard/canard.c ****     }
 1024              		.loc 1 858 0
 1025 0010 0023     		movs	r3, #0
 1026 0012 0370     		strb	r3, [r0]
 1027              	.L100:
 1028 0014 08BD     		pop	{r3, pc}
 1029              	.L104:
 853:libcanard/canard.c **** 
 1030              		.loc 1 853 0 discriminator 1
 1031 0016 034B     		ldr	r3, .L105
ARM GAS  /tmp/ccbnltLA.s 			page 48


 1032 0018 034A     		ldr	r2, .L105+4
 1033 001a 40F25531 		movw	r1, #853
 1034 001e 0348     		ldr	r0, .L105+8
 1035              	.LVL135:
 1036 0020 FFF7FEFF 		bl	__assert_func
 1037              	.LVL136:
 1038              	.L106:
 1039              		.align	2
 1040              	.L105:
 1041 0024 00000000 		.word	.LC3
 1042 0028 00000000 		.word	.LANCHOR1
 1043 002c 14000000 		.word	.LC1
 1044              		.cfi_endproc
 1045              	.LFE17:
 1047              		.section	.text.freeBlock,"ax",%progbits
 1048              		.align	1
 1049              		.syntax unified
 1050              		.thumb
 1051              		.thumb_func
 1052              		.fpu softvfp
 1054              	freeBlock:
 1055              	.LFB41:
1575:libcanard/canard.c **** 
1576:libcanard/canard.c **** CANARD_INTERNAL void freeBlock(CanardPoolAllocator* allocator, void* p)
1577:libcanard/canard.c **** {
 1056              		.loc 1 1577 0
 1057              		.cfi_startproc
 1058              		@ args = 0, pretend = 0, frame = 0
 1059              		@ frame_needed = 0, uses_anonymous_args = 0
 1060              	.LVL137:
 1061 0000 08B5     		push	{r3, lr}
 1062              	.LCFI12:
 1063              		.cfi_def_cfa_offset 8
 1064              		.cfi_offset 3, -8
 1065              		.cfi_offset 14, -4
 1066              	.LVL138:
1578:libcanard/canard.c ****     CanardPoolAllocatorBlock* block = (CanardPoolAllocatorBlock*) p;
1579:libcanard/canard.c **** 
1580:libcanard/canard.c ****     block->next = allocator->free_list;
 1067              		.loc 1 1580 0
 1068 0002 0368     		ldr	r3, [r0]
 1069 0004 0B60     		str	r3, [r1]
1581:libcanard/canard.c ****     allocator->free_list = block;
 1070              		.loc 1 1581 0
 1071 0006 0160     		str	r1, [r0]
1582:libcanard/canard.c **** 
1583:libcanard/canard.c ****     CANARD_ASSERT(allocator->statistics.current_usage_blocks > 0);
 1072              		.loc 1 1583 0
 1073 0008 C388     		ldrh	r3, [r0, #6]
 1074 000a 13B1     		cbz	r3, .L110
1584:libcanard/canard.c ****     allocator->statistics.current_usage_blocks--;
 1075              		.loc 1 1584 0
 1076 000c 013B     		subs	r3, r3, #1
 1077 000e C380     		strh	r3, [r0, #6]	@ movhi
 1078 0010 08BD     		pop	{r3, pc}
 1079              	.L110:
1583:libcanard/canard.c ****     allocator->statistics.current_usage_blocks--;
ARM GAS  /tmp/ccbnltLA.s 			page 49


 1080              		.loc 1 1583 0 discriminator 1
 1081 0012 034B     		ldr	r3, .L111
 1082 0014 034A     		ldr	r2, .L111+4
 1083 0016 40F22F61 		movw	r1, #1583
 1084              	.LVL139:
 1085 001a 0348     		ldr	r0, .L111+8
 1086              	.LVL140:
 1087 001c FFF7FEFF 		bl	__assert_func
 1088              	.LVL141:
 1089              	.L112:
 1090              		.align	2
 1091              	.L111:
 1092 0020 00000000 		.word	.LC4
 1093 0024 00000000 		.word	.LANCHOR2
 1094 0028 14000000 		.word	.LC1
 1095              		.cfi_endproc
 1096              	.LFE41:
 1098              		.section	.text.releaseStatePayload,"ax",%progbits
 1099              		.align	1
 1100              		.syntax unified
 1101              		.thumb
 1102              		.thumb_func
 1103              		.fpu softvfp
 1105              	releaseStatePayload:
 1106              	.LFB29:
1196:libcanard/canard.c ****     while (rxstate->buffer_blocks != NULL)
 1107              		.loc 1 1196 0
 1108              		.cfi_startproc
 1109              		@ args = 0, pretend = 0, frame = 0
 1110              		@ frame_needed = 0, uses_anonymous_args = 0
 1111              	.LVL142:
 1112 0000 70B5     		push	{r4, r5, r6, lr}
 1113              	.LCFI13:
 1114              		.cfi_def_cfa_offset 16
 1115              		.cfi_offset 4, -16
 1116              		.cfi_offset 5, -12
 1117              		.cfi_offset 6, -8
 1118              		.cfi_offset 14, -4
 1119 0002 0646     		mov	r6, r0
 1120 0004 0C46     		mov	r4, r1
1197:libcanard/canard.c ****     {
 1121              		.loc 1 1197 0
 1122 0006 05E0     		b	.L114
 1123              	.LVL143:
 1124              	.L115:
 1125              	.LBB14:
1199:libcanard/canard.c ****         freeBlock(&ins->allocator, rxstate->buffer_blocks);
 1126              		.loc 1 1199 0
 1127 0008 0D68     		ldr	r5, [r1]
 1128              	.LVL144:
1200:libcanard/canard.c ****         rxstate->buffer_blocks = temp;
 1129              		.loc 1 1200 0
 1130 000a 06F10C00 		add	r0, r6, #12
 1131 000e FFF7FEFF 		bl	freeBlock
 1132              	.LVL145:
1201:libcanard/canard.c ****     }
 1133              		.loc 1 1201 0
ARM GAS  /tmp/ccbnltLA.s 			page 50


 1134 0012 6560     		str	r5, [r4, #4]
 1135              	.LVL146:
 1136              	.L114:
 1137              	.LBE14:
1197:libcanard/canard.c ****     {
 1138              		.loc 1 1197 0
 1139 0014 6168     		ldr	r1, [r4, #4]
 1140 0016 0029     		cmp	r1, #0
 1141 0018 F6D1     		bne	.L115
1203:libcanard/canard.c ****     return CANARD_OK;
 1142              		.loc 1 1203 0
 1143 001a E38A     		ldrh	r3, [r4, #22]
 1144 001c 6FF30903 		bfc	r3, #0, #10
 1145 0020 E382     		strh	r3, [r4, #22]	@ movhi
1205:libcanard/canard.c **** 
 1146              		.loc 1 1205 0
 1147 0022 0020     		movs	r0, #0
 1148 0024 0021     		movs	r1, #0
 1149 0026 70BD     		pop	{r4, r5, r6, pc}
 1150              		.cfi_endproc
 1151              	.LFE29:
 1153              		.section	.text.prepareForNextTransfer,"ax",%progbits
 1154              		.align	1
 1155              		.syntax unified
 1156              		.thumb
 1157              		.thumb_func
 1158              		.fpu softvfp
 1160              	prepareForNextTransfer:
 1161              	.LFB22:
1061:libcanard/canard.c ****     CANARD_ASSERT(state->buffer_blocks == NULL);
 1162              		.loc 1 1061 0
 1163              		.cfi_startproc
 1164              		@ args = 0, pretend = 0, frame = 0
 1165              		@ frame_needed = 0, uses_anonymous_args = 0
 1166              	.LVL147:
 1167 0000 08B5     		push	{r3, lr}
 1168              	.LCFI14:
 1169              		.cfi_def_cfa_offset 8
 1170              		.cfi_offset 3, -8
 1171              		.cfi_offset 14, -4
1062:libcanard/canard.c ****     state->transfer_id++;
 1172              		.loc 1 1062 0
 1173 0002 4368     		ldr	r3, [r0, #4]
 1174 0004 7BB9     		cbnz	r3, .L120
1063:libcanard/canard.c ****     state->payload_len = 0;
 1175              		.loc 1 1063 0
 1176 0006 C37D     		ldrb	r3, [r0, #23]	@ zero_extendqisi2
 1177 0008 C3F38402 		ubfx	r2, r3, #2, #5
 1178 000c 0132     		adds	r2, r2, #1
 1179 000e 62F38603 		bfi	r3, r2, #2, #5
 1180 0012 C375     		strb	r3, [r0, #23]
1064:libcanard/canard.c ****     state->next_toggle = 0;
 1181              		.loc 1 1064 0
 1182 0014 C38A     		ldrh	r3, [r0, #22]
 1183 0016 6FF30903 		bfc	r3, #0, #10
 1184 001a C382     		strh	r3, [r0, #22]	@ movhi
1065:libcanard/canard.c **** }
ARM GAS  /tmp/ccbnltLA.s 			page 51


 1185              		.loc 1 1065 0
 1186 001c 1B0A     		lsrs	r3, r3, #8
 1187 001e 6FF3C713 		bfc	r3, #7, #1
 1188 0022 C375     		strb	r3, [r0, #23]
 1189 0024 08BD     		pop	{r3, pc}
 1190              	.L120:
1062:libcanard/canard.c ****     state->transfer_id++;
 1191              		.loc 1 1062 0 discriminator 1
 1192 0026 034B     		ldr	r3, .L121
 1193 0028 034A     		ldr	r2, .L121+4
 1194 002a 40F22641 		movw	r1, #1062
 1195 002e 0348     		ldr	r0, .L121+8
 1196              	.LVL148:
 1197 0030 FFF7FEFF 		bl	__assert_func
 1198              	.LVL149:
 1199              	.L122:
 1200              		.align	2
 1201              	.L121:
 1202 0034 00000000 		.word	.LC5
 1203 0038 00000000 		.word	.LANCHOR3
 1204 003c 14000000 		.word	.LC1
 1205              		.cfi_endproc
 1206              	.LFE22:
 1208              		.section	.text.copyBitArray,"ax",%progbits
 1209              		.align	1
 1210              		.syntax unified
 1211              		.thumb
 1212              		.thumb_func
 1213              		.fpu softvfp
 1215              	copyBitArray:
 1216              	.LFB32:
1327:libcanard/canard.c ****     CANARD_ASSERT(src_len > 0U);
 1217              		.loc 1 1327 0
 1218              		.cfi_startproc
 1219              		@ args = 4, pretend = 0, frame = 0
 1220              		@ frame_needed = 0, uses_anonymous_args = 0
 1221              	.LVL150:
 1222 0000 2DE9F843 		push	{r3, r4, r5, r6, r7, r8, r9, lr}
 1223              	.LCFI15:
 1224              		.cfi_def_cfa_offset 32
 1225              		.cfi_offset 3, -32
 1226              		.cfi_offset 4, -28
 1227              		.cfi_offset 5, -24
 1228              		.cfi_offset 6, -20
 1229              		.cfi_offset 7, -16
 1230              		.cfi_offset 8, -12
 1231              		.cfi_offset 9, -8
 1232              		.cfi_offset 14, -4
 1233 0004 089F     		ldr	r7, [sp, #32]
1328:libcanard/canard.c **** 
 1234              		.loc 1 1328 0
 1235 0006 4AB1     		cbz	r2, .L128
1331:libcanard/canard.c ****     dst += dst_offset / 8U;
 1236              		.loc 1 1331 0
 1237 0008 4FEAD10E 		lsr	lr, r1, #3
 1238              	.LVL151:
1332:libcanard/canard.c **** 
ARM GAS  /tmp/ccbnltLA.s 			page 52


 1239              		.loc 1 1332 0
 1240 000c 03EBD703 		add	r3, r3, r7, lsr #3
 1241              	.LVL152:
1334:libcanard/canard.c ****     dst_offset %= 8U;
 1242              		.loc 1 1334 0
 1243 0010 01F00701 		and	r1, r1, #7
 1244              	.LVL153:
1335:libcanard/canard.c **** 
 1245              		.loc 1 1335 0
 1246 0014 07F00707 		and	r7, r7, #7
 1247              	.LVL154:
1337:libcanard/canard.c ****     while (last_bit - src_offset)
 1248              		.loc 1 1337 0
 1249 0018 0A44     		add	r2, r2, r1
 1250              	.LVL155:
1338:libcanard/canard.c ****     {
 1251              		.loc 1 1338 0
 1252 001a 31E0     		b	.L125
 1253              	.LVL156:
 1254              	.L128:
1328:libcanard/canard.c **** 
 1255              		.loc 1 1328 0 discriminator 1
 1256 001c 1A4B     		ldr	r3, .L129
 1257              	.LVL157:
 1258 001e 1B4A     		ldr	r2, .L129+4
 1259              	.LVL158:
 1260 0020 4FF4A661 		mov	r1, #1328
 1261              	.LVL159:
 1262 0024 1A48     		ldr	r0, .L129+8
 1263              	.LVL160:
 1264 0026 FFF7FEFF 		bl	__assert_func
 1265              	.LVL161:
 1266              	.L126:
 1267              	.LBB15:
1340:libcanard/canard.c ****         const uint8_t dst_bit_offset = (uint8_t)(dst_offset % 8U);
 1268              		.loc 1 1340 0
 1269 002a 01F00708 		and	r8, r1, #7
 1270              	.LVL162:
1341:libcanard/canard.c **** 
 1271              		.loc 1 1341 0
 1272 002e 07F0070C 		and	ip, r7, #7
 1273              	.LVL163:
1343:libcanard/canard.c ****         const uint32_t copy_bits = MIN(last_bit - src_offset, 8U - max_offset);
 1274              		.loc 1 1343 0
 1275 0032 4646     		mov	r6, r8
 1276 0034 E045     		cmp	r8, ip
 1277 0036 38BF     		it	cc
 1278 0038 6646     		movcc	r6, ip
 1279              	.LVL164:
1344:libcanard/canard.c **** 
 1280              		.loc 1 1344 0
 1281 003a C6F10806 		rsb	r6, r6, #8
 1282              	.LVL165:
 1283 003e 541A     		subs	r4, r2, r1
 1284 0040 A642     		cmp	r6, r4
 1285              	.LVL166:
 1286 0042 28BF     		it	cs
ARM GAS  /tmp/ccbnltLA.s 			page 53


 1287 0044 2646     		movcs	r6, r4
 1288              	.LVL167:
1346:libcanard/canard.c ****         const uint8_t src_data = (uint8_t)(((uint32_t)src[src_offset / 8U] << src_bit_offset) >> ds
 1289              		.loc 1 1346 0
 1290 0046 4FF47F45 		mov	r5, #65280
 1291 004a F540     		lsrs	r5, r5, r6
 1292 004c EDB2     		uxtb	r5, r5
 1293 004e 45FA0CF5 		asr	r5, r5, ip
 1294              	.LVL168:
1347:libcanard/canard.c **** 
 1295              		.loc 1 1347 0
 1296 0052 CC08     		lsrs	r4, r1, #3
 1297 0054 00EB0E09 		add	r9, r0, lr
 1298 0058 19F80440 		ldrb	r4, [r9, r4]	@ zero_extendqisi2
 1299 005c 04FA08F4 		lsl	r4, r4, r8
 1300 0060 24FA0CF4 		lsr	r4, r4, ip
 1301 0064 E4B2     		uxtb	r4, r4
 1302              	.LVL169:
1349:libcanard/canard.c ****             (uint8_t)(((uint32_t)dst[dst_offset / 8U] & (uint32_t)~write_mask) | (uint32_t)(src_dat
 1303              		.loc 1 1349 0
 1304 0066 4FEAD708 		lsr	r8, r7, #3
 1305              	.LVL170:
1350:libcanard/canard.c **** 
 1306              		.loc 1 1350 0
 1307 006a 13F808C0 		ldrb	ip, [r3, r8]	@ zero_extendqisi2
 1308              	.LVL171:
 1309 006e 84EA0C04 		eor	r4, r4, ip
 1310              	.LVL172:
 1311 0072 2C40     		ands	r4, r4, r5
 1312 0074 8CEA040C 		eor	ip, ip, r4
1349:libcanard/canard.c ****             (uint8_t)(((uint32_t)dst[dst_offset / 8U] & (uint32_t)~write_mask) | (uint32_t)(src_dat
 1313              		.loc 1 1349 0
 1314 0078 03F808C0 		strb	ip, [r3, r8]
 1315              	.LVL173:
1352:libcanard/canard.c ****         dst_offset += copy_bits;
 1316              		.loc 1 1352 0
 1317 007c 3144     		add	r1, r1, r6
 1318              	.LVL174:
1353:libcanard/canard.c ****     }
 1319              		.loc 1 1353 0
 1320 007e 3744     		add	r7, r7, r6
 1321              	.LVL175:
 1322              	.L125:
 1323              	.LBE15:
1338:libcanard/canard.c ****     {
 1324              		.loc 1 1338 0
 1325 0080 9142     		cmp	r1, r2
 1326 0082 D2D1     		bne	.L126
1355:libcanard/canard.c **** 
 1327              		.loc 1 1355 0
 1328 0084 BDE8F883 		pop	{r3, r4, r5, r6, r7, r8, r9, pc}
 1329              	.LVL176:
 1330              	.L130:
 1331              		.align	2
 1332              	.L129:
 1333 0088 00000000 		.word	.LC6
 1334 008c 00000000 		.word	.LANCHOR4
ARM GAS  /tmp/ccbnltLA.s 			page 54


 1335 0090 14000000 		.word	.LC1
 1336              		.cfi_endproc
 1337              	.LFE32:
 1339              		.section	.text.descatterTransferPayload,"ax",%progbits
 1340              		.align	1
 1341              		.syntax unified
 1342              		.thumb
 1343              		.thumb_func
 1344              		.fpu softvfp
 1346              	descatterTransferPayload:
 1347              	.LFB33:
1361:libcanard/canard.c ****     CANARD_ASSERT(transfer != 0);
 1348              		.loc 1 1361 0
 1349              		.cfi_startproc
 1350              		@ args = 0, pretend = 0, frame = 16
 1351              		@ frame_needed = 0, uses_anonymous_args = 0
 1352              	.LVL177:
 1353 0000 2DE9F04F 		push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}
 1354              	.LCFI16:
 1355              		.cfi_def_cfa_offset 36
 1356              		.cfi_offset 4, -36
 1357              		.cfi_offset 5, -32
 1358              		.cfi_offset 6, -28
 1359              		.cfi_offset 7, -24
 1360              		.cfi_offset 8, -20
 1361              		.cfi_offset 9, -16
 1362              		.cfi_offset 10, -12
 1363              		.cfi_offset 11, -8
 1364              		.cfi_offset 14, -4
 1365 0004 87B0     		sub	sp, sp, #28
 1366              	.LCFI17:
 1367              		.cfi_def_cfa_offset 64
 1368 0006 0592     		str	r2, [sp, #20]
 1369 0008 0393     		str	r3, [sp, #12]
1362:libcanard/canard.c **** 
 1370              		.loc 1 1362 0
 1371 000a 0490     		str	r0, [sp, #16]
 1372 000c 20B3     		cbz	r0, .L159
 1373 000e 8846     		mov	r8, r1
1364:libcanard/canard.c ****     {
 1374              		.loc 1 1364 0
 1375 0010 049B     		ldr	r3, [sp, #16]
 1376              	.LVL178:
 1377 0012 9B8A     		ldrh	r3, [r3, #20]
 1378 0014 DA00     		lsls	r2, r3, #3
 1379              	.LVL179:
 1380 0016 8A42     		cmp	r2, r1
 1381 0018 40F2EB80 		bls	.L154
1369:libcanard/canard.c ****     {
 1382              		.loc 1 1369 0
 1383 001c 0599     		ldr	r1, [sp, #20]
 1384              	.LVL180:
 1385 001e 4144     		add	r1, r1, r8
 1386 0020 8A42     		cmp	r2, r1
 1387 0022 05D2     		bcs	.L134
1371:libcanard/canard.c ****     }
 1388              		.loc 1 1371 0
ARM GAS  /tmp/ccbnltLA.s 			page 55


 1389 0024 D0B2     		uxtb	r0, r2
 1390              	.LVL181:
 1391 0026 5FFA88F3 		uxtb	r3, r8
 1392 002a C01A     		subs	r0, r0, r3
 1393 002c C3B2     		uxtb	r3, r0
 1394 002e 0593     		str	r3, [sp, #20]
 1395              	.LVL182:
 1396              	.L134:
1374:libcanard/canard.c **** 
 1397              		.loc 1 1374 0
 1398 0030 059B     		ldr	r3, [sp, #20]
 1399 0032 C3B1     		cbz	r3, .L160
1376:libcanard/canard.c ****     {
 1400              		.loc 1 1376 0
 1401 0034 049B     		ldr	r3, [sp, #16]
 1402 0036 DB68     		ldr	r3, [r3, #12]
 1403 0038 E3B1     		cbz	r3, .L161
 1404              	.L136:
 1405              	.LVL183:
 1406              	.LBB16:
1388:libcanard/canard.c ****         {
 1407              		.loc 1 1388 0
 1408 003a B8F12F0F 		cmp	r8, #47
 1409 003e 44D8     		bhi	.L155
 1410              	.LBB17:
1390:libcanard/canard.c ****                                                 CANARD_MULTIFRAME_RX_PAYLOAD_HEAD_SIZE * 8U - input
 1411              		.loc 1 1390 0
 1412 0040 C8F13003 		rsb	r3, r8, #48
 1413 0044 059A     		ldr	r2, [sp, #20]
 1414 0046 9A42     		cmp	r2, r3
 1415 0048 22D3     		bcc	.L156
1390:libcanard/canard.c ****                                                 CANARD_MULTIFRAME_RX_PAYLOAD_HEAD_SIZE * 8U - input
 1416              		.loc 1 1390 0 is_stmt 0 discriminator 1
 1417 004a 5FFA88F3 		uxtb	r3, r8
 1418 004e C3F13003 		rsb	r3, r3, #48
 1419 0052 DBB2     		uxtb	r3, r3
 1420 0054 0293     		str	r3, [sp, #8]
 1421 0056 1DE0     		b	.L139
 1422              	.LVL184:
 1423              	.L159:
 1424              	.LBE17:
 1425              	.LBE16:
1362:libcanard/canard.c **** 
 1426              		.loc 1 1362 0 is_stmt 1 discriminator 1
 1427 0058 674B     		ldr	r3, .L170
 1428              	.LVL185:
 1429 005a 684A     		ldr	r2, .L170+4
 1430              	.LVL186:
 1431 005c 40F25251 		movw	r1, #1362
 1432              	.LVL187:
 1433 0060 6748     		ldr	r0, .L170+8
 1434              	.LVL188:
 1435 0062 FFF7FEFF 		bl	__assert_func
 1436              	.LVL189:
 1437              	.L160:
1374:libcanard/canard.c **** 
 1438              		.loc 1 1374 0 discriminator 1
ARM GAS  /tmp/ccbnltLA.s 			page 56


 1439 0066 674B     		ldr	r3, .L170+12
 1440 0068 644A     		ldr	r2, .L170+4
 1441 006a 40F25E51 		movw	r1, #1374
 1442 006e 6448     		ldr	r0, .L170+8
 1443 0070 FFF7FEFF 		bl	__assert_func
 1444              	.LVL190:
 1445              	.L161:
1376:libcanard/canard.c ****     {
 1446              		.loc 1 1376 0 discriminator 1
 1447 0074 049B     		ldr	r3, [sp, #16]
 1448 0076 1B69     		ldr	r3, [r3, #16]
 1449 0078 002B     		cmp	r3, #0
 1450 007a DED1     		bne	.L136
1454:libcanard/canard.c ****     }
 1451              		.loc 1 1454 0
 1452 007c 049B     		ldr	r3, [sp, #16]
 1453 007e 9868     		ldr	r0, [r3, #8]
 1454 0080 0023     		movs	r3, #0
 1455 0082 0093     		str	r3, [sp]
 1456 0084 039B     		ldr	r3, [sp, #12]
 1457 0086 059A     		ldr	r2, [sp, #20]
 1458 0088 4146     		mov	r1, r8
 1459 008a FFF7FEFF 		bl	copyBitArray
 1460              	.LVL191:
 1461 008e 88E0     		b	.L153
 1462              	.LVL192:
 1463              	.L156:
 1464              	.LBB25:
 1465              	.LBB18:
1390:libcanard/canard.c ****                                                 CANARD_MULTIFRAME_RX_PAYLOAD_HEAD_SIZE * 8U - input
 1466              		.loc 1 1390 0
 1467 0090 059B     		ldr	r3, [sp, #20]
 1468 0092 0293     		str	r3, [sp, #8]
 1469              	.L139:
 1470              	.LVL193:
1393:libcanard/canard.c **** 
 1471              		.loc 1 1393 0 discriminator 4
 1472 0094 049B     		ldr	r3, [sp, #16]
 1473 0096 9868     		ldr	r0, [r3, #8]
 1474 0098 0023     		movs	r3, #0
 1475 009a 0093     		str	r3, [sp]
 1476 009c 039B     		ldr	r3, [sp, #12]
 1477 009e 029C     		ldr	r4, [sp, #8]
 1478 00a0 2246     		mov	r2, r4
 1479 00a2 4146     		mov	r1, r8
 1480 00a4 FFF7FEFF 		bl	copyBitArray
 1481              	.LVL194:
1395:libcanard/canard.c ****             output_bit_offset = (uint8_t)(output_bit_offset + amount);
 1482              		.loc 1 1395 0 discriminator 4
 1483 00a8 A044     		add	r8, r8, r4
 1484              	.LVL195:
1397:libcanard/canard.c ****         }
 1485              		.loc 1 1397 0 discriminator 4
 1486 00aa 0599     		ldr	r1, [sp, #20]
 1487 00ac 0C1B     		subs	r4, r1, r4
 1488              	.LVL196:
 1489 00ae E4B2     		uxtb	r4, r4
ARM GAS  /tmp/ccbnltLA.s 			page 57


 1490              	.LVL197:
 1491              	.L138:
 1492              	.LBE18:
1401:libcanard/canard.c ****         uint32_t block_bit_offset = CANARD_MULTIFRAME_RX_PAYLOAD_HEAD_SIZE * 8U;
 1493              		.loc 1 1401 0
 1494 00b0 049A     		ldr	r2, [sp, #16]
 1495 00b2 978A     		ldrh	r7, [r2, #20]
 1496 00b4 07F10057 		add	r7, r7, #536870912
 1497 00b8 063F     		subs	r7, r7, #6
 1498 00ba FF00     		lsls	r7, r7, #3
 1499              	.LVL198:
1403:libcanard/canard.c **** 
 1500              		.loc 1 1403 0
 1501 00bc D2F80CA0 		ldr	r10, [r2, #12]
 1502              	.LVL199:
1402:libcanard/canard.c ****         const CanardBufferBlock* block = transfer->payload_middle;
 1503              		.loc 1 1402 0
 1504 00c0 4FF03009 		mov	r9, #48
 1505 00c4 A346     		mov	fp, r4
 1506 00c6 5446     		mov	r4, r10
 1507              	.LVL200:
1405:libcanard/canard.c ****         {
 1508              		.loc 1 1405 0
 1509 00c8 25E0     		b	.L140
 1510              	.LVL201:
 1511              	.L155:
1385:libcanard/canard.c **** 
 1512              		.loc 1 1385 0
 1513 00ca 059C     		ldr	r4, [sp, #20]
1384:libcanard/canard.c ****         uint8_t remaining_bit_length = bit_length;
 1514              		.loc 1 1384 0
 1515 00cc 0023     		movs	r3, #0
 1516 00ce 0293     		str	r3, [sp, #8]
 1517 00d0 EEE7     		b	.L138
 1518              	.LVL202:
 1519              	.L164:
 1520              	.LBB19:
1407:libcanard/canard.c ****             const uint32_t block_end_bit_offset = block_bit_offset + MIN(CANARD_BUFFER_BLOCK_DATA_S
 1521              		.loc 1 1407 0 discriminator 1
 1522 00d2 4D4B     		ldr	r3, .L170+16
 1523 00d4 494A     		ldr	r2, .L170+4
 1524 00d6 40F27F51 		movw	r1, #1407
 1525 00da 4948     		ldr	r0, .L170+8
 1526 00dc FFF7FEFF 		bl	__assert_func
 1527              	.LVL203:
 1528              	.L157:
 1529              	.LBB20:
1414:libcanard/canard.c **** 
 1530              		.loc 1 1414 0
 1531 00e0 5D46     		mov	r5, fp
 1532              	.L143:
 1533              	.LVL204:
1416:libcanard/canard.c ****                 const uint32_t bit_offset_within_block = input_bit_offset - block_bit_offset;
 1534              		.loc 1 1416 0 discriminator 4
 1535 00e2 C845     		cmp	r8, r9
 1536 00e4 30D3     		bcc	.L162
 1537              	.LVL205:
ARM GAS  /tmp/ccbnltLA.s 			page 58


1419:libcanard/canard.c **** 
 1538              		.loc 1 1419 0
 1539 00e6 029B     		ldr	r3, [sp, #8]
 1540 00e8 0093     		str	r3, [sp]
 1541 00ea 039B     		ldr	r3, [sp, #12]
 1542 00ec 2A46     		mov	r2, r5
 1543 00ee A8EB0901 		sub	r1, r8, r9
 1544              	.LVL206:
 1545 00f2 201D     		adds	r0, r4, #4
 1546 00f4 FFF7FEFF 		bl	copyBitArray
 1547              	.LVL207:
1421:libcanard/canard.c ****                 output_bit_offset = (uint8_t)(output_bit_offset + amount);
 1548              		.loc 1 1421 0
 1549 00f8 A844     		add	r8, r8, r5
 1550              	.LVL208:
1422:libcanard/canard.c ****                 remaining_bit_length = (uint8_t)(remaining_bit_length - amount);
 1551              		.loc 1 1422 0
 1552 00fa 029B     		ldr	r3, [sp, #8]
 1553 00fc 2B44     		add	r3, r3, r5
 1554 00fe DBB2     		uxtb	r3, r3
 1555 0100 0293     		str	r3, [sp, #8]
 1556              	.LVL209:
1423:libcanard/canard.c ****             }
 1557              		.loc 1 1423 0
 1558 0102 ABEB050B 		sub	fp, fp, r5
 1559              	.LVL210:
 1560 0106 5FFA8BFB 		uxtb	fp, fp
 1561              	.LVL211:
 1562              	.L142:
 1563              	.LBE20:
1426:libcanard/canard.c ****             remaining_bits -= block_end_bit_offset - block_bit_offset;
 1564              		.loc 1 1426 0
 1565 010a B145     		cmp	r9, r6
 1566 010c 23D2     		bcs	.L163
1427:libcanard/canard.c ****             block_bit_offset = block_end_bit_offset;
 1567              		.loc 1 1427 0
 1568 010e A7EB0A07 		sub	r7, r7, r10
 1569              	.LVL212:
1429:libcanard/canard.c ****         }
 1570              		.loc 1 1429 0
 1571 0112 2468     		ldr	r4, [r4]
 1572              	.LVL213:
1428:libcanard/canard.c ****             block = block->next;
 1573              		.loc 1 1428 0
 1574 0114 B146     		mov	r9, r6
 1575              	.LVL214:
 1576              	.L140:
 1577              	.LBE19:
1405:libcanard/canard.c ****         {
 1578              		.loc 1 1405 0
 1579 0116 2CB3     		cbz	r4, .L146
1405:libcanard/canard.c ****         {
 1580              		.loc 1 1405 0 is_stmt 0 discriminator 1
 1581 0118 BBF1000F 		cmp	fp, #0
 1582 011c 22D0     		beq	.L146
 1583              	.LBB22:
1407:libcanard/canard.c ****             const uint32_t block_end_bit_offset = block_bit_offset + MIN(CANARD_BUFFER_BLOCK_DATA_S
ARM GAS  /tmp/ccbnltLA.s 			page 59


 1584              		.loc 1 1407 0 is_stmt 1
 1585 011e 002F     		cmp	r7, #0
 1586 0120 D7D0     		beq	.L164
1408:libcanard/canard.c ****                                                                          remaining_bits);
 1587              		.loc 1 1408 0
 1588 0122 BA46     		mov	r10, r7
 1589 0124 E02F     		cmp	r7, #224
 1590 0126 28BF     		it	cs
 1591 0128 4FF0E00A 		movcs	r10, #224
 1592 012c 09EB0A06 		add	r6, r9, r10
 1593              	.LVL215:
1412:libcanard/canard.c ****             {
 1594              		.loc 1 1412 0
 1595 0130 B045     		cmp	r8, r6
 1596 0132 EAD2     		bcs	.L142
 1597              	.LBB21:
1414:libcanard/canard.c **** 
 1598              		.loc 1 1414 0
 1599 0134 A6EB0803 		sub	r3, r6, r8
 1600 0138 9B45     		cmp	fp, r3
 1601 013a D1D3     		bcc	.L157
1414:libcanard/canard.c **** 
 1602              		.loc 1 1414 0 is_stmt 0 discriminator 1
 1603 013c F5B2     		uxtb	r5, r6
 1604 013e 5FFA88F3 		uxtb	r3, r8
 1605 0142 ED1A     		subs	r5, r5, r3
 1606 0144 EDB2     		uxtb	r5, r5
 1607 0146 CCE7     		b	.L143
 1608              	.LVL216:
 1609              	.L162:
1416:libcanard/canard.c ****                 const uint32_t bit_offset_within_block = input_bit_offset - block_bit_offset;
 1610              		.loc 1 1416 0 is_stmt 1 discriminator 1
 1611 0148 304B     		ldr	r3, .L170+20
 1612 014a 2C4A     		ldr	r2, .L170+4
 1613 014c 4FF4B161 		mov	r1, #1416
 1614 0150 2B48     		ldr	r0, .L170+8
 1615 0152 FFF7FEFF 		bl	__assert_func
 1616              	.LVL217:
 1617              	.L163:
 1618              	.LBE21:
1426:libcanard/canard.c ****             remaining_bits -= block_end_bit_offset - block_bit_offset;
 1619              		.loc 1 1426 0 discriminator 1
 1620 0156 2E4B     		ldr	r3, .L170+24
 1621 0158 284A     		ldr	r2, .L170+4
 1622 015a 40F29251 		movw	r1, #1426
 1623 015e 2848     		ldr	r0, .L170+8
 1624 0160 FFF7FEFF 		bl	__assert_func
 1625              	.LVL218:
 1626              	.L146:
 1627 0164 5C46     		mov	r4, fp
 1628              	.LVL219:
 1629              	.LBE22:
1432:libcanard/canard.c **** 
 1630              		.loc 1 1432 0
 1631 0166 5F45     		cmp	r7, fp
 1632 0168 20D3     		bcc	.L165
1435:libcanard/canard.c ****         {
ARM GAS  /tmp/ccbnltLA.s 			page 60


 1633              		.loc 1 1435 0
 1634 016a 049B     		ldr	r3, [sp, #16]
 1635 016c 1869     		ldr	r0, [r3, #16]
 1636 016e 78B1     		cbz	r0, .L149
1435:libcanard/canard.c ****         {
 1637              		.loc 1 1435 0 is_stmt 0 discriminator 1
 1638 0170 74B1     		cbz	r4, .L149
 1639              	.LBB23:
1437:libcanard/canard.c ****             const uint32_t offset = input_bit_offset - block_bit_offset;
 1640              		.loc 1 1437 0 is_stmt 1
 1641 0172 C845     		cmp	r8, r9
 1642 0174 21D3     		bcc	.L166
 1643              	.LVL220:
1440:libcanard/canard.c ****                          output_bit_offset);
 1644              		.loc 1 1440 0
 1645 0176 029E     		ldr	r6, [sp, #8]
 1646 0178 0096     		str	r6, [sp]
 1647 017a 039B     		ldr	r3, [sp, #12]
 1648 017c 2246     		mov	r2, r4
 1649 017e A8EB0901 		sub	r1, r8, r9
 1650              	.LVL221:
 1651 0182 FFF7FEFF 		bl	copyBitArray
 1652              	.LVL222:
1443:libcanard/canard.c ****             output_bit_offset = (uint8_t)(output_bit_offset + remaining_bit_length);
 1653              		.loc 1 1443 0
 1654 0186 D844     		add	r8, r8, fp
 1655              	.LVL223:
1444:libcanard/canard.c ****             remaining_bit_length = 0;
 1656              		.loc 1 1444 0
 1657 0188 3444     		add	r4, r4, r6
 1658 018a E3B2     		uxtb	r3, r4
 1659 018c 0293     		str	r3, [sp, #8]
 1660              	.LVL224:
1445:libcanard/canard.c ****         }
 1661              		.loc 1 1445 0
 1662 018e 0024     		movs	r4, #0
 1663              	.LVL225:
 1664              	.L149:
 1665              	.LBE23:
1448:libcanard/canard.c ****         CANARD_ASSERT(output_bit_offset <= 64);
 1666              		.loc 1 1448 0
 1667 0190 049B     		ldr	r3, [sp, #16]
 1668 0192 9B8A     		ldrh	r3, [r3, #20]
 1669 0194 B8EBC30F 		cmp	r8, r3, lsl #3
 1670 0198 16D8     		bhi	.L167
1449:libcanard/canard.c ****         CANARD_ASSERT(remaining_bit_length == 0);
 1671              		.loc 1 1449 0
 1672 019a 029B     		ldr	r3, [sp, #8]
 1673 019c 402B     		cmp	r3, #64
 1674 019e 1AD8     		bhi	.L168
1450:libcanard/canard.c ****     }
 1675              		.loc 1 1450 0
 1676 01a0 04BB     		cbnz	r4, .L169
 1677              	.LVL226:
 1678              	.L153:
 1679              	.LBE25:
1457:libcanard/canard.c **** }
ARM GAS  /tmp/ccbnltLA.s 			page 61


 1680              		.loc 1 1457 0
 1681 01a2 BDF91400 		ldrsh	r0, [sp, #20]
 1682              	.LVL227:
 1683              	.L133:
1458:libcanard/canard.c **** 
 1684              		.loc 1 1458 0
 1685 01a6 07B0     		add	sp, sp, #28
 1686              	.LCFI18:
 1687              		.cfi_remember_state
 1688              		.cfi_def_cfa_offset 36
 1689              		@ sp needed
 1690 01a8 BDE8F08F 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
 1691              	.LVL228:
 1692              	.L165:
 1693              	.LCFI19:
 1694              		.cfi_restore_state
 1695              	.LBB26:
1432:libcanard/canard.c **** 
 1696              		.loc 1 1432 0 discriminator 1
 1697 01ac 194B     		ldr	r3, .L170+28
 1698 01ae 134A     		ldr	r2, .L170+4
 1699 01b0 4FF4B361 		mov	r1, #1432
 1700 01b4 1248     		ldr	r0, .L170+8
 1701 01b6 FFF7FEFF 		bl	__assert_func
 1702              	.LVL229:
 1703              	.L166:
 1704              	.LBB24:
1437:libcanard/canard.c ****             const uint32_t offset = input_bit_offset - block_bit_offset;
 1705              		.loc 1 1437 0 discriminator 1
 1706 01ba 144B     		ldr	r3, .L170+20
 1707 01bc 0F4A     		ldr	r2, .L170+4
 1708 01be 40F29D51 		movw	r1, #1437
 1709 01c2 0F48     		ldr	r0, .L170+8
 1710 01c4 FFF7FEFF 		bl	__assert_func
 1711              	.LVL230:
 1712              	.L167:
 1713              	.LBE24:
1448:libcanard/canard.c ****         CANARD_ASSERT(output_bit_offset <= 64);
 1714              		.loc 1 1448 0 discriminator 1
 1715 01c8 134B     		ldr	r3, .L170+32
 1716 01ca 0C4A     		ldr	r2, .L170+4
 1717 01cc 4FF4B561 		mov	r1, #1448
 1718 01d0 0B48     		ldr	r0, .L170+8
 1719 01d2 FFF7FEFF 		bl	__assert_func
 1720              	.LVL231:
 1721              	.L168:
1449:libcanard/canard.c ****         CANARD_ASSERT(remaining_bit_length == 0);
 1722              		.loc 1 1449 0 discriminator 1
 1723 01d6 114B     		ldr	r3, .L170+36
 1724 01d8 084A     		ldr	r2, .L170+4
 1725 01da 40F2A951 		movw	r1, #1449
 1726 01de 0848     		ldr	r0, .L170+8
 1727 01e0 FFF7FEFF 		bl	__assert_func
 1728              	.LVL232:
 1729              	.L169:
1450:libcanard/canard.c ****     }
 1730              		.loc 1 1450 0 discriminator 1
ARM GAS  /tmp/ccbnltLA.s 			page 62


 1731 01e4 0E4B     		ldr	r3, .L170+40
 1732 01e6 054A     		ldr	r2, .L170+4
 1733 01e8 40F2AA51 		movw	r1, #1450
 1734 01ec 0448     		ldr	r0, .L170+8
 1735 01ee FFF7FEFF 		bl	__assert_func
 1736              	.LVL233:
 1737              	.L154:
 1738              	.LBE26:
1366:libcanard/canard.c ****     }
 1739              		.loc 1 1366 0
 1740 01f2 0020     		movs	r0, #0
 1741              	.LVL234:
 1742 01f4 D7E7     		b	.L133
 1743              	.L171:
 1744 01f6 00BF     		.align	2
 1745              	.L170:
 1746 01f8 00000000 		.word	.LC7
 1747 01fc 00000000 		.word	.LANCHOR5
 1748 0200 14000000 		.word	.LC1
 1749 0204 10000000 		.word	.LC8
 1750 0208 20000000 		.word	.LC9
 1751 020c 34000000 		.word	.LC10
 1752 0210 5C000000 		.word	.LC11
 1753 0214 84000000 		.word	.LC12
 1754 0218 AC000000 		.word	.LC13
 1755 021c DC000000 		.word	.LC14
 1756 0220 F4000000 		.word	.LC15
 1757              		.cfi_endproc
 1758              	.LFE33:
 1760              		.section	.text.swapByteOrder,"ax",%progbits
 1761              		.align	1
 1762              		.syntax unified
 1763              		.thumb
 1764              		.thumb_func
 1765              		.fpu softvfp
 1767              	swapByteOrder:
 1768              	.LFB35:
1476:libcanard/canard.c ****     CANARD_ASSERT(data != NULL);
 1769              		.loc 1 1476 0
 1770              		.cfi_startproc
 1771              		@ args = 0, pretend = 0, frame = 0
 1772              		@ frame_needed = 0, uses_anonymous_args = 0
 1773              	.LVL235:
 1774 0000 10B5     		push	{r4, lr}
 1775              	.LCFI20:
 1776              		.cfi_def_cfa_offset 8
 1777              		.cfi_offset 4, -8
 1778              		.cfi_offset 14, -4
1477:libcanard/canard.c **** 
 1779              		.loc 1 1477 0
 1780 0002 18B1     		cbz	r0, .L177
 1781 0004 0246     		mov	r2, r0
 1782              	.LVL236:
1482:libcanard/canard.c **** 
 1783              		.loc 1 1482 0
 1784 0006 0139     		subs	r1, r1, #1
 1785              	.LVL237:
ARM GAS  /tmp/ccbnltLA.s 			page 63


1481:libcanard/canard.c ****     size_t rev = size - 1;
 1786              		.loc 1 1481 0
 1787 0008 0023     		movs	r3, #0
1484:libcanard/canard.c ****     {
 1788              		.loc 1 1484 0
 1789 000a 0CE0     		b	.L174
 1790              	.LVL238:
 1791              	.L177:
1477:libcanard/canard.c **** 
 1792              		.loc 1 1477 0 discriminator 1
 1793 000c 074B     		ldr	r3, .L178
 1794 000e 084A     		ldr	r2, .L178+4
 1795 0010 40F2C551 		movw	r1, #1477
 1796              	.LVL239:
 1797 0014 0748     		ldr	r0, .L178+8
 1798              	.LVL240:
 1799 0016 FFF7FEFF 		bl	__assert_func
 1800              	.LVL241:
 1801              	.L175:
 1802              	.LBB27:
1486:libcanard/canard.c ****         bytes[fwd] = bytes[rev];
 1803              		.loc 1 1486 0
 1804 001a D05C     		ldrb	r0, [r2, r3]	@ zero_extendqisi2
 1805              	.LVL242:
1487:libcanard/canard.c ****         bytes[rev] = x;
 1806              		.loc 1 1487 0
 1807 001c 545C     		ldrb	r4, [r2, r1]	@ zero_extendqisi2
 1808 001e D454     		strb	r4, [r2, r3]
1488:libcanard/canard.c ****         fwd++;
 1809              		.loc 1 1488 0
 1810 0020 5054     		strb	r0, [r2, r1]
1489:libcanard/canard.c ****         rev--;
 1811              		.loc 1 1489 0
 1812 0022 0133     		adds	r3, r3, #1
 1813              	.LVL243:
1490:libcanard/canard.c ****     }
 1814              		.loc 1 1490 0
 1815 0024 0139     		subs	r1, r1, #1
 1816              	.LVL244:
 1817              	.L174:
 1818              	.LBE27:
1484:libcanard/canard.c ****     {
 1819              		.loc 1 1484 0
 1820 0026 8B42     		cmp	r3, r1
 1821 0028 F7D3     		bcc	.L175
1492:libcanard/canard.c **** 
 1822              		.loc 1 1492 0
 1823 002a 10BD     		pop	{r4, pc}
 1824              	.L179:
 1825              		.align	2
 1826              	.L178:
 1827 002c 00000000 		.word	.LC16
 1828 0030 00000000 		.word	.LANCHOR6
 1829 0034 14000000 		.word	.LC1
 1830              		.cfi_endproc
 1831              	.LFE35:
 1833              		.section	.text.createTxItem,"ax",%progbits
ARM GAS  /tmp/ccbnltLA.s 			page 64


 1834              		.align	1
 1835              		.syntax unified
 1836              		.thumb
 1837              		.thumb_func
 1838              		.fpu softvfp
 1840              	createTxItem:
 1841              	.LFB20:
1004:libcanard/canard.c ****     CanardTxQueueItem* item = (CanardTxQueueItem*) allocateBlock(allocator);
 1842              		.loc 1 1004 0
 1843              		.cfi_startproc
 1844              		@ args = 0, pretend = 0, frame = 0
 1845              		@ frame_needed = 0, uses_anonymous_args = 0
 1846              	.LVL245:
 1847 0000 08B5     		push	{r3, lr}
 1848              	.LCFI21:
 1849              		.cfi_def_cfa_offset 8
 1850              		.cfi_offset 3, -8
 1851              		.cfi_offset 14, -4
1005:libcanard/canard.c ****     if (item == NULL)
 1852              		.loc 1 1005 0
 1853 0002 FFF7FEFF 		bl	allocateBlock
 1854              	.LVL246:
1006:libcanard/canard.c ****     {
 1855              		.loc 1 1006 0
 1856 0006 0346     		mov	r3, r0
 1857 0008 28B1     		cbz	r0, .L180
1010:libcanard/canard.c ****     return item;
 1858              		.loc 1 1010 0
 1859 000a 0022     		movs	r2, #0
 1860 000c 0260     		str	r2, [r0]	@ unaligned
 1861 000e 4260     		str	r2, [r0, #4]	@ unaligned
 1862 0010 8260     		str	r2, [r0, #8]	@ unaligned
 1863 0012 C260     		str	r2, [r0, #12]	@ unaligned
 1864 0014 0261     		str	r2, [r0, #16]	@ unaligned
 1865              	.L180:
1012:libcanard/canard.c **** 
 1866              		.loc 1 1012 0
 1867 0016 1846     		mov	r0, r3
 1868              	.LVL247:
 1869 0018 08BD     		pop	{r3, pc}
 1870              		.cfi_endproc
 1871              	.LFE20:
 1873              		.section	.text.enqueueTxFrames,"ax",%progbits
 1874              		.align	1
 1875              		.syntax unified
 1876              		.thumb
 1877              		.thumb_func
 1878              		.fpu softvfp
 1880              	enqueueTxFrames:
 1881              	.LFB18:
 868:libcanard/canard.c ****     CANARD_ASSERT(ins != NULL);
 1882              		.loc 1 868 0
 1883              		.cfi_startproc
 1884              		@ args = 8, pretend = 0, frame = 8
 1885              		@ frame_needed = 0, uses_anonymous_args = 0
 1886              	.LVL248:
 1887 0000 2DE9F04F 		push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}
ARM GAS  /tmp/ccbnltLA.s 			page 65


 1888              	.LCFI22:
 1889              		.cfi_def_cfa_offset 36
 1890              		.cfi_offset 4, -36
 1891              		.cfi_offset 5, -32
 1892              		.cfi_offset 6, -28
 1893              		.cfi_offset 7, -24
 1894              		.cfi_offset 8, -20
 1895              		.cfi_offset 9, -16
 1896              		.cfi_offset 10, -12
 1897              		.cfi_offset 11, -8
 1898              		.cfi_offset 14, -4
 1899 0004 83B0     		sub	sp, sp, #12
 1900              	.LCFI23:
 1901              		.cfi_def_cfa_offset 48
 1902 0006 0092     		str	r2, [sp]
 1903 0008 0193     		str	r3, [sp, #4]
 1904 000a 0C9E     		ldr	r6, [sp, #48]
 1905 000c BDF83450 		ldrh	r5, [sp, #52]
 869:libcanard/canard.c ****     CANARD_ASSERT((can_id & CANARD_CAN_EXT_ID_MASK) == can_id);            // Flags must be cleared
 1906              		.loc 1 869 0
 1907 0010 98B1     		cbz	r0, .L202
 1908 0012 8B46     		mov	fp, r1
 1909 0014 8246     		mov	r10, r0
 870:libcanard/canard.c **** 
 1910              		.loc 1 870 0
 1911 0016 11F0604F 		tst	r1, #-536870912
 1912 001a 15D1     		bne	.L203
 872:libcanard/canard.c ****     {
 1913              		.loc 1 872 0
 1914 001c 009B     		ldr	r3, [sp]
 1915              	.LVL249:
 1916 001e 002B     		cmp	r3, #0
 1917 0020 76D0     		beq	.L195
 877:libcanard/canard.c ****     {
 1918              		.loc 1 877 0
 1919 0022 0DB1     		cbz	r5, .L187
 877:libcanard/canard.c ****     {
 1920              		.loc 1 877 0 is_stmt 0 discriminator 1
 1921 0024 002E     		cmp	r6, #0
 1922 0026 76D0     		beq	.L196
 1923              	.L187:
 1924              	.LVL250:
 884:libcanard/canard.c ****     {
 1925              		.loc 1 884 0 is_stmt 1
 1926 0028 072D     		cmp	r5, #7
 1927 002a 14D9     		bls	.L204
 1928 002c 4FF08009 		mov	r9, #128
 1929 0030 4FF00008 		mov	r8, #0
 1930 0034 4446     		mov	r4, r8
 1931 0036 4746     		mov	r7, r8
 1932 0038 57E0     		b	.L188
 1933              	.LVL251:
 1934              	.L202:
 869:libcanard/canard.c ****     CANARD_ASSERT((can_id & CANARD_CAN_EXT_ID_MASK) == can_id);            // Flags must be cleared
 1935              		.loc 1 869 0 discriminator 1
 1936 003a 3D4B     		ldr	r3, .L206
 1937              	.LVL252:
ARM GAS  /tmp/ccbnltLA.s 			page 66


 1938 003c 3D4A     		ldr	r2, .L206+4
 1939              	.LVL253:
 1940 003e 40F26531 		movw	r1, #869
 1941              	.LVL254:
 1942 0042 3D48     		ldr	r0, .L206+8
 1943              	.LVL255:
 1944 0044 FFF7FEFF 		bl	__assert_func
 1945              	.LVL256:
 1946              	.L203:
 870:libcanard/canard.c **** 
 1947              		.loc 1 870 0 discriminator 1
 1948 0048 3C4B     		ldr	r3, .L206+12
 1949              	.LVL257:
 1950 004a 3A4A     		ldr	r2, .L206+4
 1951              	.LVL258:
 1952 004c 40F26631 		movw	r1, #870
 1953              	.LVL259:
 1954 0050 3948     		ldr	r0, .L206+8
 1955              	.LVL260:
 1956 0052 FFF7FEFF 		bl	__assert_func
 1957              	.LVL261:
 1958              	.L204:
 1959              	.LBB28:
 886:libcanard/canard.c ****         if (queue_item == NULL)
 1960              		.loc 1 886 0
 1961 0056 0AF10C00 		add	r0, r10, #12
 1962              	.LVL262:
 1963 005a FFF7FEFF 		bl	createTxItem
 1964              	.LVL263:
 887:libcanard/canard.c ****         {
 1965              		.loc 1 887 0
 1966 005e 0446     		mov	r4, r0
 1967 0060 0028     		cmp	r0, #0
 1968 0062 5BD0     		beq	.L198
 892:libcanard/canard.c **** 
 1969              		.loc 1 892 0
 1970 0064 2A46     		mov	r2, r5
 1971 0066 3146     		mov	r1, r6
 1972 0068 0830     		adds	r0, r0, #8
 1973              	.LVL264:
 1974 006a FFF7FEFF 		bl	memcpy
 1975              	.LVL265:
 894:libcanard/canard.c ****         queue_item->frame.data[payload_len] = (uint8_t)(0xC0U | (*transfer_id & 31U));
 1976              		.loc 1 894 0
 1977 006e 6B1C     		adds	r3, r5, #1
 1978 0070 2374     		strb	r3, [r4, #16]
 895:libcanard/canard.c ****         queue_item->frame.id = can_id | CANARD_CAN_FRAME_EFF;
 1979              		.loc 1 895 0
 1980 0072 009B     		ldr	r3, [sp]
 1981 0074 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1982 0076 03F01F03 		and	r3, r3, #31
 1983 007a 43F0C003 		orr	r3, r3, #192
 1984 007e 2544     		add	r5, r5, r4
 1985 0080 2B72     		strb	r3, [r5, #8]
 896:libcanard/canard.c **** 
 1986              		.loc 1 896 0
 1987 0082 4BF00043 		orr	r3, fp, #-2147483648
ARM GAS  /tmp/ccbnltLA.s 			page 67


 1988 0086 6360     		str	r3, [r4, #4]
 898:libcanard/canard.c ****         result++;
 1989              		.loc 1 898 0
 1990 0088 2146     		mov	r1, r4
 1991 008a 5046     		mov	r0, r10
 1992 008c FFF7FEFF 		bl	pushTxQueue
 1993              	.LVL266:
 899:libcanard/canard.c ****     }
 1994              		.loc 1 899 0
 1995 0090 0127     		movs	r7, #1
 1996              	.LBE28:
 1997 0092 48E0     		b	.L186
 1998              	.LVL267:
 1999              	.L200:
 2000              	.LBB29:
 2001              	.LBB30:
 927:libcanard/canard.c ****             }
 2002              		.loc 1 927 0
 2003 0094 0023     		movs	r3, #0
 2004 0096 06E0     		b	.L190
 2005              	.LVL268:
 2006              	.L192:
 932:libcanard/canard.c ****             }
 2007              		.loc 1 932 0 discriminator 3
 2008 0098 305D     		ldrb	r0, [r6, r4]	@ zero_extendqisi2
 2009 009a CA18     		adds	r2, r1, r3
 2010 009c 1072     		strb	r0, [r2, #8]
 930:libcanard/canard.c ****             {
 2011              		.loc 1 930 0 discriminator 3
 2012 009e 0133     		adds	r3, r3, #1
 2013              	.LVL269:
 2014 00a0 DBB2     		uxtb	r3, r3
 2015              	.LVL270:
 2016 00a2 0134     		adds	r4, r4, #1
 2017              	.LVL271:
 2018 00a4 A4B2     		uxth	r4, r4
 2019              	.LVL272:
 2020              	.L190:
 930:libcanard/canard.c ****             {
 2021              		.loc 1 930 0 is_stmt 0 discriminator 1
 2022 00a6 062B     		cmp	r3, #6
 2023 00a8 01D8     		bhi	.L191
 930:libcanard/canard.c ****             {
 2024              		.loc 1 930 0 discriminator 2
 2025 00aa AC42     		cmp	r4, r5
 2026 00ac F4D3     		bcc	.L192
 2027              	.L191:
 935:libcanard/canard.c **** 
 2028              		.loc 1 935 0 is_stmt 1
 2029 00ae AC42     		cmp	r4, r5
 2030 00b0 2BD0     		beq	.L205
 2031              	.LVL273:
 2032              	.L193:
 937:libcanard/canard.c ****             queue_item->frame.id = can_id | CANARD_CAN_FRAME_EFF;
 2033              		.loc 1 937 0 discriminator 4
 2034 00b2 4FEA4812 		lsl	r2, r8, #5
 2035 00b6 D2B2     		uxtb	r2, r2
ARM GAS  /tmp/ccbnltLA.s 			page 68


 2036 00b8 49EA0209 		orr	r9, r9, r2
 2037              	.LVL274:
 2038 00bc 009A     		ldr	r2, [sp]
 2039 00be 1278     		ldrb	r2, [r2]	@ zero_extendqisi2
 2040 00c0 02F01F02 		and	r2, r2, #31
 2041 00c4 49EA0209 		orr	r9, r9, r2
 2042 00c8 CA18     		adds	r2, r1, r3
 2043 00ca 82F80890 		strb	r9, [r2, #8]
 938:libcanard/canard.c ****             queue_item->frame.data_len = (uint8_t)(i + 1);
 2044              		.loc 1 938 0 discriminator 4
 2045 00ce 4BF00042 		orr	r2, fp, #-2147483648
 2046 00d2 4A60     		str	r2, [r1, #4]
 939:libcanard/canard.c ****             pushTxQueue(ins, queue_item);
 2047              		.loc 1 939 0 discriminator 4
 2048 00d4 0133     		adds	r3, r3, #1
 2049              	.LVL275:
 2050 00d6 0B74     		strb	r3, [r1, #16]
 940:libcanard/canard.c **** 
 2051              		.loc 1 940 0 discriminator 4
 2052 00d8 5046     		mov	r0, r10
 2053 00da FFF7FEFF 		bl	pushTxQueue
 2054              	.LVL276:
 942:libcanard/canard.c ****             toggle ^= 1;
 2055              		.loc 1 942 0 discriminator 4
 2056 00de 0137     		adds	r7, r7, #1
 2057              	.LVL277:
 2058 00e0 3FB2     		sxth	r7, r7
 2059              	.LVL278:
 943:libcanard/canard.c ****             sot_eot = 0;
 2060              		.loc 1 943 0 discriminator 4
 2061 00e2 88F00108 		eor	r8, r8, #1
 2062              	.LVL279:
 944:libcanard/canard.c ****         }
 2063              		.loc 1 944 0 discriminator 4
 2064 00e6 4FF00009 		mov	r9, #0
 2065              	.LVL280:
 2066              	.L188:
 2067              	.LBE30:
 909:libcanard/canard.c ****         {
 2068              		.loc 1 909 0
 2069 00ea AC42     		cmp	r4, r5
 2070 00ec 1BD0     		beq	.L186
 2071              	.LBB31:
 911:libcanard/canard.c ****             if (queue_item == NULL)
 2072              		.loc 1 911 0
 2073 00ee 0AF10C00 		add	r0, r10, #12
 2074 00f2 FFF7FEFF 		bl	createTxItem
 2075              	.LVL281:
 912:libcanard/canard.c ****             {
 2076              		.loc 1 912 0
 2077 00f6 0146     		mov	r1, r0
 2078 00f8 98B1     		cbz	r0, .L199
 2079              	.LVL282:
 918:libcanard/canard.c ****             {
 2080              		.loc 1 918 0
 2081 00fa 002C     		cmp	r4, #0
 2082 00fc CAD1     		bne	.L200
ARM GAS  /tmp/ccbnltLA.s 			page 69


 921:libcanard/canard.c ****                 queue_item->frame.data[1] = (uint8_t) (crc >> 8U);
 2083              		.loc 1 921 0
 2084 00fe 019A     		ldr	r2, [sp, #4]
 2085 0100 0A72     		strb	r2, [r1, #8]
 922:libcanard/canard.c ****                 i = 2;
 2086              		.loc 1 922 0
 2087 0102 130A     		lsrs	r3, r2, #8
 2088 0104 4372     		strb	r3, [r0, #9]
 2089              	.LVL283:
 923:libcanard/canard.c ****             }
 2090              		.loc 1 923 0
 2091 0106 0223     		movs	r3, #2
 2092 0108 CDE7     		b	.L190
 2093              	.LVL284:
 2094              	.L205:
 935:libcanard/canard.c **** 
 2095              		.loc 1 935 0
 2096 010a 4FF04009 		mov	r9, #64
 2097              	.LVL285:
 2098 010e D0E7     		b	.L193
 2099              	.LVL286:
 2100              	.L195:
 2101              	.LBE31:
 2102              	.LBE29:
 874:libcanard/canard.c ****     }
 2103              		.loc 1 874 0
 2104 0110 6FF00107 		mvn	r7, #1
 2105 0114 07E0     		b	.L186
 2106              	.L196:
 879:libcanard/canard.c ****     }
 2107              		.loc 1 879 0
 2108 0116 6FF00107 		mvn	r7, #1
 2109 011a 04E0     		b	.L186
 2110              	.LVL287:
 2111              	.L198:
 2112              	.LBB33:
 889:libcanard/canard.c ****         }
 2113              		.loc 1 889 0
 2114 011c 6FF00207 		mvn	r7, #2
 2115 0120 01E0     		b	.L186
 2116              	.LVL288:
 2117              	.L199:
 2118              	.LBE33:
 2119              	.LBB34:
 2120              	.LBB32:
 914:libcanard/canard.c ****             }
 2121              		.loc 1 914 0
 2122 0122 6FF00207 		mvn	r7, #2
 2123              	.LVL289:
 2124              	.L186:
 2125              	.LBE32:
 2126              	.LBE34:
 949:libcanard/canard.c **** 
 2127              		.loc 1 949 0
 2128 0126 3846     		mov	r0, r7
 2129 0128 03B0     		add	sp, sp, #12
 2130              	.LCFI24:
ARM GAS  /tmp/ccbnltLA.s 			page 70


 2131              		.cfi_def_cfa_offset 36
 2132              	.LVL290:
 2133              		@ sp needed
 2134 012a BDE8F08F 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
 2135              	.LVL291:
 2136              	.L207:
 2137 012e 00BF     		.align	2
 2138              	.L206:
 2139 0130 00000000 		.word	.LC0
 2140 0134 00000000 		.word	.LANCHOR7
 2141 0138 14000000 		.word	.LC1
 2142 013c 00000000 		.word	.LC17
 2143              		.cfi_endproc
 2144              	.LFE18:
 2146              		.section	.text.createRxState,"ax",%progbits
 2147              		.align	1
 2148              		.syntax unified
 2149              		.thumb
 2150              		.thumb_func
 2151              		.fpu softvfp
 2153              	createRxState:
 2154              	.LFB28:
1178:libcanard/canard.c ****     CanardRxState init = {
 2155              		.loc 1 1178 0
 2156              		.cfi_startproc
 2157              		@ args = 0, pretend = 0, frame = 32
 2158              		@ frame_needed = 0, uses_anonymous_args = 0
 2159              	.LVL292:
 2160 0000 30B5     		push	{r4, r5, lr}
 2161              	.LCFI25:
 2162              		.cfi_def_cfa_offset 12
 2163              		.cfi_offset 4, -12
 2164              		.cfi_offset 5, -8
 2165              		.cfi_offset 14, -4
 2166 0002 89B0     		sub	sp, sp, #36
 2167              	.LCFI26:
 2168              		.cfi_def_cfa_offset 48
 2169 0004 0446     		mov	r4, r0
 2170 0006 0D46     		mov	r5, r1
1179:libcanard/canard.c ****         .next = NULL,
 2171              		.loc 1 1179 0
 2172 0008 2022     		movs	r2, #32
 2173 000a 0021     		movs	r1, #0
 2174              	.LVL293:
 2175 000c 6846     		mov	r0, sp
 2176              	.LVL294:
 2177 000e FFF7FEFF 		bl	memset
 2178              	.LVL295:
 2179 0012 0495     		str	r5, [sp, #16]
1185:libcanard/canard.c ****     if (state == NULL)
 2180              		.loc 1 1185 0
 2181 0014 2046     		mov	r0, r4
 2182 0016 FFF7FEFF 		bl	allocateBlock
 2183              	.LVL296:
1186:libcanard/canard.c ****     {
 2184              		.loc 1 1186 0
 2185 001a 0546     		mov	r5, r0
ARM GAS  /tmp/ccbnltLA.s 			page 71


 2186              	.LVL297:
 2187 001c 50B1     		cbz	r0, .L208
1190:libcanard/canard.c **** 
 2188              		.loc 1 1190 0
 2189 001e 6C46     		mov	r4, sp
 2190              	.LVL298:
 2191 0020 0FCC     		ldmia	r4!, {r0, r1, r2, r3}
 2192              	.LVL299:
 2193 0022 2860     		str	r0, [r5]	@ unaligned
 2194 0024 6960     		str	r1, [r5, #4]	@ unaligned
 2195 0026 AA60     		str	r2, [r5, #8]	@ unaligned
 2196 0028 EB60     		str	r3, [r5, #12]	@ unaligned
 2197 002a 0FCC     		ldmia	r4!, {r0, r1, r2, r3}
 2198 002c 2861     		str	r0, [r5, #16]	@ unaligned
 2199 002e 6961     		str	r1, [r5, #20]	@ unaligned
 2200 0030 AA61     		str	r2, [r5, #24]	@ unaligned
 2201 0032 EB61     		str	r3, [r5, #28]	@ unaligned
 2202              	.L208:
1193:libcanard/canard.c **** 
 2203              		.loc 1 1193 0
 2204 0034 2846     		mov	r0, r5
 2205 0036 09B0     		add	sp, sp, #36
 2206              	.LCFI27:
 2207              		.cfi_def_cfa_offset 12
 2208              		@ sp needed
 2209 0038 30BD     		pop	{r4, r5, pc}
 2210              		.cfi_endproc
 2211              	.LFE28:
 2213              		.section	.text.prependRxState,"ax",%progbits
 2214              		.align	1
 2215              		.syntax unified
 2216              		.thumb
 2217              		.thumb_func
 2218              		.fpu softvfp
 2220              	prependRxState:
 2221              	.LFB27:
1164:libcanard/canard.c ****     CanardRxState* state = createRxState(&ins->allocator, transfer_descriptor);
 2222              		.loc 1 1164 0
 2223              		.cfi_startproc
 2224              		@ args = 0, pretend = 0, frame = 0
 2225              		@ frame_needed = 0, uses_anonymous_args = 0
 2226              	.LVL300:
 2227 0000 10B5     		push	{r4, lr}
 2228              	.LCFI28:
 2229              		.cfi_def_cfa_offset 8
 2230              		.cfi_offset 4, -8
 2231              		.cfi_offset 14, -4
 2232 0002 0446     		mov	r4, r0
1165:libcanard/canard.c **** 
 2233              		.loc 1 1165 0
 2234 0004 0C30     		adds	r0, r0, #12
 2235              	.LVL301:
 2236 0006 FFF7FEFF 		bl	createRxState
 2237              	.LVL302:
1167:libcanard/canard.c ****     {
 2238              		.loc 1 1167 0
 2239 000a 0346     		mov	r3, r0
ARM GAS  /tmp/ccbnltLA.s 			page 72


 2240 000c 10B1     		cbz	r0, .L211
1172:libcanard/canard.c ****     ins->rx_states = state;
 2241              		.loc 1 1172 0
 2242 000e A269     		ldr	r2, [r4, #24]
 2243 0010 0260     		str	r2, [r0]
1173:libcanard/canard.c ****     return state;
 2244              		.loc 1 1173 0
 2245 0012 A061     		str	r0, [r4, #24]
 2246              	.L211:
1175:libcanard/canard.c **** 
 2247              		.loc 1 1175 0
 2248 0014 1846     		mov	r0, r3
 2249              	.LVL303:
 2250 0016 10BD     		pop	{r4, pc}
 2251              		.cfi_endproc
 2252              	.LFE27:
 2254              		.section	.text.traverseRxStates,"ax",%progbits
 2255              		.align	1
 2256              		.syntax unified
 2257              		.thumb
 2258              		.thumb_func
 2259              		.fpu softvfp
 2261              	traverseRxStates:
 2262              	.LFB25:
1117:libcanard/canard.c ****     CanardRxState* states = ins->rx_states;
 2263              		.loc 1 1117 0
 2264              		.cfi_startproc
 2265              		@ args = 0, pretend = 0, frame = 0
 2266              		@ frame_needed = 0, uses_anonymous_args = 0
 2267              	.LVL304:
 2268 0000 38B5     		push	{r3, r4, r5, lr}
 2269              	.LCFI29:
 2270              		.cfi_def_cfa_offset 16
 2271              		.cfi_offset 3, -16
 2272              		.cfi_offset 4, -12
 2273              		.cfi_offset 5, -8
 2274              		.cfi_offset 14, -4
 2275 0002 0446     		mov	r4, r0
 2276 0004 0D46     		mov	r5, r1
1118:libcanard/canard.c **** 
 2277              		.loc 1 1118 0
 2278 0006 8069     		ldr	r0, [r0, #24]
 2279              	.LVL305:
1120:libcanard/canard.c ****     {
 2280              		.loc 1 1120 0
 2281 0008 28B1     		cbz	r0, .L218
1133:libcanard/canard.c ****     if (states != NULL)
 2282              		.loc 1 1133 0
 2283 000a FFF7FEFF 		bl	findRxState
 2284              	.LVL306:
1134:libcanard/canard.c ****     {
 2285              		.loc 1 1134 0
 2286 000e 0346     		mov	r3, r0
 2287 0010 50B1     		cbz	r0, .L219
 2288              	.LVL307:
 2289              	.L214:
1142:libcanard/canard.c **** 
ARM GAS  /tmp/ccbnltLA.s 			page 73


 2290              		.loc 1 1142 0
 2291 0012 1846     		mov	r0, r3
 2292 0014 38BD     		pop	{r3, r4, r5, pc}
 2293              	.LVL308:
 2294              	.L218:
1122:libcanard/canard.c ****         
 2295              		.loc 1 1122 0
 2296 0016 04F10C00 		add	r0, r4, #12
 2297              	.LVL309:
 2298 001a FFF7FEFF 		bl	createRxState
 2299              	.LVL310:
1124:libcanard/canard.c ****         {
 2300              		.loc 1 1124 0
 2301 001e 0346     		mov	r3, r0
 2302 0020 0028     		cmp	r0, #0
 2303 0022 F6D0     		beq	.L214
1129:libcanard/canard.c ****         return states;
 2304              		.loc 1 1129 0
 2305 0024 A061     		str	r0, [r4, #24]
1130:libcanard/canard.c ****     }
 2306              		.loc 1 1130 0
 2307 0026 F4E7     		b	.L214
 2308              	.L219:
1140:libcanard/canard.c ****     }
 2309              		.loc 1 1140 0
 2310 0028 2946     		mov	r1, r5
 2311 002a 2046     		mov	r0, r4
 2312              	.LVL311:
 2313 002c FFF7FEFF 		bl	prependRxState
 2314              	.LVL312:
 2315 0030 0346     		mov	r3, r0
 2316 0032 EEE7     		b	.L214
 2317              		.cfi_endproc
 2318              	.LFE25:
 2320              		.section	.text.canardInit,"ax",%progbits
 2321              		.align	1
 2322              		.global	canardInit
 2323              		.syntax unified
 2324              		.thumb
 2325              		.thumb_func
 2326              		.fpu softvfp
 2328              	canardInit:
 2329              	.LFB0:
  78:libcanard/canard.c ****     CANARD_ASSERT(out_ins != NULL);
 2330              		.loc 1 78 0
 2331              		.cfi_startproc
 2332              		@ args = 8, pretend = 0, frame = 0
 2333              		@ frame_needed = 0, uses_anonymous_args = 0
 2334              	.LVL313:
 2335 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 2336              	.LCFI30:
 2337              		.cfi_def_cfa_offset 24
 2338              		.cfi_offset 3, -24
 2339              		.cfi_offset 4, -20
 2340              		.cfi_offset 5, -16
 2341              		.cfi_offset 6, -12
 2342              		.cfi_offset 7, -8
ARM GAS  /tmp/ccbnltLA.s 			page 74


 2343              		.cfi_offset 14, -4
  79:libcanard/canard.c **** 
 2344              		.loc 1 79 0
 2345 0002 D8B1     		cbz	r0, .L225
 2346 0004 0E46     		mov	r6, r1
 2347 0006 1546     		mov	r5, r2
 2348 0008 1F46     		mov	r7, r3
 2349 000a 0446     		mov	r4, r0
  89:libcanard/canard.c **** 
 2350              		.loc 1 89 0
 2351 000c 2422     		movs	r2, #36
 2352              	.LVL314:
 2353 000e 0021     		movs	r1, #0
 2354              	.LVL315:
 2355 0010 FFF7FEFF 		bl	memset
 2356              	.LVL316:
  91:libcanard/canard.c ****     out_ins->on_reception = on_reception;
 2357              		.loc 1 91 0
 2358 0014 0023     		movs	r3, #0
 2359 0016 2370     		strb	r3, [r4]
  92:libcanard/canard.c ****     out_ins->should_accept = should_accept;
 2360              		.loc 1 92 0
 2361 0018 A760     		str	r7, [r4, #8]
  93:libcanard/canard.c ****     out_ins->rx_states = NULL;
 2362              		.loc 1 93 0
 2363 001a 069B     		ldr	r3, [sp, #24]
 2364 001c 6360     		str	r3, [r4, #4]
  96:libcanard/canard.c **** 
 2365              		.loc 1 96 0
 2366 001e 079B     		ldr	r3, [sp, #28]
 2367 0020 2362     		str	r3, [r4, #32]
  98:libcanard/canard.c ****     if (pool_capacity > 0xFFFFU)
 2368              		.loc 1 98 0
 2369 0022 6A09     		lsrs	r2, r5, #5
 2370              	.LVL317:
  99:libcanard/canard.c ****     {
 2371              		.loc 1 99 0
 2372 0024 B2F5803F 		cmp	r2, #65536
 2373 0028 01D3     		bcc	.L222
 101:libcanard/canard.c ****     }
 2374              		.loc 1 101 0
 2375 002a 4FF6FF72 		movw	r2, #65535
 2376              	.LVL318:
 2377              	.L222:
 104:libcanard/canard.c **** }
 2378              		.loc 1 104 0
 2379 002e 92B2     		uxth	r2, r2
 2380              	.LVL319:
 2381 0030 3146     		mov	r1, r6
 2382 0032 04F10C00 		add	r0, r4, #12
 2383 0036 FFF7FEFF 		bl	initPoolAllocator
 2384              	.LVL320:
 2385 003a F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 2386              	.LVL321:
 2387              	.L225:
  79:libcanard/canard.c **** 
 2388              		.loc 1 79 0 discriminator 1
ARM GAS  /tmp/ccbnltLA.s 			page 75


 2389 003c 024B     		ldr	r3, .L226
 2390              	.LVL322:
 2391 003e 034A     		ldr	r2, .L226+4
 2392              	.LVL323:
 2393 0040 4F21     		movs	r1, #79
 2394              	.LVL324:
 2395 0042 0348     		ldr	r0, .L226+8
 2396              	.LVL325:
 2397 0044 FFF7FEFF 		bl	__assert_func
 2398              	.LVL326:
 2399              	.L227:
 2400              		.align	2
 2401              	.L226:
 2402 0048 00000000 		.word	.LC18
 2403 004c 00000000 		.word	.LANCHOR8
 2404 0050 14000000 		.word	.LC1
 2405              		.cfi_endproc
 2406              	.LFE0:
 2408              		.section	.text.canardGetUserReference,"ax",%progbits
 2409              		.align	1
 2410              		.global	canardGetUserReference
 2411              		.syntax unified
 2412              		.thumb
 2413              		.thumb_func
 2414              		.fpu softvfp
 2416              	canardGetUserReference:
 2417              	.LFB1:
 108:libcanard/canard.c ****     CANARD_ASSERT(ins != NULL);
 2418              		.loc 1 108 0
 2419              		.cfi_startproc
 2420              		@ args = 0, pretend = 0, frame = 0
 2421              		@ frame_needed = 0, uses_anonymous_args = 0
 2422              	.LVL327:
 2423 0000 08B5     		push	{r3, lr}
 2424              	.LCFI31:
 2425              		.cfi_def_cfa_offset 8
 2426              		.cfi_offset 3, -8
 2427              		.cfi_offset 14, -4
 109:libcanard/canard.c ****     return ins->user_reference;
 2428              		.loc 1 109 0
 2429 0002 08B1     		cbz	r0, .L231
 111:libcanard/canard.c **** 
 2430              		.loc 1 111 0
 2431 0004 006A     		ldr	r0, [r0, #32]
 2432              	.LVL328:
 2433 0006 08BD     		pop	{r3, pc}
 2434              	.LVL329:
 2435              	.L231:
 109:libcanard/canard.c ****     return ins->user_reference;
 2436              		.loc 1 109 0 discriminator 1
 2437 0008 024B     		ldr	r3, .L232
 2438 000a 034A     		ldr	r2, .L232+4
 2439 000c 6D21     		movs	r1, #109
 2440 000e 0348     		ldr	r0, .L232+8
 2441              	.LVL330:
 2442 0010 FFF7FEFF 		bl	__assert_func
 2443              	.LVL331:
ARM GAS  /tmp/ccbnltLA.s 			page 76


 2444              	.L233:
 2445              		.align	2
 2446              	.L232:
 2447 0014 00000000 		.word	.LC0
 2448 0018 00000000 		.word	.LANCHOR9
 2449 001c 14000000 		.word	.LC1
 2450              		.cfi_endproc
 2451              	.LFE1:
 2453              		.section	.text.canardSetLocalNodeID,"ax",%progbits
 2454              		.align	1
 2455              		.global	canardSetLocalNodeID
 2456              		.syntax unified
 2457              		.thumb
 2458              		.thumb_func
 2459              		.fpu softvfp
 2461              	canardSetLocalNodeID:
 2462              	.LFB2:
 114:libcanard/canard.c ****     CANARD_ASSERT(ins != NULL);
 2463              		.loc 1 114 0
 2464              		.cfi_startproc
 2465              		@ args = 0, pretend = 0, frame = 0
 2466              		@ frame_needed = 0, uses_anonymous_args = 0
 2467              	.LVL332:
 2468 0000 08B5     		push	{r3, lr}
 2469              	.LCFI32:
 2470              		.cfi_def_cfa_offset 8
 2471              		.cfi_offset 3, -8
 2472              		.cfi_offset 14, -4
 115:libcanard/canard.c **** 
 2473              		.loc 1 115 0
 2474 0002 38B1     		cbz	r0, .L239
 117:libcanard/canard.c ****         (self_node_id >= CANARD_MIN_NODE_ID) &&
 2475              		.loc 1 117 0
 2476 0004 0278     		ldrb	r2, [r0]	@ zero_extendqisi2
 2477 0006 5AB9     		cbnz	r2, .L236
 117:libcanard/canard.c ****         (self_node_id >= CANARD_MIN_NODE_ID) &&
 2478              		.loc 1 117 0 is_stmt 0 discriminator 1
 2479 0008 51B1     		cbz	r1, .L236
 118:libcanard/canard.c ****         (self_node_id <= CANARD_MAX_NODE_ID))
 2480              		.loc 1 118 0 is_stmt 1
 2481 000a 11F0800F 		tst	r1, #128
 2482 000e 07D1     		bne	.L236
 121:libcanard/canard.c ****     }
 2483              		.loc 1 121 0
 2484 0010 0170     		strb	r1, [r0]
 127:libcanard/canard.c **** 
 2485              		.loc 1 127 0
 2486 0012 08BD     		pop	{r3, pc}
 2487              	.L239:
 115:libcanard/canard.c **** 
 2488              		.loc 1 115 0 discriminator 1
 2489 0014 054B     		ldr	r3, .L240
 2490 0016 064A     		ldr	r2, .L240+4
 2491 0018 7321     		movs	r1, #115
 2492              	.LVL333:
 2493 001a 0648     		ldr	r0, .L240+8
 2494              	.LVL334:
ARM GAS  /tmp/ccbnltLA.s 			page 77


 2495 001c FFF7FEFF 		bl	__assert_func
 2496              	.LVL335:
 2497              	.L236:
 125:libcanard/canard.c ****     }
 2498              		.loc 1 125 0
 2499 0020 054B     		ldr	r3, .L240+12
 2500 0022 034A     		ldr	r2, .L240+4
 2501 0024 7D21     		movs	r1, #125
 2502              	.LVL336:
 2503 0026 0348     		ldr	r0, .L240+8
 2504              	.LVL337:
 2505 0028 FFF7FEFF 		bl	__assert_func
 2506              	.LVL338:
 2507              	.L241:
 2508              		.align	2
 2509              	.L240:
 2510 002c 00000000 		.word	.LC0
 2511 0030 00000000 		.word	.LANCHOR10
 2512 0034 14000000 		.word	.LC1
 2513 0038 00000000 		.word	.LC19
 2514              		.cfi_endproc
 2515              	.LFE2:
 2517              		.section	.text.canardGetLocalNodeID,"ax",%progbits
 2518              		.align	1
 2519              		.global	canardGetLocalNodeID
 2520              		.syntax unified
 2521              		.thumb
 2522              		.thumb_func
 2523              		.fpu softvfp
 2525              	canardGetLocalNodeID:
 2526              	.LFB3:
 130:libcanard/canard.c ****     return ins->node_id;
 2527              		.loc 1 130 0
 2528              		.cfi_startproc
 2529              		@ args = 0, pretend = 0, frame = 0
 2530              		@ frame_needed = 0, uses_anonymous_args = 0
 2531              		@ link register save eliminated.
 2532              	.LVL339:
 132:libcanard/canard.c **** 
 2533              		.loc 1 132 0
 2534 0000 0078     		ldrb	r0, [r0]	@ zero_extendqisi2
 2535              	.LVL340:
 2536 0002 7047     		bx	lr
 2537              		.cfi_endproc
 2538              	.LFE3:
 2540              		.section	.text.canardBroadcast,"ax",%progbits
 2541              		.align	1
 2542              		.global	canardBroadcast
 2543              		.syntax unified
 2544              		.thumb
 2545              		.thumb_func
 2546              		.fpu softvfp
 2548              	canardBroadcast:
 2549              	.LFB4:
 141:libcanard/canard.c ****     if (payload == NULL && payload_len > 0)
 2550              		.loc 1 141 0
 2551              		.cfi_startproc
ARM GAS  /tmp/ccbnltLA.s 			page 78


 2552              		@ args = 20, pretend = 0, frame = 8
 2553              		@ frame_needed = 0, uses_anonymous_args = 0
 2554              	.LVL341:
 2555 0000 2DE9F04A 		push	{r4, r5, r6, r7, r9, fp, lr}
 2556              	.LCFI33:
 2557              		.cfi_def_cfa_offset 28
 2558              		.cfi_offset 4, -28
 2559              		.cfi_offset 5, -24
 2560              		.cfi_offset 6, -20
 2561              		.cfi_offset 7, -16
 2562              		.cfi_offset 9, -12
 2563              		.cfi_offset 11, -8
 2564              		.cfi_offset 14, -4
 2565 0004 85B0     		sub	sp, sp, #20
 2566              	.LCFI34:
 2567              		.cfi_def_cfa_offset 48
 2568 0006 BDF83040 		ldrh	r4, [sp, #48]
 2569 000a 9DF838B0 		ldrb	fp, [sp, #56]	@ zero_extendqisi2
 2570 000e 0F9E     		ldr	r6, [sp, #60]
 2571 0010 BDF84070 		ldrh	r7, [sp, #64]
 142:libcanard/canard.c ****     {
 2572              		.loc 1 142 0
 2573 0014 9EB3     		cbz	r6, .L254
 2574              	.L244:
 146:libcanard/canard.c ****     {
 2575              		.loc 1 146 0
 2576 0016 BBF11F0F 		cmp	fp, #31
 2577 001a 4BD8     		bhi	.L249
 2578 001c CDE90223 		strd	r2, [sp, #8]
 2579 0020 0546     		mov	r5, r0
 2580              	.LVL342:
 154:libcanard/canard.c ****     {
 2581              		.loc 1 154 0
 2582 0022 FFF7FEFF 		bl	canardGetLocalNodeID
 2583              	.LVL343:
 2584 0026 8146     		mov	r9, r0
 2585 0028 70BB     		cbnz	r0, .L246
 2586              	.LBB35:
 156:libcanard/canard.c ****         {
 2587              		.loc 1 156 0
 2588 002a 072F     		cmp	r7, #7
 2589 002c 45D8     		bhi	.L250
 163:libcanard/canard.c ****         {
 2590              		.loc 1 163 0
 2591 002e 34F00303 		bics	r3, r4, #3
 2592 0032 45D1     		bne	.L251
 169:libcanard/canard.c ****         can_id = ((uint32_t) priority << 24U) | ((uint32_t) discriminator << 9U) |
 2593              		.loc 1 169 0
 2594 0034 3A46     		mov	r2, r7
 2595 0036 3146     		mov	r1, r6
 2596 0038 4FF6FF70 		movw	r0, #65535
 2597 003c FFF7FEFF 		bl	crcAdd
 2598              	.LVL344:
 2599 0040 20F00100 		bic	r0, r0, #1
 2600 0044 4004     		lsls	r0, r0, #17
 2601 0046 400C     		lsrs	r0, r0, #17
 2602              	.LVL345:
ARM GAS  /tmp/ccbnltLA.s 			page 79


 170:libcanard/canard.c ****                  ((uint32_t) (data_type_id & DTIDMask) << 8U) | (uint32_t) canardGetLocalNodeID(ins
 2603              		.loc 1 170 0
 2604 0048 4002     		lsls	r0, r0, #9
 2605              	.LVL346:
 2606 004a 40EA0B6B 		orr	fp, r0, fp, lsl #24
 171:libcanard/canard.c ****     }
 2607              		.loc 1 171 0
 2608 004e 2402     		lsls	r4, r4, #8
 2609 0050 04F44074 		and	r4, r4, #768
 170:libcanard/canard.c ****                  ((uint32_t) (data_type_id & DTIDMask) << 8U) | (uint32_t) canardGetLocalNodeID(ins
 2610              		.loc 1 170 0
 2611 0054 4BEA0404 		orr	r4, fp, r4
 2612 0058 44EA0909 		orr	r9, r4, r9
 2613              	.LVL347:
 2614              	.LBE35:
 152:libcanard/canard.c **** 
 2615              		.loc 1 152 0
 2616 005c 4FF6FF73 		movw	r3, #65535
 2617              	.LVL348:
 2618              	.L247:
 184:libcanard/canard.c **** 
 2619              		.loc 1 184 0
 2620 0060 0197     		str	r7, [sp, #4]
 2621 0062 0096     		str	r6, [sp]
 2622 0064 0D9A     		ldr	r2, [sp, #52]
 2623 0066 4946     		mov	r1, r9
 2624 0068 2846     		mov	r0, r5
 2625 006a FFF7FEFF 		bl	enqueueTxFrames
 2626              	.LVL349:
 2627 006e 0446     		mov	r4, r0
 2628              	.LVL350:
 186:libcanard/canard.c **** 
 2629              		.loc 1 186 0
 2630 0070 0D98     		ldr	r0, [sp, #52]
 2631 0072 FFF7FEFF 		bl	incrementTransferID
 2632              	.LVL351:
 188:libcanard/canard.c **** }
 2633              		.loc 1 188 0
 2634 0076 2046     		mov	r0, r4
 2635              	.LVL352:
 2636              	.L245:
 189:libcanard/canard.c **** 
 2637              		.loc 1 189 0
 2638 0078 05B0     		add	sp, sp, #20
 2639              	.LCFI35:
 2640              		.cfi_remember_state
 2641              		.cfi_def_cfa_offset 28
 2642              		@ sp needed
 2643 007a BDE8F08A 		pop	{r4, r5, r6, r7, r9, fp, pc}
 2644              	.LVL353:
 2645              	.L254:
 2646              	.LCFI36:
 2647              		.cfi_restore_state
 142:libcanard/canard.c ****     {
 2648              		.loc 1 142 0 discriminator 1
 2649 007e 002F     		cmp	r7, #0
 2650 0080 C9D0     		beq	.L244
ARM GAS  /tmp/ccbnltLA.s 			page 80


 144:libcanard/canard.c ****     }
 2651              		.loc 1 144 0
 2652 0082 6FF00100 		mvn	r0, #1
 2653              	.LVL354:
 2654 0086 F7E7     		b	.L245
 2655              	.LVL355:
 2656              	.L246:
 175:libcanard/canard.c **** 
 2657              		.loc 1 175 0
 2658 0088 2402     		lsls	r4, r4, #8
 2659 008a 44EA0B64 		orr	r4, r4, fp, lsl #24
 2660 008e 44EA0009 		orr	r9, r4, r0
 2661              	.LVL356:
 177:libcanard/canard.c ****         {
 2662              		.loc 1 177 0
 2663 0092 072F     		cmp	r7, #7
 2664 0094 0BD9     		bls	.L252
 179:libcanard/canard.c ****             crc = crcAdd(crc, payload, payload_len);
 2665              		.loc 1 179 0
 2666 0096 DDE90223 		ldrd	r2, [sp, #8]
 2667 009a 4FF6FF70 		movw	r0, #65535
 2668 009e FFF7FEFF 		bl	crcAddSignature
 2669              	.LVL357:
 180:libcanard/canard.c ****         }
 2670              		.loc 1 180 0
 2671 00a2 3A46     		mov	r2, r7
 2672 00a4 3146     		mov	r1, r6
 2673 00a6 FFF7FEFF 		bl	crcAdd
 2674              	.LVL358:
 2675 00aa 0346     		mov	r3, r0
 2676              	.LVL359:
 2677 00ac D8E7     		b	.L247
 2678              	.LVL360:
 2679              	.L252:
 152:libcanard/canard.c **** 
 2680              		.loc 1 152 0
 2681 00ae 4FF6FF73 		movw	r3, #65535
 2682 00b2 D5E7     		b	.L247
 2683              	.LVL361:
 2684              	.L249:
 148:libcanard/canard.c ****     }
 2685              		.loc 1 148 0
 2686 00b4 6FF00100 		mvn	r0, #1
 2687              	.LVL362:
 2688 00b8 DEE7     		b	.L245
 2689              	.LVL363:
 2690              	.L250:
 2691              	.LBB36:
 158:libcanard/canard.c ****         }
 2692              		.loc 1 158 0
 2693 00ba 6FF00300 		mvn	r0, #3
 2694 00be DBE7     		b	.L245
 2695              	.L251:
 165:libcanard/canard.c ****         }
 2696              		.loc 1 165 0
 2697 00c0 6FF00100 		mvn	r0, #1
 2698 00c4 D8E7     		b	.L245
ARM GAS  /tmp/ccbnltLA.s 			page 81


 2699              	.LBE36:
 2700              		.cfi_endproc
 2701              	.LFE4:
 2703              		.section	.text.canardRequestOrRespond,"ax",%progbits
 2704              		.align	1
 2705              		.global	canardRequestOrRespond
 2706              		.syntax unified
 2707              		.thumb
 2708              		.thumb_func
 2709              		.fpu softvfp
 2711              	canardRequestOrRespond:
 2712              	.LFB5:
 200:libcanard/canard.c ****     if (payload == NULL && payload_len > 0)
 2713              		.loc 1 200 0
 2714              		.cfi_startproc
 2715              		@ args = 24, pretend = 0, frame = 0
 2716              		@ frame_needed = 0, uses_anonymous_args = 0
 2717              	.LVL364:
 2718 0000 2DE9F04F 		push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}
 2719              	.LCFI37:
 2720              		.cfi_def_cfa_offset 36
 2721              		.cfi_offset 4, -36
 2722              		.cfi_offset 5, -32
 2723              		.cfi_offset 6, -28
 2724              		.cfi_offset 7, -24
 2725              		.cfi_offset 8, -20
 2726              		.cfi_offset 9, -16
 2727              		.cfi_offset 10, -12
 2728              		.cfi_offset 11, -8
 2729              		.cfi_offset 14, -4
 2730 0004 83B0     		sub	sp, sp, #12
 2731              	.LCFI38:
 2732              		.cfi_def_cfa_offset 48
 2733 0006 9DF83840 		ldrb	r4, [sp, #56]	@ zero_extendqisi2
 2734 000a 9DF83CA0 		ldrb	r10, [sp, #60]	@ zero_extendqisi2
 2735 000e 109E     		ldr	r6, [sp, #64]
 2736 0010 BDF84470 		ldrh	r7, [sp, #68]
 201:libcanard/canard.c ****     {
 2737              		.loc 1 201 0
 2738 0014 16B3     		cbz	r6, .L265
 2739              	.L256:
 205:libcanard/canard.c ****     {
 2740              		.loc 1 205 0
 2741 0016 1F2C     		cmp	r4, #31
 2742 0018 3AD8     		bhi	.L260
 2743 001a 9046     		mov	r8, r2
 2744 001c 9946     		mov	r9, r3
 2745 001e 8B46     		mov	fp, r1
 2746 0020 0546     		mov	r5, r0
 209:libcanard/canard.c ****     {
 2747              		.loc 1 209 0
 2748 0022 FFF7FEFF 		bl	canardGetLocalNodeID
 2749              	.LVL365:
 2750 0026 B0B3     		cbz	r0, .L261
 214:libcanard/canard.c ****                             ((uint32_t) kind << 15U) | ((uint32_t) destination_node_id << 8U) |
 2751              		.loc 1 214 0
 2752 0028 9DF83030 		ldrb	r3, [sp, #48]	@ zero_extendqisi2
ARM GAS  /tmp/ccbnltLA.s 			page 82


 2753 002c 1B04     		lsls	r3, r3, #16
 2754 002e 43EA0464 		orr	r4, r3, r4, lsl #24
 2755 0032 44EACA34 		orr	r4, r4, r10, lsl #15
 215:libcanard/canard.c ****                             (1U << 7U) | (uint32_t) canardGetLocalNodeID(ins);
 2756              		.loc 1 215 0
 2757 0036 44EA0B24 		orr	r4, r4, fp, lsl #8
 216:libcanard/canard.c ****     uint16_t crc = 0xFFFFU;
 2758              		.loc 1 216 0
 2759 003a 0443     		orrs	r4, r4, r0
 214:libcanard/canard.c ****                             ((uint32_t) kind << 15U) | ((uint32_t) destination_node_id << 8U) |
 2760              		.loc 1 214 0
 2761 003c 44F08004 		orr	r4, r4, #128
 2762              	.LVL366:
 219:libcanard/canard.c ****     {
 2763              		.loc 1 219 0
 2764 0040 072F     		cmp	r7, #7
 2765 0042 10D9     		bls	.L262
 221:libcanard/canard.c ****         crc = crcAdd(crc, payload, payload_len);
 2766              		.loc 1 221 0
 2767 0044 4246     		mov	r2, r8
 2768 0046 4B46     		mov	r3, r9
 2769 0048 4FF6FF70 		movw	r0, #65535
 2770 004c FFF7FEFF 		bl	crcAddSignature
 2771              	.LVL367:
 222:libcanard/canard.c ****     }
 2772              		.loc 1 222 0
 2773 0050 3A46     		mov	r2, r7
 2774 0052 3146     		mov	r1, r6
 2775 0054 FFF7FEFF 		bl	crcAdd
 2776              	.LVL368:
 2777 0058 0346     		mov	r3, r0
 2778              	.LVL369:
 2779 005a 06E0     		b	.L258
 2780              	.LVL370:
 2781              	.L265:
 201:libcanard/canard.c ****     {
 2782              		.loc 1 201 0 discriminator 1
 2783 005c 002F     		cmp	r7, #0
 2784 005e DAD0     		beq	.L256
 203:libcanard/canard.c ****     }
 2785              		.loc 1 203 0
 2786 0060 6FF00100 		mvn	r0, #1
 2787              	.LVL371:
 2788 0064 0CE0     		b	.L257
 2789              	.LVL372:
 2790              	.L262:
 217:libcanard/canard.c **** 
 2791              		.loc 1 217 0
 2792 0066 4FF6FF73 		movw	r3, #65535
 2793              	.LVL373:
 2794              	.L258:
 225:libcanard/canard.c **** 
 2795              		.loc 1 225 0
 2796 006a 0197     		str	r7, [sp, #4]
 2797 006c 0096     		str	r6, [sp]
 2798 006e 0D9A     		ldr	r2, [sp, #52]
 2799 0070 2146     		mov	r1, r4
ARM GAS  /tmp/ccbnltLA.s 			page 83


 2800 0072 2846     		mov	r0, r5
 2801 0074 FFF7FEFF 		bl	enqueueTxFrames
 2802              	.LVL374:
 2803 0078 0446     		mov	r4, r0
 2804              	.LVL375:
 227:libcanard/canard.c ****     {
 2805              		.loc 1 227 0
 2806 007a BAF1010F 		cmp	r10, #1
 2807 007e 02D0     		beq	.L266
 2808              	.LVL376:
 2809              	.L257:
 233:libcanard/canard.c **** 
 2810              		.loc 1 233 0
 2811 0080 03B0     		add	sp, sp, #12
 2812              	.LCFI39:
 2813              		.cfi_remember_state
 2814              		.cfi_def_cfa_offset 36
 2815              		@ sp needed
 2816 0082 BDE8F08F 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
 2817              	.LVL377:
 2818              	.L266:
 2819              	.LCFI40:
 2820              		.cfi_restore_state
 229:libcanard/canard.c ****     }
 2821              		.loc 1 229 0
 2822 0086 0D98     		ldr	r0, [sp, #52]
 2823              	.LVL378:
 2824 0088 FFF7FEFF 		bl	incrementTransferID
 2825              	.LVL379:
 232:libcanard/canard.c **** }
 2826              		.loc 1 232 0
 2827 008c 2046     		mov	r0, r4
 2828 008e F7E7     		b	.L257
 2829              	.LVL380:
 2830              	.L260:
 207:libcanard/canard.c ****     }
 2831              		.loc 1 207 0
 2832 0090 6FF00100 		mvn	r0, #1
 2833              	.LVL381:
 2834 0094 F4E7     		b	.L257
 2835              	.LVL382:
 2836              	.L261:
 211:libcanard/canard.c ****     }
 2837              		.loc 1 211 0
 2838 0096 6FF00300 		mvn	r0, #3
 2839 009a F1E7     		b	.L257
 2840              		.cfi_endproc
 2841              	.LFE5:
 2843              		.section	.text.canardPeekTxQueue,"ax",%progbits
 2844              		.align	1
 2845              		.global	canardPeekTxQueue
 2846              		.syntax unified
 2847              		.thumb
 2848              		.thumb_func
 2849              		.fpu softvfp
 2851              	canardPeekTxQueue:
 2852              	.LFB6:
ARM GAS  /tmp/ccbnltLA.s 			page 84


 236:libcanard/canard.c ****     if (ins->tx_queue == NULL)
 2853              		.loc 1 236 0
 2854              		.cfi_startproc
 2855              		@ args = 0, pretend = 0, frame = 0
 2856              		@ frame_needed = 0, uses_anonymous_args = 0
 2857              		@ link register save eliminated.
 2858              	.LVL383:
 237:libcanard/canard.c ****     {
 2859              		.loc 1 237 0
 2860 0000 C069     		ldr	r0, [r0, #28]
 2861              	.LVL384:
 2862 0002 08B1     		cbz	r0, .L269
 241:libcanard/canard.c **** }
 2863              		.loc 1 241 0
 2864 0004 0430     		adds	r0, r0, #4
 2865 0006 7047     		bx	lr
 2866              	.L269:
 239:libcanard/canard.c ****     }
 2867              		.loc 1 239 0
 2868 0008 0020     		movs	r0, #0
 242:libcanard/canard.c **** 
 2869              		.loc 1 242 0
 2870 000a 7047     		bx	lr
 2871              		.cfi_endproc
 2872              	.LFE6:
 2874              		.section	.text.canardPopTxQueue,"ax",%progbits
 2875              		.align	1
 2876              		.global	canardPopTxQueue
 2877              		.syntax unified
 2878              		.thumb
 2879              		.thumb_func
 2880              		.fpu softvfp
 2882              	canardPopTxQueue:
 2883              	.LFB7:
 245:libcanard/canard.c ****     CanardTxQueueItem* item = ins->tx_queue;
 2884              		.loc 1 245 0
 2885              		.cfi_startproc
 2886              		@ args = 0, pretend = 0, frame = 0
 2887              		@ frame_needed = 0, uses_anonymous_args = 0
 2888              	.LVL385:
 2889 0000 08B5     		push	{r3, lr}
 2890              	.LCFI41:
 2891              		.cfi_def_cfa_offset 8
 2892              		.cfi_offset 3, -8
 2893              		.cfi_offset 14, -4
 246:libcanard/canard.c ****     ins->tx_queue = item->next;
 2894              		.loc 1 246 0
 2895 0002 C169     		ldr	r1, [r0, #28]
 2896              	.LVL386:
 247:libcanard/canard.c ****     freeBlock(&ins->allocator, item);
 2897              		.loc 1 247 0
 2898 0004 0B68     		ldr	r3, [r1]
 2899 0006 C361     		str	r3, [r0, #28]
 248:libcanard/canard.c **** }
 2900              		.loc 1 248 0
 2901 0008 0C30     		adds	r0, r0, #12
 2902              	.LVL387:
ARM GAS  /tmp/ccbnltLA.s 			page 85


 2903 000a FFF7FEFF 		bl	freeBlock
 2904              	.LVL388:
 2905 000e 08BD     		pop	{r3, pc}
 2906              		.cfi_endproc
 2907              	.LFE7:
 2909              		.section	.text.canardCleanupStaleTransfers,"ax",%progbits
 2910              		.align	1
 2911              		.global	canardCleanupStaleTransfers
 2912              		.syntax unified
 2913              		.thumb
 2914              		.thumb_func
 2915              		.fpu softvfp
 2917              	canardCleanupStaleTransfers:
 2918              	.LFB9:
 478:libcanard/canard.c ****     CanardRxState* prev = ins->rx_states, * state = ins->rx_states;
 2919              		.loc 1 478 0
 2920              		.cfi_startproc
 2921              		@ args = 0, pretend = 0, frame = 0
 2922              		@ frame_needed = 0, uses_anonymous_args = 0
 2923              	.LVL389:
 2924 0000 2DE9F041 		push	{r4, r5, r6, r7, r8, lr}
 2925              	.LCFI42:
 2926              		.cfi_def_cfa_offset 24
 2927              		.cfi_offset 4, -24
 2928              		.cfi_offset 5, -20
 2929              		.cfi_offset 6, -16
 2930              		.cfi_offset 7, -12
 2931              		.cfi_offset 8, -8
 2932              		.cfi_offset 14, -4
 2933 0004 0546     		mov	r5, r0
 2934 0006 1646     		mov	r6, r2
 2935 0008 1F46     		mov	r7, r3
 479:libcanard/canard.c **** 
 2936              		.loc 1 479 0
 2937 000a D0F81880 		ldr	r8, [r0, #24]
 2938              	.LVL390:
 2939 000e 4446     		mov	r4, r8
 481:libcanard/canard.c ****     {
 2940              		.loc 1 481 0
 2941 0010 10E0     		b	.L273
 2942              	.LVL391:
 2943              	.L280:
 487:libcanard/canard.c ****                 ins->rx_states = ins->rx_states->next;
 2944              		.loc 1 487 0
 2945 0012 2146     		mov	r1, r4
 2946 0014 2846     		mov	r0, r5
 2947 0016 FFF7FEFF 		bl	releaseStatePayload
 2948              	.LVL392:
 488:libcanard/canard.c ****                 freeBlock(&ins->allocator, state);
 2949              		.loc 1 488 0
 2950 001a AB69     		ldr	r3, [r5, #24]
 2951 001c 1B68     		ldr	r3, [r3]
 2952 001e AB61     		str	r3, [r5, #24]
 489:libcanard/canard.c ****                 state = ins->rx_states;
 2953              		.loc 1 489 0
 2954 0020 2146     		mov	r1, r4
 2955 0022 05F10C00 		add	r0, r5, #12
ARM GAS  /tmp/ccbnltLA.s 			page 86


 2956 0026 FFF7FEFF 		bl	freeBlock
 2957              	.LVL393:
 490:libcanard/canard.c ****                 prev = state;
 2958              		.loc 1 490 0
 2959 002a AC69     		ldr	r4, [r5, #24]
 2960              	.LVL394:
 2961 002c A046     		mov	r8, r4
 2962 002e 01E0     		b	.L273
 2963              	.LVL395:
 2964              	.L274:
 503:libcanard/canard.c ****             state = state->next;
 2965              		.loc 1 503 0
 2966 0030 A046     		mov	r8, r4
 504:libcanard/canard.c ****         }
 2967              		.loc 1 504 0
 2968 0032 2468     		ldr	r4, [r4]
 2969              	.LVL396:
 2970              	.L273:
 481:libcanard/canard.c ****     {
 2971              		.loc 1 481 0
 2972 0034 E4B1     		cbz	r4, .L279
 483:libcanard/canard.c ****         {
 2973              		.loc 1 483 0
 2974 0036 D4E90223 		ldrd	r2, [r4, #8]
 2975 003a B21A     		subs	r2, r6, r2
 2976 003c 67EB0303 		sbc	r3, r7, r3
 2977 0040 0C48     		ldr	r0, .L281
 2978 0042 0021     		movs	r1, #0
 2979 0044 9942     		cmp	r1, r3
 2980 0046 08BF     		it	eq
 2981 0048 9042     		cmpeq	r0, r2
 2982 004a F1D2     		bcs	.L274
 485:libcanard/canard.c ****             {
 2983              		.loc 1 485 0
 2984 004c AB69     		ldr	r3, [r5, #24]
 2985 004e 9C42     		cmp	r4, r3
 2986 0050 DFD0     		beq	.L280
 495:libcanard/canard.c ****                 prev->next = state->next;
 2987              		.loc 1 495 0
 2988 0052 2146     		mov	r1, r4
 2989 0054 2846     		mov	r0, r5
 2990 0056 FFF7FEFF 		bl	releaseStatePayload
 2991              	.LVL397:
 496:libcanard/canard.c ****                 freeBlock(&ins->allocator, state);
 2992              		.loc 1 496 0
 2993 005a 2368     		ldr	r3, [r4]
 2994 005c C8F80030 		str	r3, [r8]
 497:libcanard/canard.c ****                 state = prev->next;
 2995              		.loc 1 497 0
 2996 0060 2146     		mov	r1, r4
 2997 0062 05F10C00 		add	r0, r5, #12
 2998 0066 FFF7FEFF 		bl	freeBlock
 2999              	.LVL398:
 498:libcanard/canard.c ****             }
 3000              		.loc 1 498 0
 3001 006a D8F80040 		ldr	r4, [r8]
 3002              	.LVL399:
ARM GAS  /tmp/ccbnltLA.s 			page 87


 3003 006e E1E7     		b	.L273
 3004              	.L279:
 507:libcanard/canard.c **** 
 3005              		.loc 1 507 0
 3006 0070 BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 3007              	.LVL400:
 3008              	.L282:
 3009              		.align	2
 3010              	.L281:
 3011 0074 80841E00 		.word	2000000
 3012              		.cfi_endproc
 3013              	.LFE9:
 3015              		.section	.text.canardDecodeScalar,"ax",%progbits
 3016              		.align	1
 3017              		.global	canardDecodeScalar
 3018              		.syntax unified
 3019              		.thumb
 3020              		.thumb_func
 3021              		.fpu softvfp
 3023              	canardDecodeScalar:
 3024              	.LFB10:
 514:libcanard/canard.c ****     if (transfer == NULL || out_value == NULL)
 3025              		.loc 1 514 0
 3026              		.cfi_startproc
 3027              		@ args = 4, pretend = 0, frame = 8
 3028              		@ frame_needed = 0, uses_anonymous_args = 0
 3029              	.LVL401:
 3030 0000 2DE9F041 		push	{r4, r5, r6, r7, r8, lr}
 3031              	.LCFI43:
 3032              		.cfi_def_cfa_offset 24
 3033              		.cfi_offset 4, -24
 3034              		.cfi_offset 5, -20
 3035              		.cfi_offset 6, -16
 3036              		.cfi_offset 7, -12
 3037              		.cfi_offset 8, -8
 3038              		.cfi_offset 14, -4
 3039 0004 82B0     		sub	sp, sp, #8
 3040              	.LCFI44:
 3041              		.cfi_def_cfa_offset 32
 3042 0006 089F     		ldr	r7, [sp, #32]
 515:libcanard/canard.c ****     {
 3043              		.loc 1 515 0
 3044 0008 0028     		cmp	r0, #0
 3045 000a 00F02581 		beq	.L307
 3046 000e 0446     		mov	r4, r0
 515:libcanard/canard.c ****     {
 3047              		.loc 1 515 0 is_stmt 0 discriminator 1
 3048 0010 002F     		cmp	r7, #0
 3049 0012 00F02481 		beq	.L308
 520:libcanard/canard.c ****     {
 3050              		.loc 1 520 0 is_stmt 1
 3051 0016 551E     		subs	r5, r2, #1
 3052 0018 EDB2     		uxtb	r5, r5
 3053 001a 3F2D     		cmp	r5, #63
 3054 001c 00F22281 		bhi	.L309
 525:libcanard/canard.c ****     {
 3055              		.loc 1 525 0
ARM GAS  /tmp/ccbnltLA.s 			page 88


 3056 0020 012A     		cmp	r2, #1
 3057 0022 2CD0     		beq	.L318
 3058              	.L285:
 3059 0024 2046     		mov	r0, r4
 3060              	.LVL402:
 3061 0026 1E46     		mov	r6, r3
 3062 0028 1446     		mov	r4, r2
 3063              	.LVL403:
 548:libcanard/canard.c **** 
 3064              		.loc 1 548 0
 3065 002a 0023     		movs	r3, #0
 3066              	.LVL404:
 3067 002c 0093     		str	r3, [sp]
 3068 002e 0193     		str	r3, [sp, #4]
 550:libcanard/canard.c ****     if (result <= 0)
 3069              		.loc 1 550 0
 3070 0030 6B46     		mov	r3, sp
 3071 0032 FFF7FEFF 		bl	descatterTransferPayload
 3072              	.LVL405:
 551:libcanard/canard.c ****     {
 3073              		.loc 1 551 0
 3074 0036 051E     		subs	r5, r0, #0
 3075 0038 40F31781 		ble	.L311
 556:libcanard/canard.c **** 
 3076              		.loc 1 556 0
 3077 003c 6B1E     		subs	r3, r5, #1
 3078 003e 9BB2     		uxth	r3, r3
 3079 0040 3F2B     		cmp	r3, #63
 3080 0042 21D8     		bhi	.L286
 556:libcanard/canard.c **** 
 3081              		.loc 1 556 0 is_stmt 0 discriminator 2
 3082 0044 A542     		cmp	r5, r4
 3083 0046 1FDC     		bgt	.L286
 564:libcanard/canard.c ****     {
 3084              		.loc 1 564 0 is_stmt 1
 3085 0048 14F0070F 		tst	r4, #7
 3086 004c 0AD0     		beq	.L288
 567:libcanard/canard.c ****     }
 3087              		.loc 1 567 0
 3088 004e 02AB     		add	r3, sp, #8
 3089 0050 03EBD401 		add	r1, r3, r4, lsr #3
 3090 0054 11F8083C 		ldrb	r3, [r1, #-8]	@ zero_extendqisi2
 3091 0058 6242     		negs	r2, r4
 3092 005a 02F00702 		and	r2, r2, #7
 3093 005e 1341     		asrs	r3, r3, r2
 3094 0060 01F8083C 		strb	r3, [r1, #-8]
 3095              	.L288:
 3096              	.LVL406:
 574:libcanard/canard.c ****     else if (bit_length <= 8)   { std_byte_length = 1; }
 3097              		.loc 1 574 0
 3098 0064 012C     		cmp	r4, #1
 3099 0066 1DD0     		beq	.L312
 575:libcanard/canard.c ****     else if (bit_length <= 16)  { std_byte_length = 2; }
 3100              		.loc 1 575 0
 3101 0068 082C     		cmp	r4, #8
 3102 006a 1DD9     		bls	.L313
 576:libcanard/canard.c ****     else if (bit_length <= 32)  { std_byte_length = 4; }
ARM GAS  /tmp/ccbnltLA.s 			page 89


 3103              		.loc 1 576 0
 3104 006c 102C     		cmp	r4, #16
 3105 006e 4BD9     		bls	.L314
 577:libcanard/canard.c ****     else if (bit_length <= 64)  { std_byte_length = 8; }
 3106              		.loc 1 577 0
 3107 0070 202C     		cmp	r4, #32
 3108 0072 4CD9     		bls	.L315
 578:libcanard/canard.c ****     else
 3109              		.loc 1 578 0
 3110 0074 402C     		cmp	r4, #64
 3111 0076 0ED8     		bhi	.L319
 3112 0078 4FF00808 		mov	r8, #8
 3113 007c 16E0     		b	.L289
 3114              	.LVL407:
 3115              	.L318:
 525:libcanard/canard.c ****     {
 3116              		.loc 1 525 0 discriminator 1
 3117 007e 002B     		cmp	r3, #0
 3118 0080 D0D0     		beq	.L285
 527:libcanard/canard.c ****     }
 3119              		.loc 1 527 0
 3120 0082 6FF00100 		mvn	r0, #1
 3121              	.LVL408:
 3122 0086 F1E0     		b	.L284
 3123              	.LVL409:
 3124              	.L286:
 556:libcanard/canard.c **** 
 3125              		.loc 1 556 0 discriminator 3
 3126 0088 7A4B     		ldr	r3, .L329
 3127 008a 7B4A     		ldr	r2, .L329+4
 3128 008c 4FF40B71 		mov	r1, #556
 3129 0090 7A48     		ldr	r0, .L329+8
 3130              	.LVL410:
 3131 0092 FFF7FEFF 		bl	__assert_func
 3132              	.LVL411:
 3133              	.L319:
 581:libcanard/canard.c ****         return -CANARD_ERROR_INTERNAL;
 3134              		.loc 1 581 0
 3135 0096 7A4B     		ldr	r3, .L329+12
 3136 0098 774A     		ldr	r2, .L329+4
 3137 009a 40F24521 		movw	r1, #581
 3138 009e 7748     		ldr	r0, .L329+8
 3139              	.LVL412:
 3140 00a0 FFF7FEFF 		bl	__assert_func
 3141              	.LVL413:
 3142              	.L312:
 574:libcanard/canard.c ****     else if (bit_length <= 8)   { std_byte_length = 1; }
 3143              		.loc 1 574 0
 3144 00a4 A046     		mov	r8, r4
 3145 00a6 01E0     		b	.L289
 3146              	.L313:
 575:libcanard/canard.c ****     else if (bit_length <= 16)  { std_byte_length = 2; }
 3147              		.loc 1 575 0
 3148 00a8 4FF00108 		mov	r8, #1
 3149              	.L289:
 3150              	.LVL414:
 585:libcanard/canard.c **** 
ARM GAS  /tmp/ccbnltLA.s 			page 90


 3151              		.loc 1 585 0
 3152 00ac 08F1FF33 		add	r3, r8, #-1
 3153 00b0 DBB2     		uxtb	r3, r3
 3154 00b2 072B     		cmp	r3, #7
 3155 00b4 2ED8     		bhi	.L320
 590:libcanard/canard.c ****     {
 3156              		.loc 1 590 0
 3157 00b6 FFF7FEFF 		bl	isBigEndian
 3158              	.LVL415:
 3159 00ba 90BB     		cbnz	r0, .L321
 3160              	.L291:
 599:libcanard/canard.c ****     {
 3161              		.loc 1 599 0
 3162 00bc 9EB1     		cbz	r6, .L292
 599:libcanard/canard.c ****     {
 3163              		.loc 1 599 0 is_stmt 0 discriminator 1
 3164 00be B4EBC80F 		cmp	r4, r8, lsl #3
 3165 00c2 10D0     		beq	.L292
 601:libcanard/canard.c ****         {
 3166              		.loc 1 601 0 is_stmt 1
 3167 00c4 082C     		cmp	r4, #8
 3168 00c6 31D8     		bhi	.L293
 603:libcanard/canard.c ****             {
 3169              		.loc 1 603 0
 3170 00c8 9DF80010 		ldrb	r1, [sp]	@ zero_extendqisi2
 3171 00cc 621E     		subs	r2, r4, #1
 3172 00ce 21FA02F2 		lsr	r2, r1, r2
 3173 00d2 12F0010F 		tst	r2, #1
 3174 00d6 06D0     		beq	.L292
 605:libcanard/canard.c ****             }
 3175              		.loc 1 605 0
 3176 00d8 0123     		movs	r3, #1
 3177 00da A340     		lsls	r3, r3, r4
 3178 00dc 5B42     		negs	r3, r3
 3179 00de DBB2     		uxtb	r3, r3
 3180 00e0 0B43     		orrs	r3, r3, r1
 3181 00e2 8DF80030 		strb	r3, [sp]
 3182              	.LVL416:
 3183              	.L292:
 639:libcanard/canard.c ****     {
 3184              		.loc 1 639 0
 3185 00e6 002E     		cmp	r6, #0
 3186 00e8 00F08C80 		beq	.L297
 641:libcanard/canard.c ****         else if (bit_length <= 16)  { *((int16_t*) out_value) = storage.s16; }
 3187              		.loc 1 641 0
 3188 00ec 082C     		cmp	r4, #8
 3189 00ee 74D9     		bls	.L322
 642:libcanard/canard.c ****         else if (bit_length <= 32)  { *((int32_t*) out_value) = storage.s32; }
 3190              		.loc 1 642 0
 3191 00f0 102C     		cmp	r4, #16
 3192 00f2 77D9     		bls	.L323
 643:libcanard/canard.c ****         else if (bit_length <= 64)  { *((int64_t*) out_value) = storage.s64; }
 3193              		.loc 1 643 0
 3194 00f4 202C     		cmp	r4, #32
 3195 00f6 7AD9     		bls	.L324
 644:libcanard/canard.c ****         else
 3196              		.loc 1 644 0
ARM GAS  /tmp/ccbnltLA.s 			page 91


 3197 00f8 402C     		cmp	r4, #64
 3198 00fa 7CD8     		bhi	.L301
 644:libcanard/canard.c ****         else
 3199              		.loc 1 644 0 is_stmt 0 discriminator 1
 3200 00fc DDE90023 		ldrd	r2, [sp]
 3201 0100 C7E90023 		strd	r2, [r7]
 667:libcanard/canard.c **** }
 3202              		.loc 1 667 0 is_stmt 1 discriminator 1
 3203 0104 2846     		mov	r0, r5
 3204 0106 B1E0     		b	.L284
 3205              	.LVL417:
 3206              	.L314:
 576:libcanard/canard.c ****     else if (bit_length <= 32)  { std_byte_length = 4; }
 3207              		.loc 1 576 0
 3208 0108 4FF00208 		mov	r8, #2
 3209 010c CEE7     		b	.L289
 3210              	.L315:
 577:libcanard/canard.c ****     else if (bit_length <= 64)  { std_byte_length = 8; }
 3211              		.loc 1 577 0
 3212 010e 4FF00408 		mov	r8, #4
 3213 0112 CBE7     		b	.L289
 3214              	.LVL418:
 3215              	.L320:
 585:libcanard/canard.c **** 
 3216              		.loc 1 585 0 discriminator 1
 3217 0114 5B4B     		ldr	r3, .L329+16
 3218 0116 584A     		ldr	r2, .L329+4
 3219 0118 40F24921 		movw	r1, #585
 3220 011c 5748     		ldr	r0, .L329+8
 3221              	.LVL419:
 3222 011e FFF7FEFF 		bl	__assert_func
 3223              	.LVL420:
 3224              	.L321:
 592:libcanard/canard.c ****     }
 3225              		.loc 1 592 0
 3226 0122 4146     		mov	r1, r8
 3227 0124 6846     		mov	r0, sp
 3228 0126 FFF7FEFF 		bl	swapByteOrder
 3229              	.LVL421:
 3230 012a C7E7     		b	.L291
 3231              	.L293:
 608:libcanard/canard.c ****         {
 3232              		.loc 1 608 0
 3233 012c 102C     		cmp	r4, #16
 3234 012e 0FD8     		bhi	.L294
 610:libcanard/canard.c ****             {
 3235              		.loc 1 610 0
 3236 0130 BDF80020 		ldrh	r2, [sp]
 3237 0134 631E     		subs	r3, r4, #1
 3238 0136 22FA03F3 		lsr	r3, r2, r3
 3239 013a 13F0010F 		tst	r3, #1
 3240 013e D2D0     		beq	.L292
 612:libcanard/canard.c ****             }
 3241              		.loc 1 612 0
 3242 0140 0123     		movs	r3, #1
 3243 0142 A340     		lsls	r3, r3, r4
 3244 0144 5B42     		negs	r3, r3
ARM GAS  /tmp/ccbnltLA.s 			page 92


 3245 0146 9BB2     		uxth	r3, r3
 3246 0148 1343     		orrs	r3, r3, r2
 3247 014a ADF80030 		strh	r3, [sp]	@ movhi
 3248 014e CAE7     		b	.L292
 3249              	.L294:
 615:libcanard/canard.c ****         {
 3250              		.loc 1 615 0
 3251 0150 202C     		cmp	r4, #32
 3252 0152 0CD8     		bhi	.L295
 617:libcanard/canard.c ****             {
 3253              		.loc 1 617 0
 3254 0154 009A     		ldr	r2, [sp]
 3255 0156 631E     		subs	r3, r4, #1
 3256 0158 22FA03F3 		lsr	r3, r2, r3
 3257 015c 13F0010F 		tst	r3, #1
 3258 0160 C1D0     		beq	.L292
 619:libcanard/canard.c ****             }
 3259              		.loc 1 619 0
 3260 0162 0123     		movs	r3, #1
 3261 0164 A340     		lsls	r3, r3, r4
 3262 0166 5B42     		negs	r3, r3
 3263 0168 1A43     		orrs	r2, r2, r3
 3264 016a 0092     		str	r2, [sp]
 3265 016c BBE7     		b	.L292
 3266              	.L295:
 622:libcanard/canard.c ****         {
 3267              		.loc 1 622 0
 3268 016e 3F2C     		cmp	r4, #63
 3269 0170 2CD8     		bhi	.L296
 624:libcanard/canard.c ****             {
 3270              		.loc 1 624 0
 3271 0172 DDE90001 		ldrd	r0, [sp]
 3272 0176 04F1FF3E 		add	lr, r4, #-1
 3273 017a CEF12008 		rsb	r8, lr, #32
 3274              	.LVL422:
 3275 017e A4F1210C 		sub	ip, r4, #33
 3276 0182 20FA0EF2 		lsr	r2, r0, lr
 3277 0186 01FA08F8 		lsl	r8, r1, r8
 3278 018a 42EA0802 		orr	r2, r2, r8
 3279 018e 21FA0CFC 		lsr	ip, r1, ip
 3280 0192 42EA0C02 		orr	r2, r2, ip
 3281 0196 02F00102 		and	r2, r2, #1
 3282 019a 0023     		movs	r3, #0
 3283 019c 1343     		orrs	r3, r2, r3
 3284 019e A2D0     		beq	.L292
 626:libcanard/canard.c ****             }
 3285              		.loc 1 626 0
 3286 01a0 4FF0010E 		mov	lr, #1
 3287 01a4 A4F12008 		sub	r8, r4, #32
 3288 01a8 C4F1200C 		rsb	ip, r4, #32
 3289 01ac 0EFA08F3 		lsl	r3, lr, r8
 3290 01b0 2EFA0CFC 		lsr	ip, lr, ip
 3291 01b4 43EA0C03 		orr	r3, r3, ip
 3292 01b8 0EFA04F2 		lsl	r2, lr, r4
 3293 01bc 5242     		rsbs	r2, r2, #0
 3294 01be 63EB4303 		sbc	r3, r3, r3, lsl #1
 3295 01c2 1043     		orrs	r0, r0, r2
ARM GAS  /tmp/ccbnltLA.s 			page 93


 3296 01c4 1943     		orrs	r1, r1, r3
 3297 01c6 CDE90001 		strd	r0, [sp]
 3298 01ca 8CE7     		b	.L292
 3299              	.LVL423:
 3300              	.L296:
 631:libcanard/canard.c ****             return -CANARD_ERROR_INTERNAL;
 3301              		.loc 1 631 0
 3302 01cc 2C4B     		ldr	r3, .L329+12
 3303 01ce 2A4A     		ldr	r2, .L329+4
 3304 01d0 40F27721 		movw	r1, #631
 3305 01d4 2948     		ldr	r0, .L329+8
 3306 01d6 FFF7FEFF 		bl	__assert_func
 3307              	.LVL424:
 3308              	.L322:
 641:libcanard/canard.c ****         else if (bit_length <= 16)  { *((int16_t*) out_value) = storage.s16; }
 3309              		.loc 1 641 0 discriminator 1
 3310 01da 9DF90030 		ldrsb	r3, [sp]
 3311 01de 3B70     		strb	r3, [r7]
 667:libcanard/canard.c **** }
 3312              		.loc 1 667 0 discriminator 1
 3313 01e0 2846     		mov	r0, r5
 3314 01e2 43E0     		b	.L284
 3315              	.L323:
 642:libcanard/canard.c ****         else if (bit_length <= 32)  { *((int32_t*) out_value) = storage.s32; }
 3316              		.loc 1 642 0 discriminator 1
 3317 01e4 BDF90030 		ldrsh	r3, [sp]
 3318 01e8 3B80     		strh	r3, [r7]	@ movhi
 667:libcanard/canard.c **** }
 3319              		.loc 1 667 0 discriminator 1
 3320 01ea 2846     		mov	r0, r5
 3321 01ec 3EE0     		b	.L284
 3322              	.L324:
 643:libcanard/canard.c ****         else if (bit_length <= 64)  { *((int64_t*) out_value) = storage.s64; }
 3323              		.loc 1 643 0 discriminator 1
 3324 01ee 009B     		ldr	r3, [sp]
 3325 01f0 3B60     		str	r3, [r7]
 667:libcanard/canard.c **** }
 3326              		.loc 1 667 0 discriminator 1
 3327 01f2 2846     		mov	r0, r5
 3328 01f4 3AE0     		b	.L284
 3329              	.L301:
 647:libcanard/canard.c ****             return -CANARD_ERROR_INTERNAL;
 3330              		.loc 1 647 0
 3331 01f6 224B     		ldr	r3, .L329+12
 3332 01f8 1F4A     		ldr	r2, .L329+4
 3333 01fa 40F28721 		movw	r1, #647
 3334 01fe 1F48     		ldr	r0, .L329+8
 3335 0200 FFF7FEFF 		bl	__assert_func
 3336              	.LVL425:
 3337              	.L297:
 653:libcanard/canard.c ****         else if (bit_length <= 8)   { *( (uint8_t*) out_value) = storage.u8;  }
 3338              		.loc 1 653 0
 3339 0204 012C     		cmp	r4, #1
 3340 0206 0DD0     		beq	.L325
 654:libcanard/canard.c ****         else if (bit_length <= 16)  { *((uint16_t*) out_value) = storage.u16; }
 3341              		.loc 1 654 0
 3342 0208 082C     		cmp	r4, #8
ARM GAS  /tmp/ccbnltLA.s 			page 94


 3343 020a 10D9     		bls	.L326
 655:libcanard/canard.c ****         else if (bit_length <= 32)  { *((uint32_t*) out_value) = storage.u32; }
 3344              		.loc 1 655 0
 3345 020c 102C     		cmp	r4, #16
 3346 020e 13D9     		bls	.L327
 656:libcanard/canard.c ****         else if (bit_length <= 64)  { *((uint64_t*) out_value) = storage.u64; }
 3347              		.loc 1 656 0
 3348 0210 202C     		cmp	r4, #32
 3349 0212 16D9     		bls	.L328
 657:libcanard/canard.c ****         else
 3350              		.loc 1 657 0
 3351 0214 402C     		cmp	r4, #64
 3352 0216 18D8     		bhi	.L306
 657:libcanard/canard.c ****         else
 3353              		.loc 1 657 0 is_stmt 0 discriminator 1
 3354 0218 DDE90023 		ldrd	r2, [sp]
 3355 021c C7E90023 		strd	r2, [r7]
 667:libcanard/canard.c **** }
 3356              		.loc 1 667 0 is_stmt 1 discriminator 1
 3357 0220 2846     		mov	r0, r5
 3358 0222 23E0     		b	.L284
 3359              	.L325:
 653:libcanard/canard.c ****         else if (bit_length <= 8)   { *( (uint8_t*) out_value) = storage.u8;  }
 3360              		.loc 1 653 0 discriminator 1
 3361 0224 9DF80030 		ldrb	r3, [sp]	@ zero_extendqisi2
 3362 0228 3B70     		strb	r3, [r7]
 667:libcanard/canard.c **** }
 3363              		.loc 1 667 0 discriminator 1
 3364 022a 2846     		mov	r0, r5
 3365 022c 1EE0     		b	.L284
 3366              	.L326:
 654:libcanard/canard.c ****         else if (bit_length <= 16)  { *((uint16_t*) out_value) = storage.u16; }
 3367              		.loc 1 654 0 discriminator 1
 3368 022e 9DF80030 		ldrb	r3, [sp]	@ zero_extendqisi2
 3369 0232 3B70     		strb	r3, [r7]
 667:libcanard/canard.c **** }
 3370              		.loc 1 667 0 discriminator 1
 3371 0234 2846     		mov	r0, r5
 3372 0236 19E0     		b	.L284
 3373              	.L327:
 655:libcanard/canard.c ****         else if (bit_length <= 32)  { *((uint32_t*) out_value) = storage.u32; }
 3374              		.loc 1 655 0 discriminator 1
 3375 0238 BDF80030 		ldrh	r3, [sp]
 3376 023c 3B80     		strh	r3, [r7]	@ movhi
 667:libcanard/canard.c **** }
 3377              		.loc 1 667 0 discriminator 1
 3378 023e 2846     		mov	r0, r5
 3379 0240 14E0     		b	.L284
 3380              	.L328:
 656:libcanard/canard.c ****         else if (bit_length <= 64)  { *((uint64_t*) out_value) = storage.u64; }
 3381              		.loc 1 656 0 discriminator 1
 3382 0242 009B     		ldr	r3, [sp]
 3383 0244 3B60     		str	r3, [r7]
 667:libcanard/canard.c **** }
 3384              		.loc 1 667 0 discriminator 1
 3385 0246 2846     		mov	r0, r5
 3386 0248 10E0     		b	.L284
ARM GAS  /tmp/ccbnltLA.s 			page 95


 3387              	.L306:
 660:libcanard/canard.c ****             return -CANARD_ERROR_INTERNAL;
 3388              		.loc 1 660 0
 3389 024a 0D4B     		ldr	r3, .L329+12
 3390 024c 0A4A     		ldr	r2, .L329+4
 3391 024e 4FF42571 		mov	r1, #660
 3392 0252 0A48     		ldr	r0, .L329+8
 3393 0254 FFF7FEFF 		bl	__assert_func
 3394              	.LVL426:
 3395              	.L307:
 517:libcanard/canard.c ****     }
 3396              		.loc 1 517 0
 3397 0258 6FF00100 		mvn	r0, #1
 3398              	.LVL427:
 3399 025c 06E0     		b	.L284
 3400              	.LVL428:
 3401              	.L308:
 3402 025e 6FF00100 		mvn	r0, #1
 3403              	.LVL429:
 3404 0262 03E0     		b	.L284
 3405              	.LVL430:
 3406              	.L309:
 522:libcanard/canard.c ****     }
 3407              		.loc 1 522 0
 3408 0264 6FF00100 		mvn	r0, #1
 3409              	.LVL431:
 3410 0268 00E0     		b	.L284
 3411              	.LVL432:
 3412              	.L311:
 553:libcanard/canard.c ****     }
 3413              		.loc 1 553 0
 3414 026a 2846     		mov	r0, r5
 3415              	.LVL433:
 3416              	.L284:
 668:libcanard/canard.c **** 
 3417              		.loc 1 668 0
 3418 026c 02B0     		add	sp, sp, #8
 3419              	.LCFI45:
 3420              		.cfi_def_cfa_offset 24
 3421              		@ sp needed
 3422 026e BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 3423              	.LVL434:
 3424              	.L330:
 3425 0272 00BF     		.align	2
 3426              	.L329:
 3427 0274 00000000 		.word	.LC20
 3428 0278 00000000 		.word	.LANCHOR11
 3429 027c 14000000 		.word	.LC1
 3430 0280 00000000 		.word	.LC19
 3431 0284 3C000000 		.word	.LC21
 3432              		.cfi_endproc
 3433              	.LFE10:
 3435              		.section	.text.canardEncodeScalar,"ax",%progbits
 3436              		.align	1
 3437              		.global	canardEncodeScalar
 3438              		.syntax unified
 3439              		.thumb
ARM GAS  /tmp/ccbnltLA.s 			page 96


 3440              		.thumb_func
 3441              		.fpu softvfp
 3443              	canardEncodeScalar:
 3444              	.LFB11:
 674:libcanard/canard.c ****     /*
 3445              		.loc 1 674 0
 3446              		.cfi_startproc
 3447              		@ args = 0, pretend = 0, frame = 8
 3448              		@ frame_needed = 0, uses_anonymous_args = 0
 3449              	.LVL435:
 3450 0000 F0B5     		push	{r4, r5, r6, r7, lr}
 3451              	.LCFI46:
 3452              		.cfi_def_cfa_offset 20
 3453              		.cfi_offset 4, -20
 3454              		.cfi_offset 5, -16
 3455              		.cfi_offset 6, -12
 3456              		.cfi_offset 7, -8
 3457              		.cfi_offset 14, -4
 3458 0002 85B0     		sub	sp, sp, #20
 3459              	.LCFI47:
 3460              		.cfi_def_cfa_offset 40
 680:libcanard/canard.c ****     CANARD_ASSERT(value != NULL);
 3461              		.loc 1 680 0
 3462 0004 0028     		cmp	r0, #0
 3463 0006 30D0     		beq	.L345
 3464 0008 0E46     		mov	r6, r1
 3465 000a 1446     		mov	r4, r2
 3466 000c 0546     		mov	r5, r0
 681:libcanard/canard.c **** 
 3467              		.loc 1 681 0
 3468 000e 002B     		cmp	r3, #0
 3469 0010 32D0     		beq	.L346
 683:libcanard/canard.c ****     {
 3470              		.loc 1 683 0
 3471 0012 402A     		cmp	r2, #64
 3472 0014 37D8     		bhi	.L347
 689:libcanard/canard.c ****     {
 3473              		.loc 1 689 0
 3474 0016 002A     		cmp	r2, #0
 3475 0018 3CD0     		beq	.L348
 708:libcanard/canard.c **** 
 3476              		.loc 1 708 0
 3477 001a 0022     		movs	r2, #0
 3478              	.LVL436:
 3479 001c 0292     		str	r2, [sp, #8]
 3480 001e 0392     		str	r2, [sp, #12]
 3481              	.LVL437:
 713:libcanard/canard.c ****     else if (bit_length <= 8)   { std_byte_length = 1;              storage.u8  = *((uint8_t*) valu
 3482              		.loc 1 713 0
 3483 0020 012C     		cmp	r4, #1
 3484 0022 3ED0     		beq	.L349
 714:libcanard/canard.c ****     else if (bit_length <= 16)  { std_byte_length = 2;              storage.u16 = *((uint16_t*) val
 3485              		.loc 1 714 0
 3486 0024 082C     		cmp	r4, #8
 3487 0026 41D8     		bhi	.L338
 3488              	.LVL438:
 714:libcanard/canard.c ****     else if (bit_length <= 16)  { std_byte_length = 2;              storage.u16 = *((uint16_t*) val
ARM GAS  /tmp/ccbnltLA.s 			page 97


 3489              		.loc 1 714 0 is_stmt 0 discriminator 1
 3490 0028 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 3491              	.LVL439:
 3492 002a 8DF80830 		strb	r3, [sp, #8]
 3493 002e 0127     		movs	r7, #1
 3494              	.LVL440:
 3495              	.L337:
 723:libcanard/canard.c **** 
 3496              		.loc 1 723 0 is_stmt 1
 3497 0030 002F     		cmp	r7, #0
 3498 0032 4ED0     		beq	.L350
 725:libcanard/canard.c ****     {
 3499              		.loc 1 725 0
 3500 0034 FFF7FEFF 		bl	isBigEndian
 3501              	.LVL441:
 3502 0038 0028     		cmp	r0, #0
 3503 003a 51D1     		bne	.L351
 3504              	.L342:
 737:libcanard/canard.c ****     {
 3505              		.loc 1 737 0
 3506 003c 14F0070F 		tst	r4, #7
 3507 0040 0AD0     		beq	.L343
 740:libcanard/canard.c ****     }
 3508              		.loc 1 740 0
 3509 0042 04AB     		add	r3, sp, #16
 3510 0044 03EBD401 		add	r1, r3, r4, lsr #3
 3511 0048 11F8083C 		ldrb	r3, [r1, #-8]	@ zero_extendqisi2
 3512 004c 6242     		negs	r2, r4
 3513 004e 02F00702 		and	r2, r2, #7
 3514 0052 9340     		lsls	r3, r3, r2
 3515 0054 01F8083C 		strb	r3, [r1, #-8]
 3516              	.L343:
 746:libcanard/canard.c **** }
 3517              		.loc 1 746 0
 3518 0058 0096     		str	r6, [sp]
 3519 005a 2B46     		mov	r3, r5
 3520 005c 2246     		mov	r2, r4
 3521 005e 0021     		movs	r1, #0
 3522 0060 02A8     		add	r0, sp, #8
 3523 0062 FFF7FEFF 		bl	copyBitArray
 3524              	.LVL442:
 747:libcanard/canard.c **** 
 3525              		.loc 1 747 0
 3526 0066 05B0     		add	sp, sp, #20
 3527              	.LCFI48:
 3528              		.cfi_remember_state
 3529              		.cfi_def_cfa_offset 20
 3530              		@ sp needed
 3531 0068 F0BD     		pop	{r4, r5, r6, r7, pc}
 3532              	.LVL443:
 3533              	.L345:
 3534              	.LCFI49:
 3535              		.cfi_restore_state
 680:libcanard/canard.c ****     CANARD_ASSERT(value != NULL);
 3536              		.loc 1 680 0 discriminator 1
 3537 006a 204B     		ldr	r3, .L352
 3538              	.LVL444:
ARM GAS  /tmp/ccbnltLA.s 			page 98


 3539 006c 204A     		ldr	r2, .L352+4
 3540              	.LVL445:
 3541 006e 4FF42A71 		mov	r1, #680
 3542              	.LVL446:
 3543 0072 2048     		ldr	r0, .L352+8
 3544              	.LVL447:
 3545 0074 FFF7FEFF 		bl	__assert_func
 3546              	.LVL448:
 3547              	.L346:
 681:libcanard/canard.c **** 
 3548              		.loc 1 681 0 discriminator 1
 3549 0078 1F4B     		ldr	r3, .L352+12
 3550              	.LVL449:
 3551 007a 1D4A     		ldr	r2, .L352+4
 3552              	.LVL450:
 3553 007c 40F2A921 		movw	r1, #681
 3554              	.LVL451:
 3555 0080 1C48     		ldr	r0, .L352+8
 3556              	.LVL452:
 3557 0082 FFF7FEFF 		bl	__assert_func
 3558              	.LVL453:
 3559              	.L347:
 685:libcanard/canard.c ****         bit_length = 64;
 3560              		.loc 1 685 0
 3561 0086 1D4B     		ldr	r3, .L352+16
 3562              	.LVL454:
 3563 0088 194A     		ldr	r2, .L352+4
 3564              	.LVL455:
 3565 008a 40F2AD21 		movw	r1, #685
 3566              	.LVL456:
 3567 008e 1948     		ldr	r0, .L352+8
 3568              	.LVL457:
 3569 0090 FFF7FEFF 		bl	__assert_func
 3570              	.LVL458:
 3571              	.L348:
 691:libcanard/canard.c ****         bit_length = 1;
 3572              		.loc 1 691 0
 3573 0094 194B     		ldr	r3, .L352+16
 3574              	.LVL459:
 3575 0096 164A     		ldr	r2, .L352+4
 3576              	.LVL460:
 3577 0098 40F2B321 		movw	r1, #691
 3578              	.LVL461:
 3579 009c 1548     		ldr	r0, .L352+8
 3580              	.LVL462:
 3581 009e FFF7FEFF 		bl	__assert_func
 3582              	.LVL463:
 3583              	.L349:
 713:libcanard/canard.c ****     else if (bit_length <= 8)   { std_byte_length = 1;              storage.u8  = *((uint8_t*) valu
 3584              		.loc 1 713 0 discriminator 1
 3585 00a2 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 3586              	.LVL464:
 3587 00a4 8DF80830 		strb	r3, [sp, #8]
 3588 00a8 2746     		mov	r7, r4
 3589 00aa C1E7     		b	.L337
 3590              	.LVL465:
 3591              	.L338:
ARM GAS  /tmp/ccbnltLA.s 			page 99


 715:libcanard/canard.c ****     else if (bit_length <= 32)  { std_byte_length = 4;              storage.u32 = *((uint32_t*) val
 3592              		.loc 1 715 0
 3593 00ac 102C     		cmp	r4, #16
 3594 00ae 04D8     		bhi	.L339
 3595              	.LVL466:
 715:libcanard/canard.c ****     else if (bit_length <= 32)  { std_byte_length = 4;              storage.u32 = *((uint32_t*) val
 3596              		.loc 1 715 0 is_stmt 0 discriminator 1
 3597 00b0 1B88     		ldrh	r3, [r3]
 3598              	.LVL467:
 3599 00b2 ADF80830 		strh	r3, [sp, #8]	@ movhi
 3600 00b6 0227     		movs	r7, #2
 3601 00b8 BAE7     		b	.L337
 3602              	.LVL468:
 3603              	.L339:
 716:libcanard/canard.c ****     else if (bit_length <= 64)  { std_byte_length = 8;              storage.u64 = *((uint64_t*) val
 3604              		.loc 1 716 0 is_stmt 1
 3605 00ba 202C     		cmp	r4, #32
 3606 00bc 03D8     		bhi	.L340
 3607              	.LVL469:
 716:libcanard/canard.c ****     else if (bit_length <= 64)  { std_byte_length = 8;              storage.u64 = *((uint64_t*) val
 3608              		.loc 1 716 0 is_stmt 0 discriminator 1
 3609 00be 1B68     		ldr	r3, [r3]
 3610              	.LVL470:
 3611 00c0 0293     		str	r3, [sp, #8]
 3612 00c2 0427     		movs	r7, #4
 3613 00c4 B4E7     		b	.L337
 3614              	.LVL471:
 3615              	.L340:
 717:libcanard/canard.c ****     else
 3616              		.loc 1 717 0 is_stmt 1 discriminator 1
 3617 00c6 D3E90023 		ldrd	r2, [r3]
 3618 00ca CDE90223 		strd	r2, [sp, #8]
 3619 00ce 0827     		movs	r7, #8
 3620 00d0 AEE7     		b	.L337
 3621              	.LVL472:
 3622              	.L350:
 723:libcanard/canard.c **** 
 3623              		.loc 1 723 0 discriminator 1
 3624 00d2 0B4B     		ldr	r3, .L352+20
 3625 00d4 064A     		ldr	r2, .L352+4
 3626 00d6 40F2D321 		movw	r1, #723
 3627              	.LVL473:
 3628 00da 0648     		ldr	r0, .L352+8
 3629              	.LVL474:
 3630 00dc FFF7FEFF 		bl	__assert_func
 3631              	.LVL475:
 3632              	.L351:
 727:libcanard/canard.c ****     }
 3633              		.loc 1 727 0
 3634 00e0 3946     		mov	r1, r7
 3635 00e2 02A8     		add	r0, sp, #8
 3636 00e4 FFF7FEFF 		bl	swapByteOrder
 3637              	.LVL476:
 3638 00e8 A8E7     		b	.L342
 3639              	.L353:
 3640 00ea 00BF     		.align	2
 3641              	.L352:
ARM GAS  /tmp/ccbnltLA.s 			page 100


 3642 00ec 00000000 		.word	.LC22
 3643 00f0 00000000 		.word	.LANCHOR12
 3644 00f4 14000000 		.word	.LC1
 3645 00f8 1C000000 		.word	.LC23
 3646 00fc 00000000 		.word	.LC19
 3647 0100 34000000 		.word	.LC24
 3648              		.cfi_endproc
 3649              	.LFE11:
 3651              		.section	.text.canardReleaseRxTransferPayload,"ax",%progbits
 3652              		.align	1
 3653              		.global	canardReleaseRxTransferPayload
 3654              		.syntax unified
 3655              		.thumb
 3656              		.thumb_func
 3657              		.fpu softvfp
 3659              	canardReleaseRxTransferPayload:
 3660              	.LFB12:
 750:libcanard/canard.c ****     while (transfer->payload_middle != NULL)
 3661              		.loc 1 750 0
 3662              		.cfi_startproc
 3663              		@ args = 0, pretend = 0, frame = 0
 3664              		@ frame_needed = 0, uses_anonymous_args = 0
 3665              	.LVL477:
 3666 0000 70B5     		push	{r4, r5, r6, lr}
 3667              	.LCFI50:
 3668              		.cfi_def_cfa_offset 16
 3669              		.cfi_offset 4, -16
 3670              		.cfi_offset 5, -12
 3671              		.cfi_offset 6, -8
 3672              		.cfi_offset 14, -4
 3673 0002 0646     		mov	r6, r0
 3674 0004 0C46     		mov	r4, r1
 751:libcanard/canard.c ****     {
 3675              		.loc 1 751 0
 3676 0006 05E0     		b	.L355
 3677              	.LVL478:
 3678              	.L356:
 3679              	.LBB37:
 753:libcanard/canard.c ****         freeBlock(&ins->allocator, transfer->payload_middle);
 3680              		.loc 1 753 0
 3681 0008 0D68     		ldr	r5, [r1]
 3682              	.LVL479:
 754:libcanard/canard.c ****         transfer->payload_middle = temp;
 3683              		.loc 1 754 0
 3684 000a 06F10C00 		add	r0, r6, #12
 3685 000e FFF7FEFF 		bl	freeBlock
 3686              	.LVL480:
 755:libcanard/canard.c ****     }
 3687              		.loc 1 755 0
 3688 0012 E560     		str	r5, [r4, #12]
 3689              	.LVL481:
 3690              	.L355:
 3691              	.LBE37:
 751:libcanard/canard.c ****     {
 3692              		.loc 1 751 0
 3693 0014 E168     		ldr	r1, [r4, #12]
 3694 0016 0029     		cmp	r1, #0
ARM GAS  /tmp/ccbnltLA.s 			page 101


 3695 0018 F6D1     		bne	.L356
 758:libcanard/canard.c ****     transfer->payload_head = NULL;
 3696              		.loc 1 758 0
 3697 001a 0023     		movs	r3, #0
 3698 001c E360     		str	r3, [r4, #12]
 759:libcanard/canard.c ****     transfer->payload_tail = NULL;
 3699              		.loc 1 759 0
 3700 001e A360     		str	r3, [r4, #8]
 760:libcanard/canard.c ****     transfer->payload_len = 0;
 3701              		.loc 1 760 0
 3702 0020 2361     		str	r3, [r4, #16]
 761:libcanard/canard.c **** }
 3703              		.loc 1 761 0
 3704 0022 A382     		strh	r3, [r4, #20]	@ movhi
 3705 0024 70BD     		pop	{r4, r5, r6, pc}
 3706              		.cfi_endproc
 3707              	.LFE12:
 3709              		.section	.text.canardHandleRxFrame,"ax",%progbits
 3710              		.align	1
 3711              		.global	canardHandleRxFrame
 3712              		.syntax unified
 3713              		.thumb
 3714              		.thumb_func
 3715              		.fpu softvfp
 3717              	canardHandleRxFrame:
 3718              	.LFB8:
 252:libcanard/canard.c ****     const CanardTransferType transfer_type = extractTransferType(frame->id);
 3719              		.loc 1 252 0
 3720              		.cfi_startproc
 3721              		@ args = 0, pretend = 0, frame = 64
 3722              		@ frame_needed = 0, uses_anonymous_args = 0
 3723              	.LVL482:
 3724 0000 2DE9F04F 		push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}
 3725              	.LCFI51:
 3726              		.cfi_def_cfa_offset 36
 3727              		.cfi_offset 4, -36
 3728              		.cfi_offset 5, -32
 3729              		.cfi_offset 6, -28
 3730              		.cfi_offset 7, -24
 3731              		.cfi_offset 8, -20
 3732              		.cfi_offset 9, -16
 3733              		.cfi_offset 10, -12
 3734              		.cfi_offset 11, -8
 3735              		.cfi_offset 14, -4
 3736 0004 93B0     		sub	sp, sp, #76
 3737              	.LCFI52:
 3738              		.cfi_def_cfa_offset 112
 3739 0006 0746     		mov	r7, r0
 3740 0008 0D46     		mov	r5, r1
 3741 000a CDE90223 		strd	r2, [sp, #8]
 253:libcanard/canard.c ****     const uint8_t destination_node_id = (transfer_type == CanardTransferTypeBroadcast) ?
 3742              		.loc 1 253 0
 3743 000e 0C68     		ldr	r4, [r1]
 3744 0010 2046     		mov	r0, r4
 3745              	.LVL483:
 3746 0012 FFF7FEFF 		bl	extractTransferType
 3747              	.LVL484:
ARM GAS  /tmp/ccbnltLA.s 			page 102


 3748 0016 0646     		mov	r6, r0
 3749              	.LVL485:
 254:libcanard/canard.c ****                                         (uint8_t)CANARD_BROADCAST_NODE_ID :
 3750              		.loc 1 254 0
 3751 0018 0228     		cmp	r0, #2
 3752 001a 06D0     		beq	.L385
 254:libcanard/canard.c ****                                         (uint8_t)CANARD_BROADCAST_NODE_ID :
 3753              		.loc 1 254 0 is_stmt 0 discriminator 1
 3754 001c C4F30628 		ubfx	r8, r4, #8, #7
 3755              	.L359:
 3756              	.LVL486:
 260:libcanard/canard.c ****         (frame->id & CANARD_CAN_FRAME_RTR) != 0 ||
 3757              		.loc 1 260 0 is_stmt 1 discriminator 4
 3758 0020 002C     		cmp	r4, #0
 3759 0022 05DB     		blt	.L396
 3760              	.LVL487:
 3761              	.L358:
 475:libcanard/canard.c **** 
 3762              		.loc 1 475 0
 3763 0024 13B0     		add	sp, sp, #76
 3764              	.LCFI53:
 3765              		.cfi_remember_state
 3766              		.cfi_def_cfa_offset 36
 3767              		@ sp needed
 3768 0026 BDE8F08F 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
 3769              	.LVL488:
 3770              	.L385:
 3771              	.LCFI54:
 3772              		.cfi_restore_state
 254:libcanard/canard.c ****                                         (uint8_t)CANARD_BROADCAST_NODE_ID :
 3773              		.loc 1 254 0
 3774 002a 4FF00008 		mov	r8, #0
 3775 002e F7E7     		b	.L359
 3776              	.LVL489:
 3777              	.L396:
 261:libcanard/canard.c ****         (frame->id & CANARD_CAN_FRAME_ERR) != 0 ||
 3778              		.loc 1 261 0
 3779 0030 14F0C04F 		tst	r4, #1610612736
 3780 0034 F6D1     		bne	.L358
 263:libcanard/canard.c ****     {
 3781              		.loc 1 263 0
 3782 0036 95F80C90 		ldrb	r9, [r5, #12]	@ zero_extendqisi2
 262:libcanard/canard.c ****         (frame->data_len < 1))
 3783              		.loc 1 262 0
 3784 003a B9F1000F 		cmp	r9, #0
 3785 003e F1D0     		beq	.L358
 268:libcanard/canard.c ****         destination_node_id != canardGetLocalNodeID(ins))
 3786              		.loc 1 268 0
 3787 0040 022E     		cmp	r6, #2
 3788 0042 04D0     		beq	.L361
 269:libcanard/canard.c ****     {
 3789              		.loc 1 269 0 discriminator 1
 3790 0044 3846     		mov	r0, r7
 3791              	.LVL490:
 3792 0046 FFF7FEFF 		bl	canardGetLocalNodeID
 3793              	.LVL491:
 268:libcanard/canard.c ****         destination_node_id != canardGetLocalNodeID(ins))
ARM GAS  /tmp/ccbnltLA.s 			page 103


 3794              		.loc 1 268 0 discriminator 1
 3795 004a 8045     		cmp	r8, r0
 3796 004c EAD1     		bne	.L358
 3797              	.L361:
 274:libcanard/canard.c ****     const uint8_t source_node_id = SOURCE_ID_FROM_ID(frame->id);
 3798              		.loc 1 274 0
 3799 004e C4F30463 		ubfx	r3, r4, #24, #5
 3800 0052 0693     		str	r3, [sp, #24]
 3801              	.LVL492:
 275:libcanard/canard.c ****     const uint16_t data_type_id = extractDataType(frame->id);
 3802              		.loc 1 275 0
 3803 0054 04F07F0A 		and	r10, r4, #127
 3804              	.LVL493:
 276:libcanard/canard.c ****     const uint32_t transfer_descriptor =
 3805              		.loc 1 276 0
 3806 0058 2046     		mov	r0, r4
 3807 005a FFF7FEFF 		bl	extractDataType
 3808              	.LVL494:
 3809 005e 0790     		str	r0, [sp, #28]
 3810              	.LVL495:
 278:libcanard/canard.c **** 
 3811              		.loc 1 278 0
 3812 0060 40EA0643 		orr	r3, r0, r6, lsl #16
 3813 0064 43EA8A43 		orr	r3, r3, r10, lsl #18
 277:libcanard/canard.c ****             MAKE_TRANSFER_DESCRIPTOR(data_type_id, transfer_type, source_node_id, destination_node_
 3814              		.loc 1 277 0
 3815 0068 43EA4868 		orr	r8, r3, r8, lsl #25
 3816              	.LVL496:
 280:libcanard/canard.c **** 
 3817              		.loc 1 280 0
 3818 006c 09F1FF39 		add	r9, r9, #-1
 3819 0070 A944     		add	r9, r9, r5
 3820 0072 99F80490 		ldrb	r9, [r9, #4]	@ zero_extendqisi2
 3821              	.LVL497:
 284:libcanard/canard.c ****     {
 3822              		.loc 1 284 0
 3823 0076 5FEAD91B 		lsrs	fp, r9, #7
 3824 007a 1CD0     		beq	.L362
 3825              	.LBB38:
 286:libcanard/canard.c **** 
 3826              		.loc 1 286 0
 3827 007c 12A9     		add	r1, sp, #72
 3828 007e 0022     		movs	r2, #0
 3829 0080 0023     		movs	r3, #0
 3830 0082 61E90823 		strd	r2, [r1, #-32]!
 288:libcanard/canard.c ****         {
 3831              		.loc 1 288 0
 3832 0086 7C68     		ldr	r4, [r7, #4]
 3833 0088 CDF800A0 		str	r10, [sp]
 3834 008c 3346     		mov	r3, r6
 3835 008e 0246     		mov	r2, r0
 3836 0090 3846     		mov	r0, r7
 3837              	.LVL498:
 3838 0092 A047     		blx	r4
 3839              	.LVL499:
 3840 0094 0028     		cmp	r0, #0
 3841 0096 C5D0     		beq	.L358
ARM GAS  /tmp/ccbnltLA.s 			page 104


 290:libcanard/canard.c **** 
 3842              		.loc 1 290 0
 3843 0098 4146     		mov	r1, r8
 3844 009a 3846     		mov	r0, r7
 3845 009c FFF7FEFF 		bl	traverseRxStates
 3846              	.LVL500:
 292:libcanard/canard.c ****             {
 3847              		.loc 1 292 0
 3848 00a0 0446     		mov	r4, r0
 3849 00a2 0028     		cmp	r0, #0
 3850 00a4 BED0     		beq	.L358
 297:libcanard/canard.c ****         }
 3851              		.loc 1 297 0
 3852 00a6 DDE90A23 		ldrd	r2, [sp, #40]
 3853 00aa 4FF6FF70 		movw	r0, #65535
 3854              	.LVL501:
 3855 00ae FFF7FEFF 		bl	crcAddSignature
 3856              	.LVL502:
 3857 00b2 A082     		strh	r0, [r4, #20]	@ movhi
 3858 00b4 06E0     		b	.L364
 3859              	.LVL503:
 3860              	.L362:
 3861              	.LBE38:
 306:libcanard/canard.c **** 
 3862              		.loc 1 306 0
 3863 00b6 4146     		mov	r1, r8
 3864 00b8 B869     		ldr	r0, [r7, #24]
 3865              	.LVL504:
 3866 00ba FFF7FEFF 		bl	findRxState
 3867              	.LVL505:
 308:libcanard/canard.c ****         {
 3868              		.loc 1 308 0
 3869 00be 0446     		mov	r4, r0
 3870 00c0 0028     		cmp	r0, #0
 3871 00c2 AFD0     		beq	.L358
 3872              	.LVL506:
 3873              	.L364:
 314:libcanard/canard.c **** 
 3874              		.loc 1 314 0
 3875 00c4 3CB3     		cbz	r4, .L397
 317:libcanard/canard.c ****     const bool tid_timed_out = (timestamp_usec - rx_state->timestamp_usec) > TRANSFER_TIMEOUT_USEC;
 3876              		.loc 1 317 0
 3877 00c6 D4E90223 		ldrd	r2, [r4, #8]
 3878              	.LVL507:
 318:libcanard/canard.c ****     const bool first_frame = IS_START_OF_TRANSFER(tail_byte);
 3879              		.loc 1 318 0
 3880 00ca DDE90201 		ldrd	r0, [sp, #8]
 3881 00ce CDE90423 		strd	r2, [sp, #16]
 3882 00d2 801A     		subs	r0, r0, r2
 3883 00d4 61EB0301 		sbc	r1, r1, r3
 3884 00d8 CDE90801 		strd	r0, [sp, #32]
 3885              	.LVL508:
 321:libcanard/canard.c **** 
 3886              		.loc 1 321 0
 3887 00dc E07D     		ldrb	r0, [r4, #23]	@ zero_extendqisi2
 3888              	.LVL509:
 3889 00de 09F01F08 		and	r8, r9, #31
ARM GAS  /tmp/ccbnltLA.s 			page 105


 3890              	.LVL510:
 3891 00e2 4146     		mov	r1, r8
 3892 00e4 C0F38400 		ubfx	r0, r0, #2, #5
 3893 00e8 FFF7FEFF 		bl	computeTransferIDForwardDistance
 3894              	.LVL511:
 3895 00ec 8646     		mov	lr, r0
 3896              	.LVL512:
 325:libcanard/canard.c ****             (first_frame && not_previous_tid);
 3897              		.loc 1 325 0
 3898 00ee DDE90423 		ldrd	r2, [sp, #16]
 3899 00f2 1343     		orrs	r3, r2, r3
 3900 00f4 18D0     		beq	.L386
 324:libcanard/canard.c ****             (tid_timed_out) ||
 3901              		.loc 1 324 0
 3902 00f6 A84A     		ldr	r2, .L408
 3903 00f8 0023     		movs	r3, #0
 3904 00fa DDE90801 		ldrd	r0, [sp, #32]
 3905 00fe 8B42     		cmp	r3, r1
 3906 0100 08BF     		it	eq
 3907 0102 8242     		cmpeq	r2, r0
 3908 0104 54D3     		bcc	.L387
 325:libcanard/canard.c ****             (first_frame && not_previous_tid);
 3909              		.loc 1 325 0
 3910 0106 BBF1000F 		cmp	fp, #0
 3911 010a 53D0     		beq	.L388
 326:libcanard/canard.c **** 
 3912              		.loc 1 326 0
 3913 010c BEF1010F 		cmp	lr, #1
 3914 0110 08DD     		ble	.L398
 325:libcanard/canard.c ****             (first_frame && not_previous_tid);
 3915              		.loc 1 325 0
 3916 0112 0123     		movs	r3, #1
 3917 0114 09E0     		b	.L366
 3918              	.LVL513:
 3919              	.L397:
 314:libcanard/canard.c **** 
 3920              		.loc 1 314 0 discriminator 1
 3921 0116 A14B     		ldr	r3, .L408+4
 3922 0118 A14A     		ldr	r2, .L408+8
 3923 011a 4FF49D71 		mov	r1, #314
 3924 011e A148     		ldr	r0, .L408+12
 3925 0120 FFF7FEFF 		bl	__assert_func
 3926              	.LVL514:
 3927              	.L398:
 325:libcanard/canard.c ****             (first_frame && not_previous_tid);
 3928              		.loc 1 325 0
 3929 0124 0023     		movs	r3, #0
 3930 0126 00E0     		b	.L366
 3931              	.LVL515:
 3932              	.L386:
 3933 0128 0123     		movs	r3, #1
 3934              	.LVL516:
 3935              	.L366:
 328:libcanard/canard.c ****     {
 3936              		.loc 1 328 0
 3937 012a 002B     		cmp	r3, #0
 3938 012c 44D1     		bne	.L399
ARM GAS  /tmp/ccbnltLA.s 			page 106


 3939              	.LVL517:
 3940              	.L367:
 340:libcanard/canard.c ****     {
 3941              		.loc 1 340 0
 3942 012e BBF1000F 		cmp	fp, #0
 3943 0132 02D0     		beq	.L368
 340:libcanard/canard.c ****     {
 3944              		.loc 1 340 0 is_stmt 0 discriminator 1
 3945 0134 19F0400F 		tst	r9, #64
 3946 0138 53D1     		bne	.L400
 3947              	.L368:
 360:libcanard/canard.c ****     {
 3948              		.loc 1 360 0 is_stmt 1
 3949 013a C9F34013 		ubfx	r3, r9, #5, #1
 3950 013e E27D     		ldrb	r2, [r4, #23]	@ zero_extendqisi2
 3951 0140 B3EBD21F 		cmp	r3, r2, lsr #7
 3952 0144 7FF46EAF 		bne	.L358
 365:libcanard/canard.c ****     {
 3953              		.loc 1 365 0
 3954 0148 C2F38403 		ubfx	r3, r2, #2, #5
 3955 014c 9845     		cmp	r8, r3
 3956 014e 7FF469AF 		bne	.L358
 370:libcanard/canard.c ****     {
 3957              		.loc 1 370 0
 3958 0152 BBF1000F 		cmp	fp, #0
 3959 0156 76D0     		beq	.L369
 370:libcanard/canard.c ****     {
 3960              		.loc 1 370 0 is_stmt 0 discriminator 1
 3961 0158 19F0400F 		tst	r9, #64
 3962 015c 73D1     		bne	.L369
 3963              	.LBB39:
 372:libcanard/canard.c ****         {
 3964              		.loc 1 372 0 is_stmt 1
 3965 015e 2B7B     		ldrb	r3, [r5, #12]	@ zero_extendqisi2
 3966 0160 032B     		cmp	r3, #3
 3967 0162 7FF65FAF 		bls	.L358
 378:libcanard/canard.c ****         const int16_t ret = bufferBlockPushBytes(&ins->allocator, rx_state, frame->data + 2,
 3968              		.loc 1 378 0
 3969 0166 DDE90223 		ldrd	r2, [sp, #8]
 3970 016a C4E90223 		strd	r2, [r4, #8]
 379:libcanard/canard.c ****                                                  (uint8_t) (frame->data_len - 3));
 3971              		.loc 1 379 0
 3972 016e AE1D     		adds	r6, r5, #6
 380:libcanard/canard.c ****         if (ret < 0)
 3973              		.loc 1 380 0
 3974 0170 2B7B     		ldrb	r3, [r5, #12]	@ zero_extendqisi2
 379:libcanard/canard.c ****                                                  (uint8_t) (frame->data_len - 3));
 3975              		.loc 1 379 0
 3976 0172 033B     		subs	r3, r3, #3
 3977 0174 DBB2     		uxtb	r3, r3
 3978 0176 3246     		mov	r2, r6
 3979 0178 2146     		mov	r1, r4
 3980 017a 07F10C00 		add	r0, r7, #12
 3981 017e FFF7FEFF 		bl	bufferBlockPushBytes
 3982              	.LVL518:
 381:libcanard/canard.c ****         {
 3983              		.loc 1 381 0
ARM GAS  /tmp/ccbnltLA.s 			page 107


 3984 0182 0028     		cmp	r0, #0
 3985 0184 57DB     		blt	.L401
 387:libcanard/canard.c ****         rx_state->calculated_crc = crcAdd((uint16_t)rx_state->calculated_crc,
 3986              		.loc 1 387 0
 3987 0186 2B79     		ldrb	r3, [r5, #4]	@ zero_extendqisi2
 3988 0188 6A79     		ldrb	r2, [r5, #5]	@ zero_extendqisi2
 3989 018a 43EA0223 		orr	r3, r3, r2, lsl #8
 3990 018e 2383     		strh	r3, [r4, #24]	@ movhi
 389:libcanard/canard.c ****     }
 3991              		.loc 1 389 0
 3992 0190 2A7B     		ldrb	r2, [r5, #12]	@ zero_extendqisi2
 3993 0192 033A     		subs	r2, r2, #3
 388:libcanard/canard.c ****                                           frame->data + 2, (uint8_t)(frame->data_len - 3));
 3994              		.loc 1 388 0
 3995 0194 D2B2     		uxtb	r2, r2
 3996 0196 3146     		mov	r1, r6
 3997 0198 A08A     		ldrh	r0, [r4, #20]
 3998              	.LVL519:
 3999 019a FFF7FEFF 		bl	crcAdd
 4000              	.LVL520:
 4001 019e A082     		strh	r0, [r4, #20]	@ movhi
 4002              	.L371:
 4003              	.LBE39:
 474:libcanard/canard.c **** }
 4004              		.loc 1 474 0
 4005 01a0 E37D     		ldrb	r3, [r4, #23]	@ zero_extendqisi2
 4006 01a2 DA43     		mvns	r2, r3
 4007 01a4 C2F3C012 		ubfx	r2, r2, #7, #1
 4008 01a8 62F3C713 		bfi	r3, r2, #7, #1
 4009 01ac E375     		strb	r3, [r4, #23]
 4010 01ae 39E7     		b	.L358
 4011              	.LVL521:
 4012              	.L387:
 325:libcanard/canard.c ****             (first_frame && not_previous_tid);
 4013              		.loc 1 325 0
 4014 01b0 0123     		movs	r3, #1
 4015 01b2 BAE7     		b	.L366
 4016              	.L388:
 4017 01b4 0023     		movs	r3, #0
 4018 01b6 B8E7     		b	.L366
 4019              	.LVL522:
 4020              	.L399:
 330:libcanard/canard.c ****         rx_state->next_toggle = 0;
 4021              		.loc 1 330 0
 4022 01b8 E37D     		ldrb	r3, [r4, #23]	@ zero_extendqisi2
 4023              	.LVL523:
 4024 01ba 69F38603 		bfi	r3, r9, #2, #5
 331:libcanard/canard.c ****         releaseStatePayload(ins, rx_state);
 4025              		.loc 1 331 0
 4026 01be 6FF3C713 		bfc	r3, #7, #1
 4027 01c2 E375     		strb	r3, [r4, #23]
 4028              	.LVL524:
 332:libcanard/canard.c ****         if (!IS_START_OF_TRANSFER(tail_byte)) // missed the first frame
 4029              		.loc 1 332 0
 4030 01c4 2146     		mov	r1, r4
 4031 01c6 3846     		mov	r0, r7
 4032 01c8 FFF7FEFF 		bl	releaseStatePayload
ARM GAS  /tmp/ccbnltLA.s 			page 108


 4033              	.LVL525:
 333:libcanard/canard.c ****         {
 4034              		.loc 1 333 0
 4035 01cc BBF1000F 		cmp	fp, #0
 4036 01d0 ADD1     		bne	.L367
 335:libcanard/canard.c ****             return;
 4037              		.loc 1 335 0
 4038 01d2 E37D     		ldrb	r3, [r4, #23]	@ zero_extendqisi2
 4039 01d4 C3F38402 		ubfx	r2, r3, #2, #5
 4040 01d8 0132     		adds	r2, r2, #1
 4041 01da 62F38603 		bfi	r3, r2, #2, #5
 4042 01de E375     		strb	r3, [r4, #23]
 336:libcanard/canard.c ****         }
 4043              		.loc 1 336 0
 4044 01e0 20E7     		b	.L358
 4045              	.L400:
 4046              	.LBB40:
 342:libcanard/canard.c ****         CanardRxTransfer rx_transfer = {
 4047              		.loc 1 342 0
 4048 01e2 DDE90223 		ldrd	r2, [sp, #8]
 4049 01e6 C4E90223 		strd	r2, [r4, #8]
 343:libcanard/canard.c ****             .timestamp_usec = timestamp_usec,
 4050              		.loc 1 343 0
 4051 01ea 2022     		movs	r2, #32
 4052 01ec 0021     		movs	r1, #0
 4053 01ee 0AA8     		add	r0, sp, #40
 4054 01f0 FFF7FEFF 		bl	memset
 4055              	.LVL526:
 4056 01f4 DDE90223 		ldrd	r2, [sp, #8]
 4057 01f8 CDE90A23 		strd	r2, [sp, #40]
 345:libcanard/canard.c ****             .payload_len = (uint8_t)(frame->data_len - 1U),
 4058              		.loc 1 345 0
 4059 01fc 2B1D     		adds	r3, r5, #4
 343:libcanard/canard.c ****             .timestamp_usec = timestamp_usec,
 4060              		.loc 1 343 0
 4061 01fe 0C93     		str	r3, [sp, #48]
 346:libcanard/canard.c ****             .data_type_id = data_type_id,
 4062              		.loc 1 346 0
 4063 0200 2B7B     		ldrb	r3, [r5, #12]	@ zero_extendqisi2
 4064 0202 013B     		subs	r3, r3, #1
 4065 0204 DBB2     		uxtb	r3, r3
 343:libcanard/canard.c ****             .timestamp_usec = timestamp_usec,
 4066              		.loc 1 343 0
 4067 0206 ADF83C30 		strh	r3, [sp, #60]	@ movhi
 4068 020a BDF81C30 		ldrh	r3, [sp, #28]
 4069 020e ADF83E30 		strh	r3, [sp, #62]	@ movhi
 4070 0212 8DF84060 		strb	r6, [sp, #64]
 4071 0216 8DF84180 		strb	r8, [sp, #65]
 4072 021a 9DF81830 		ldrb	r3, [sp, #24]	@ zero_extendqisi2
 4073 021e 8DF84230 		strb	r3, [sp, #66]
 4074 0222 8DF843A0 		strb	r10, [sp, #67]
 354:libcanard/canard.c **** 
 4075              		.loc 1 354 0
 4076 0226 BB68     		ldr	r3, [r7, #8]
 4077 0228 0AA9     		add	r1, sp, #40
 4078 022a 3846     		mov	r0, r7
 4079 022c 9847     		blx	r3
ARM GAS  /tmp/ccbnltLA.s 			page 109


 4080              	.LVL527:
 356:libcanard/canard.c ****         return;
 4081              		.loc 1 356 0
 4082 022e 2046     		mov	r0, r4
 4083 0230 FFF7FEFF 		bl	prepareForNextTransfer
 4084              	.LVL528:
 4085 0234 F6E6     		b	.L358
 4086              	.LVL529:
 4087              	.L401:
 4088              	.LBE40:
 4089              	.LBB41:
 383:libcanard/canard.c ****             prepareForNextTransfer(rx_state);
 4090              		.loc 1 383 0
 4091 0236 2146     		mov	r1, r4
 4092 0238 3846     		mov	r0, r7
 4093              	.LVL530:
 4094 023a FFF7FEFF 		bl	releaseStatePayload
 4095              	.LVL531:
 384:libcanard/canard.c ****             return;
 4096              		.loc 1 384 0
 4097 023e 2046     		mov	r0, r4
 4098 0240 FFF7FEFF 		bl	prepareForNextTransfer
 4099              	.LVL532:
 385:libcanard/canard.c ****         }
 4100              		.loc 1 385 0
 4101 0244 EEE6     		b	.L358
 4102              	.L369:
 4103              	.LBE41:
 391:libcanard/canard.c ****     {
 4104              		.loc 1 391 0
 4105 0246 BBF1000F 		cmp	fp, #0
 4106 024a 02D1     		bne	.L372
 391:libcanard/canard.c ****     {
 4107              		.loc 1 391 0 is_stmt 0 discriminator 1
 4108 024c 19F0400F 		tst	r9, #64
 4109 0250 09D0     		beq	.L402
 4110              	.L372:
 4111              	.LBB42:
 406:libcanard/canard.c **** 
 4112              		.loc 1 406 0 is_stmt 1
 4113 0252 297B     		ldrb	r1, [r5, #12]	@ zero_extendqisi2
 4114 0254 0139     		subs	r1, r1, #1
 4115 0256 C9B2     		uxtb	r1, r1
 4116              	.LVL533:
 410:libcanard/canard.c ****         {
 4117              		.loc 1 410 0
 4118 0258 E28A     		ldrh	r2, [r4, #22]
 4119 025a C2F30902 		ubfx	r2, r2, #0, #10
 4120 025e 052A     		cmp	r2, #5
 4121 0260 61D8     		bhi	.L374
 4122              	.LVL534:
 408:libcanard/canard.c **** 
 4123              		.loc 1 408 0
 4124 0262 0023     		movs	r3, #0
 4125              	.LBB43:
 413:libcanard/canard.c ****                  (i < CANARD_MULTIFRAME_RX_PAYLOAD_HEAD_SIZE) && (tail_offset < frame_payload_size)
 4126              		.loc 1 413 0
ARM GAS  /tmp/ccbnltLA.s 			page 110


 4127 0264 25E0     		b	.L375
 4128              	.LVL535:
 4129              	.L402:
 4130              	.LBE43:
 4131              	.LBE42:
 4132              	.LBB49:
 393:libcanard/canard.c ****                                                  (uint8_t) (frame->data_len - 1));
 4133              		.loc 1 393 0
 4134 0266 2E1D     		adds	r6, r5, #4
 394:libcanard/canard.c ****         if (ret < 0)
 4135              		.loc 1 394 0
 4136 0268 2B7B     		ldrb	r3, [r5, #12]	@ zero_extendqisi2
 393:libcanard/canard.c ****                                                  (uint8_t) (frame->data_len - 1));
 4137              		.loc 1 393 0
 4138 026a 013B     		subs	r3, r3, #1
 4139 026c DBB2     		uxtb	r3, r3
 4140 026e 3246     		mov	r2, r6
 4141 0270 2146     		mov	r1, r4
 4142 0272 07F10C00 		add	r0, r7, #12
 4143 0276 FFF7FEFF 		bl	bufferBlockPushBytes
 4144              	.LVL536:
 395:libcanard/canard.c ****         {
 4145              		.loc 1 395 0
 4146 027a 0028     		cmp	r0, #0
 4147 027c 08DB     		blt	.L403
 402:libcanard/canard.c ****     }
 4148              		.loc 1 402 0
 4149 027e 2A7B     		ldrb	r2, [r5, #12]	@ zero_extendqisi2
 4150 0280 013A     		subs	r2, r2, #1
 401:libcanard/canard.c ****                                           frame->data, (uint8_t)(frame->data_len - 1));
 4151              		.loc 1 401 0
 4152 0282 D2B2     		uxtb	r2, r2
 4153 0284 3146     		mov	r1, r6
 4154 0286 A08A     		ldrh	r0, [r4, #20]
 4155              	.LVL537:
 4156 0288 FFF7FEFF 		bl	crcAdd
 4157              	.LVL538:
 4158 028c A082     		strh	r0, [r4, #20]	@ movhi
 4159              	.LBE49:
 392:libcanard/canard.c ****         const int16_t ret = bufferBlockPushBytes(&ins->allocator, rx_state, frame->data,
 4160              		.loc 1 392 0
 4161 028e 87E7     		b	.L371
 4162              	.LVL539:
 4163              	.L403:
 4164              	.LBB50:
 397:libcanard/canard.c ****             prepareForNextTransfer(rx_state);
 4165              		.loc 1 397 0
 4166 0290 2146     		mov	r1, r4
 4167 0292 3846     		mov	r0, r7
 4168              	.LVL540:
 4169 0294 FFF7FEFF 		bl	releaseStatePayload
 4170              	.LVL541:
 398:libcanard/canard.c ****             return;
 4171              		.loc 1 398 0
 4172 0298 2046     		mov	r0, r4
 4173 029a FFF7FEFF 		bl	prepareForNextTransfer
 4174              	.LVL542:
ARM GAS  /tmp/ccbnltLA.s 			page 111


 399:libcanard/canard.c ****         }
 4175              		.loc 1 399 0
 4176 029e C1E6     		b	.L358
 4177              	.LVL543:
 4178              	.L377:
 4179              	.LBE50:
 4180              	.LBB51:
 4181              	.LBB44:
 417:libcanard/canard.c ****             }
 4182              		.loc 1 417 0
 4183 02a0 E818     		adds	r0, r5, r3
 4184 02a2 90F804E0 		ldrb	lr, [r0, #4]	@ zero_extendqisi2
 4185 02a6 A018     		adds	r0, r4, r2
 4186 02a8 80F81AE0 		strb	lr, [r0, #26]
 415:libcanard/canard.c ****             {
 4187              		.loc 1 415 0
 4188 02ac 0132     		adds	r2, r2, #1
 4189              	.LVL544:
 4190 02ae 0133     		adds	r3, r3, #1
 4191              	.LVL545:
 4192 02b0 DBB2     		uxtb	r3, r3
 4193              	.LVL546:
 4194              	.L375:
 413:libcanard/canard.c ****                  (i < CANARD_MULTIFRAME_RX_PAYLOAD_HEAD_SIZE) && (tail_offset < frame_payload_size)
 4195              		.loc 1 413 0 discriminator 1
 4196 02b2 052A     		cmp	r2, #5
 4197 02b4 01D8     		bhi	.L376
 414:libcanard/canard.c ****                  i++, tail_offset++)
 4198              		.loc 1 414 0
 4199 02b6 8B42     		cmp	r3, r1
 4200 02b8 F2D3     		bcc	.L377
 4201              	.LVL547:
 4202              	.L376:
 4203              	.LBE44:
 446:libcanard/canard.c ****             .timestamp_usec = timestamp_usec,
 4204              		.loc 1 446 0
 4205 02ba DDE902BC 		ldrd	fp, [sp, #8]
 4206              	.LVL548:
 4207 02be CDE90ABC 		strd	fp, [sp, #40]
 448:libcanard/canard.c ****             .payload_middle = rx_state->buffer_blocks,
 4208              		.loc 1 448 0
 4209 02c2 04F11A02 		add	r2, r4, #26
 446:libcanard/canard.c ****             .timestamp_usec = timestamp_usec,
 4210              		.loc 1 446 0
 4211 02c6 0C92     		str	r2, [sp, #48]
 449:libcanard/canard.c ****             .payload_tail = (tail_offset >= frame_payload_size) ? NULL : (&frame->data[tail_offset]
 4212              		.loc 1 449 0
 4213 02c8 6268     		ldr	r2, [r4, #4]
 446:libcanard/canard.c ****             .timestamp_usec = timestamp_usec,
 4214              		.loc 1 446 0
 4215 02ca 0D92     		str	r2, [sp, #52]
 450:libcanard/canard.c ****             .payload_len = (uint16_t)(rx_state->payload_len + frame_payload_size),
 4216              		.loc 1 450 0
 4217 02cc 8B42     		cmp	r3, r1
 4218 02ce 5CD2     		bcs	.L392
 450:libcanard/canard.c ****             .payload_len = (uint16_t)(rx_state->payload_len + frame_payload_size),
 4219              		.loc 1 450 0 is_stmt 0 discriminator 1
ARM GAS  /tmp/ccbnltLA.s 			page 112


 4220 02d0 2B44     		add	r3, r3, r5
 4221              	.LVL549:
 4222 02d2 0433     		adds	r3, r3, #4
 4223              	.L383:
 446:libcanard/canard.c ****             .timestamp_usec = timestamp_usec,
 4224              		.loc 1 446 0 is_stmt 1
 4225 02d4 0E93     		str	r3, [sp, #56]
 451:libcanard/canard.c ****             .data_type_id = data_type_id,
 4226              		.loc 1 451 0
 4227 02d6 E38A     		ldrh	r3, [r4, #22]
 4228 02d8 C3F30903 		ubfx	r3, r3, #0, #10
 4229 02dc 1944     		add	r1, r1, r3
 4230              	.LVL550:
 446:libcanard/canard.c ****             .timestamp_usec = timestamp_usec,
 4231              		.loc 1 446 0
 4232 02de ADF83C10 		strh	r1, [sp, #60]	@ movhi
 4233 02e2 BDF81C30 		ldrh	r3, [sp, #28]
 4234 02e6 ADF83E30 		strh	r3, [sp, #62]	@ movhi
 4235 02ea 8DF84060 		strb	r6, [sp, #64]
 4236 02ee 8DF84180 		strb	r8, [sp, #65]
 4237 02f2 9DF81830 		ldrb	r3, [sp, #24]	@ zero_extendqisi2
 4238 02f6 8DF84230 		strb	r3, [sp, #66]
 4239 02fa 8DF843A0 		strb	r10, [sp, #67]
 459:libcanard/canard.c **** 
 4240              		.loc 1 459 0
 4241 02fe 0023     		movs	r3, #0
 4242 0300 6360     		str	r3, [r4, #4]
 462:libcanard/canard.c ****         if (rx_state->calculated_crc == rx_state->payload_crc)
 4243              		.loc 1 462 0
 4244 0302 2A7B     		ldrb	r2, [r5, #12]	@ zero_extendqisi2
 4245 0304 013A     		subs	r2, r2, #1
 4246 0306 291D     		adds	r1, r5, #4
 4247 0308 A08A     		ldrh	r0, [r4, #20]
 4248 030a FFF7FEFF 		bl	crcAdd
 4249              	.LVL551:
 4250 030e A082     		strh	r0, [r4, #20]	@ movhi
 463:libcanard/canard.c ****         {
 4251              		.loc 1 463 0
 4252 0310 238B     		ldrh	r3, [r4, #24]
 4253 0312 9842     		cmp	r0, r3
 4254 0314 3BD0     		beq	.L404
 4255              	.L384:
 469:libcanard/canard.c ****         prepareForNextTransfer(rx_state);
 4256              		.loc 1 469 0
 4257 0316 0AA9     		add	r1, sp, #40
 4258 0318 3846     		mov	r0, r7
 4259 031a FFF7FEFF 		bl	canardReleaseRxTransferPayload
 4260              	.LVL552:
 470:libcanard/canard.c ****         return;
 4261              		.loc 1 470 0
 4262 031e 2046     		mov	r0, r4
 4263 0320 FFF7FEFF 		bl	prepareForNextTransfer
 4264              	.LVL553:
 4265 0324 7EE6     		b	.L358
 4266              	.LVL554:
 4267              	.L374:
 4268              	.LBB45:
ARM GAS  /tmp/ccbnltLA.s 			page 113


 423:libcanard/canard.c ****             if (block != NULL)          // If there's no middle, that's fine, we'll use only head a
 4269              		.loc 1 423 0
 4270 0326 6068     		ldr	r0, [r4, #4]
 4271              	.LVL555:
 424:libcanard/canard.c ****             {
 4272              		.loc 1 424 0
 4273 0328 10B1     		cbz	r0, .L405
 4274 032a 4FF0060E 		mov	lr, #6
 4275 032e 04E0     		b	.L378
 4276              	.L405:
 4277              	.LBE45:
 408:libcanard/canard.c **** 
 4278              		.loc 1 408 0
 4279 0330 0023     		movs	r3, #0
 4280 0332 C2E7     		b	.L376
 4281              	.LVL556:
 4282              	.L379:
 4283              	.LBB48:
 4284              	.LBB46:
 430:libcanard/canard.c ****                 }
 4285              		.loc 1 430 0
 4286 0334 0EF11C0E 		add	lr, lr, #28
 4287              	.LVL557:
 429:libcanard/canard.c ****                     offset += CANARD_BUFFER_BLOCK_DATA_SIZE;
 4288              		.loc 1 429 0
 4289 0338 1846     		mov	r0, r3
 4290              	.LVL558:
 4291              	.L378:
 427:libcanard/canard.c ****                 {
 4292              		.loc 1 427 0
 4293 033a 0368     		ldr	r3, [r0]
 4294 033c 002B     		cmp	r3, #0
 4295 033e F9D1     		bne	.L379
 432:libcanard/canard.c **** 
 4296              		.loc 1 432 0
 4297 0340 28B1     		cbz	r0, .L406
 434:libcanard/canard.c ****                 CANARD_ASSERT(offset_within_block < CANARD_BUFFER_BLOCK_DATA_SIZE);
 4298              		.loc 1 434 0
 4299 0342 A2EB0E02 		sub	r2, r2, lr
 4300              	.LVL559:
 435:libcanard/canard.c **** 
 4301              		.loc 1 435 0
 4302 0346 1B2A     		cmp	r2, #27
 4303 0348 08D8     		bhi	.L407
 4304 034a 0023     		movs	r3, #0
 4305 034c 18E0     		b	.L381
 4306              	.LVL560:
 4307              	.L406:
 432:libcanard/canard.c **** 
 4308              		.loc 1 432 0 discriminator 1
 4309 034e 164B     		ldr	r3, .L408+16
 4310 0350 134A     		ldr	r2, .L408+8
 4311 0352 4FF4D871 		mov	r1, #432
 4312              	.LVL561:
 4313 0356 1348     		ldr	r0, .L408+12
 4314              	.LVL562:
 4315 0358 FFF7FEFF 		bl	__assert_func
ARM GAS  /tmp/ccbnltLA.s 			page 114


 4316              	.LVL563:
 4317              	.L407:
 435:libcanard/canard.c **** 
 4318              		.loc 1 435 0 discriminator 1
 4319 035c 134B     		ldr	r3, .L408+20
 4320 035e 104A     		ldr	r2, .L408+8
 4321              	.LVL564:
 4322 0360 40F2B311 		movw	r1, #435
 4323              	.LVL565:
 4324 0364 0F48     		ldr	r0, .L408+12
 4325              	.LVL566:
 4326 0366 FFF7FEFF 		bl	__assert_func
 4327              	.LVL567:
 4328              	.L382:
 4329              	.LBB47:
 441:libcanard/canard.c ****                 }
 4330              		.loc 1 441 0
 4331 036a 05EB030E 		add	lr, r5, r3
 4332 036e 9EF804C0 		ldrb	ip, [lr, #4]	@ zero_extendqisi2
 4333 0372 00EB020E 		add	lr, r0, r2
 4334 0376 8EF804C0 		strb	ip, [lr, #4]
 439:libcanard/canard.c ****                 {
 4335              		.loc 1 439 0
 4336 037a 0132     		adds	r2, r2, #1
 4337              	.LVL568:
 4338 037c 0133     		adds	r3, r3, #1
 4339              	.LVL569:
 4340 037e DBB2     		uxtb	r3, r3
 4341              	.LVL570:
 4342              	.L381:
 437:libcanard/canard.c ****                      (i < CANARD_BUFFER_BLOCK_DATA_SIZE) && (tail_offset < frame_payload_size);
 4343              		.loc 1 437 0 discriminator 1
 4344 0380 1B2A     		cmp	r2, #27
 4345 0382 9AD8     		bhi	.L376
 438:libcanard/canard.c ****                      i++, tail_offset++)
 4346              		.loc 1 438 0
 4347 0384 8B42     		cmp	r3, r1
 4348 0386 F0D3     		bcc	.L382
 4349 0388 97E7     		b	.L376
 4350              	.LVL571:
 4351              	.L392:
 4352              	.LBE47:
 4353              	.LBE46:
 4354              	.LBE48:
 450:libcanard/canard.c ****             .payload_len = (uint16_t)(rx_state->payload_len + frame_payload_size),
 4355              		.loc 1 450 0
 4356 038a 0023     		movs	r3, #0
 4357              	.LVL572:
 4358 038c A2E7     		b	.L383
 4359              	.LVL573:
 4360              	.L404:
 465:libcanard/canard.c ****         }
 4361              		.loc 1 465 0
 4362 038e BB68     		ldr	r3, [r7, #8]
 4363 0390 0AA9     		add	r1, sp, #40
 4364 0392 3846     		mov	r0, r7
 4365 0394 9847     		blx	r3
ARM GAS  /tmp/ccbnltLA.s 			page 115


 4366              	.LVL574:
 4367 0396 BEE7     		b	.L384
 4368              	.L409:
 4369              		.align	2
 4370              	.L408:
 4371 0398 80841E00 		.word	2000000
 4372 039c 00000000 		.word	.LC25
 4373 03a0 00000000 		.word	.LANCHOR13
 4374 03a4 14000000 		.word	.LC1
 4375 03a8 18000000 		.word	.LC26
 4376 03ac 30000000 		.word	.LC27
 4377              	.LBE51:
 4378              		.cfi_endproc
 4379              	.LFE8:
 4381              		.section	.text.canardGetPoolAllocatorStatistics,"ax",%progbits
 4382              		.align	1
 4383              		.global	canardGetPoolAllocatorStatistics
 4384              		.syntax unified
 4385              		.thumb
 4386              		.thumb_func
 4387              		.fpu softvfp
 4389              	canardGetPoolAllocatorStatistics:
 4390              	.LFB13:
 765:libcanard/canard.c ****     return ins->allocator.statistics;
 4391              		.loc 1 765 0
 4392              		.cfi_startproc
 4393              		@ args = 0, pretend = 0, frame = 0
 4394              		@ frame_needed = 0, uses_anonymous_args = 0
 4395              		@ link register save eliminated.
 4396              	.LVL575:
 4397 0000 0346     		mov	r3, r0
 766:libcanard/canard.c **** }
 4398              		.loc 1 766 0
 4399 0002 0869     		ldr	r0, [r1, #16]
 4400              	.LVL576:
 4401 0004 1860     		str	r0, [r3]	@ unaligned
 4402 0006 8A8A     		ldrh	r2, [r1, #20]	@ unaligned
 4403 0008 9A80     		strh	r2, [r3, #4]	@ unaligned
 767:libcanard/canard.c **** 
 4404              		.loc 1 767 0
 4405 000a 1846     		mov	r0, r3
 4406 000c 7047     		bx	lr
 4407              		.cfi_endproc
 4408              	.LFE13:
 4410              		.global	__aeabi_fmul
 4411              		.section	.text.canardConvertNativeFloatToFloat16,"ax",%progbits
 4412              		.align	1
 4413              		.global	canardConvertNativeFloatToFloat16
 4414              		.syntax unified
 4415              		.thumb
 4416              		.thumb_func
 4417              		.fpu softvfp
 4419              	canardConvertNativeFloatToFloat16:
 4420              	.LFB14:
 770:libcanard/canard.c ****     CANARD_ASSERT(sizeof(float) == 4);
 4421              		.loc 1 770 0
 4422              		.cfi_startproc
ARM GAS  /tmp/ccbnltLA.s 			page 116


 4423              		@ args = 0, pretend = 0, frame = 0
 4424              		@ frame_needed = 0, uses_anonymous_args = 0
 4425              	.LVL577:
 4426 0000 10B5     		push	{r4, lr}
 4427              	.LCFI55:
 4428              		.cfi_def_cfa_offset 8
 4429              		.cfi_offset 4, -8
 4430              		.cfi_offset 14, -4
 4431              	.LVL578:
 787:libcanard/canard.c ****     in.u ^= sign;
 4432              		.loc 1 787 0
 4433 0002 00F00044 		and	r4, r0, #-2147483648
 4434              	.LVL579:
 788:libcanard/canard.c **** 
 4435              		.loc 1 788 0
 4436 0006 6040     		eors	r0, r0, r4
 4437              	.LVL580:
 792:libcanard/canard.c ****     {
 4438              		.loc 1 792 0
 4439 0008 B0F1FF4F 		cmp	r0, #2139095040
 4440 000c 03D3     		bcc	.L412
 794:libcanard/canard.c ****     }
 4441              		.loc 1 794 0
 4442 000e 16D9     		bls	.L415
 4443 0010 47F6FF70 		movw	r0, #32767
 4444 0014 10E0     		b	.L413
 4445              	.L412:
 799:libcanard/canard.c ****         in.u -= round_mask;
 4446              		.loc 1 799 0
 4447 0016 4FF0F061 		mov	r1, #125829120
 4448 001a 20F47F60 		bic	r0, r0, #4080
 4449 001e 20F00F00 		bic	r0, r0, #15
 4450 0022 FFF7FEFF 		bl	__aeabi_fmul
 4451              	.LVL581:
 800:libcanard/canard.c ****         if (in.u > f16inf.u)
 4452              		.loc 1 800 0
 4453 0026 00F58050 		add	r0, r0, #4096
 4454              	.LVL582:
 801:libcanard/canard.c ****         {
 4455              		.loc 1 801 0
 4456 002a B0F1786F 		cmp	r0, #260046848
 4457 002e 01D9     		bls	.L414
 803:libcanard/canard.c ****         }
 4458              		.loc 1 803 0
 4459 0030 4FF07860 		mov	r0, #260046848
 4460              	.LVL583:
 4461              	.L414:
 805:libcanard/canard.c ****     }
 4462              		.loc 1 805 0
 4463 0034 C0F34F30 		ubfx	r0, r0, #13, #16
 4464              	.LVL584:
 4465              	.L413:
 811:libcanard/canard.c **** 
 4466              		.loc 1 811 0
 4467 0038 40EA1440 		orr	r0, r0, r4, lsr #16
 4468              	.LVL585:
 4469 003c 10BD     		pop	{r4, pc}
ARM GAS  /tmp/ccbnltLA.s 			page 117


 4470              	.LVL586:
 4471              	.L415:
 794:libcanard/canard.c ****     }
 4472              		.loc 1 794 0
 4473 003e 4FF4F840 		mov	r0, #31744
 4474 0042 F9E7     		b	.L413
 4475              		.cfi_endproc
 4476              	.LFE14:
 4478              		.global	__aeabi_fcmpge
 4479              		.section	.text.canardConvertFloat16ToNativeFloat,"ax",%progbits
 4480              		.align	1
 4481              		.global	canardConvertFloat16ToNativeFloat
 4482              		.syntax unified
 4483              		.thumb
 4484              		.thumb_func
 4485              		.fpu softvfp
 4487              	canardConvertFloat16ToNativeFloat:
 4488              	.LFB15:
 814:libcanard/canard.c ****     CANARD_ASSERT(sizeof(float) == 4);
 4489              		.loc 1 814 0
 4490              		.cfi_startproc
 4491              		@ args = 0, pretend = 0, frame = 0
 4492              		@ frame_needed = 0, uses_anonymous_args = 0
 4493              	.LVL587:
 4494 0000 70B5     		push	{r4, r5, r6, lr}
 4495              	.LCFI56:
 4496              		.cfi_def_cfa_offset 16
 4497              		.cfi_offset 4, -16
 4498              		.cfi_offset 5, -12
 4499              		.cfi_offset 6, -8
 4500              		.cfi_offset 14, -4
 4501 0002 0446     		mov	r4, r0
 828:libcanard/canard.c ****     if (out.f >= was_inf_nan.f)
 4502              		.loc 1 828 0
 4503 0004 4FF0EF41 		mov	r1, #2004877312
 4504 0008 0948     		ldr	r0, .L422
 4505              	.LVL588:
 4506 000a 00EA4430 		and	r0, r0, r4, lsl #13
 4507 000e FFF7FEFF 		bl	__aeabi_fmul
 4508              	.LVL589:
 4509 0012 0646     		mov	r6, r0
 4510 0014 0546     		mov	r5, r0
 4511              	.LVL590:
 829:libcanard/canard.c ****     {
 4512              		.loc 1 829 0
 4513 0016 4FF08F41 		mov	r1, #1199570944
 4514 001a FFF7FEFF 		bl	__aeabi_fcmpge
 4515              	.LVL591:
 4516 001e 08B1     		cbz	r0, .L418
 831:libcanard/canard.c ****     }
 4517              		.loc 1 831 0
 4518 0020 46F0FF45 		orr	r5, r6, #2139095040
 4519              	.L418:
 833:libcanard/canard.c **** 
 4520              		.loc 1 833 0
 4521 0024 2404     		lsls	r4, r4, #16
 4522 0026 04F00040 		and	r0, r4, #-2147483648
ARM GAS  /tmp/ccbnltLA.s 			page 118


 4523              	.LVL592:
 835:libcanard/canard.c **** }
 4524              		.loc 1 835 0
 4525 002a 2843     		orrs	r0, r0, r5
 836:libcanard/canard.c **** 
 4526              		.loc 1 836 0
 4527 002c 70BD     		pop	{r4, r5, r6, pc}
 4528              	.LVL593:
 4529              	.L423:
 4530 002e 00BF     		.align	2
 4531              	.L422:
 4532 0030 00E0FF0F 		.word	268427264
 4533              		.cfi_endproc
 4534              	.LFE15:
 4536              		.section	.rodata.__func__.4786,"a",%progbits
 4537              		.align	2
 4538              		.set	.LANCHOR8,. + 0
 4541              	__func__.4786:
 4542 0000 63616E61 		.ascii	"canardInit\000"
 4542      7264496E 
 4542      697400
 4543              		.section	.rodata.__func__.4791,"a",%progbits
 4544              		.align	2
 4545              		.set	.LANCHOR9,. + 0
 4548              	__func__.4791:
 4549 0000 63616E61 		.ascii	"canardGetUserReference\000"
 4549      72644765 
 4549      74557365 
 4549      72526566 
 4549      6572656E 
 4550              		.section	.rodata.__func__.4796,"a",%progbits
 4551              		.align	2
 4552              		.set	.LANCHOR10,. + 0
 4555              	__func__.4796:
 4556 0000 63616E61 		.ascii	"canardSetLocalNodeID\000"
 4556      72645365 
 4556      744C6F63 
 4556      616C4E6F 
 4556      64654944 
 4557              		.section	.rodata.__func__.4849,"a",%progbits
 4558              		.align	2
 4559              		.set	.LANCHOR13,. + 0
 4562              	__func__.4849:
 4563 0000 63616E61 		.ascii	"canardHandleRxFrame\000"
 4563      72644861 
 4563      6E646C65 
 4563      52784672 
 4563      616D6500 
 4564              		.section	.rodata.__func__.4904,"a",%progbits
 4565              		.align	2
 4566              		.set	.LANCHOR11,. + 0
 4569              	__func__.4904:
 4570 0000 63616E61 		.ascii	"canardDecodeScalar\000"
 4570      72644465 
 4570      636F6465 
 4570      5363616C 
 4570      617200
ARM GAS  /tmp/ccbnltLA.s 			page 119


 4571              		.section	.rodata.__func__.4912,"a",%progbits
 4572              		.align	2
 4573              		.set	.LANCHOR12,. + 0
 4576              	__func__.4912:
 4577 0000 63616E61 		.ascii	"canardEncodeScalar\000"
 4577      7264456E 
 4577      636F6465 
 4577      5363616C 
 4577      617200
 4578              		.section	.rodata.__func__.4966,"a",%progbits
 4579              		.align	2
 4580              		.set	.LANCHOR1,. + 0
 4583              	__func__.4966:
 4584 0000 696E6372 		.ascii	"incrementTransferID\000"
 4584      656D656E 
 4584      74547261 
 4584      6E736665 
 4584      72494400 
 4585              		.section	.rodata.__func__.4975,"a",%progbits
 4586              		.align	2
 4587              		.set	.LANCHOR7,. + 0
 4590              	__func__.4975:
 4591 0000 656E7175 		.ascii	"enqueueTxFrames\000"
 4591      65756554 
 4591      78467261 
 4591      6D657300 
 4592              		.section	.rodata.__func__.4993,"a",%progbits
 4593              		.align	2
 4594              		.set	.LANCHOR0,. + 0
 4597              	__func__.4993:
 4598 0000 70757368 		.ascii	"pushTxQueue\000"
 4598      54785175 
 4598      65756500 
 4599              		.section	.rodata.__func__.5018,"a",%progbits
 4600              		.align	2
 4601              		.set	.LANCHOR3,. + 0
 4604              	__func__.5018:
 4605 0000 70726570 		.ascii	"prepareForNextTransfer\000"
 4605      61726546 
 4605      6F724E65 
 4605      78745472 
 4605      616E7366 
 4606              		.section	.rodata.__func__.5094,"a",%progbits
 4607              		.align	2
 4608              		.set	.LANCHOR4,. + 0
 4611              	__func__.5094:
 4612 0000 636F7079 		.ascii	"copyBitArray\000"
 4612      42697441 
 4612      72726179 
 4612      00
 4613              		.section	.rodata.__func__.5111,"a",%progbits
 4614              		.align	2
 4615              		.set	.LANCHOR5,. + 0
 4618              	__func__.5111:
 4619 0000 64657363 		.ascii	"descatterTransferPayload\000"
 4619      61747465 
 4619      72547261 
ARM GAS  /tmp/ccbnltLA.s 			page 120


 4619      6E736665 
 4619      72506179 
 4620              		.section	.rodata.__func__.5137,"a",%progbits
 4621              		.align	2
 4622              		.set	.LANCHOR6,. + 0
 4625              	__func__.5137:
 4626 0000 73776170 		.ascii	"swapByteOrder\000"
 4626      42797465 
 4626      4F726465 
 4626      7200
 4627              		.section	.rodata.__func__.5188,"a",%progbits
 4628              		.align	2
 4629              		.set	.LANCHOR2,. + 0
 4632              	__func__.5188:
 4633 0000 66726565 		.ascii	"freeBlock\000"
 4633      426C6F63 
 4633      6B00
 4634              		.section	.rodata.canardDecodeScalar.str1.4,"aMS",%progbits,1
 4635              		.align	2
 4636              	.LC20:
 4637 0000 28726573 		.ascii	"(result > 0) && (result <= 64) && (result <= bit_le"
 4637      756C7420 
 4637      3E203029 
 4637      20262620 
 4637      28726573 
 4638 0033 6E677468 		.ascii	"ngth)\000"
 4638      2900
 4639 0039 000000   		.space	3
 4640              	.LC21:
 4641 003c 28737464 		.ascii	"(std_byte_length > 0) && (std_byte_length <= 8)\000"
 4641      5F627974 
 4641      655F6C65 
 4641      6E677468 
 4641      203E2030 
 4642              		.section	.rodata.canardEncodeScalar.str1.4,"aMS",%progbits,1
 4643              		.align	2
 4644              	.LC22:
 4645 0000 64657374 		.ascii	"destination != ((void *)0)\000"
 4645      696E6174 
 4645      696F6E20 
 4645      213D2028 
 4645      28766F69 
 4646 001b 00       		.space	1
 4647              	.LC23:
 4648 001c 76616C75 		.ascii	"value != ((void *)0)\000"
 4648      6520213D 
 4648      20282876 
 4648      6F696420 
 4648      2A293029 
 4649 0031 000000   		.space	3
 4650              	.LC24:
 4651 0034 7374645F 		.ascii	"std_byte_length > 0\000"
 4651      62797465 
 4651      5F6C656E 
 4651      67746820 
 4651      3E203000 
 4652              		.section	.rodata.canardHandleRxFrame.str1.4,"aMS",%progbits,1
ARM GAS  /tmp/ccbnltLA.s 			page 121


 4653              		.align	2
 4654              	.LC25:
 4655 0000 72785F73 		.ascii	"rx_state != ((void *)0)\000"
 4655      74617465 
 4655      20213D20 
 4655      2828766F 
 4655      6964202A 
 4656              	.LC26:
 4657 0018 626C6F63 		.ascii	"block != ((void *)0)\000"
 4657      6B20213D 
 4657      20282876 
 4657      6F696420 
 4657      2A293029 
 4658 002d 000000   		.space	3
 4659              	.LC27:
 4660 0030 6F666673 		.ascii	"offset_within_block < (32U - __builtin_offsetof (Ca"
 4660      65745F77 
 4660      69746869 
 4660      6E5F626C 
 4660      6F636B20 
 4661 0063 6E617264 		.ascii	"nardBufferBlock, data))\000"
 4661      42756666 
 4661      6572426C 
 4661      6F636B2C 
 4661      20646174 
 4662              		.section	.rodata.canardInit.str1.4,"aMS",%progbits,1
 4663              		.align	2
 4664              	.LC18:
 4665 0000 6F75745F 		.ascii	"out_ins != ((void *)0)\000"
 4665      696E7320 
 4665      213D2028 
 4665      28766F69 
 4665      64202A29 
 4666              		.section	.rodata.canardSetLocalNodeID.str1.4,"aMS",%progbits,1
 4667              		.align	2
 4668              	.LC19:
 4669 0000 3000     		.ascii	"0\000"
 4670              		.section	.rodata.copyBitArray.str1.4,"aMS",%progbits,1
 4671              		.align	2
 4672              	.LC6:
 4673 0000 7372635F 		.ascii	"src_len > 0U\000"
 4673      6C656E20 
 4673      3E203055 
 4673      00
 4674              		.section	.rodata.descatterTransferPayload.str1.4,"aMS",%progbits,1
 4675              		.align	2
 4676              	.LC7:
 4677 0000 7472616E 		.ascii	"transfer != 0\000"
 4677      73666572 
 4677      20213D20 
 4677      3000
 4678 000e 0000     		.space	2
 4679              	.LC8:
 4680 0010 6269745F 		.ascii	"bit_length > 0\000"
 4680      6C656E67 
 4680      7468203E 
 4680      203000
ARM GAS  /tmp/ccbnltLA.s 			page 122


 4681 001f 00       		.space	1
 4682              	.LC9:
 4683 0020 72656D61 		.ascii	"remaining_bits > 0\000"
 4683      696E696E 
 4683      675F6269 
 4683      7473203E 
 4683      203000
 4684 0033 00       		.space	1
 4685              	.LC10:
 4686 0034 696E7075 		.ascii	"input_bit_offset >= block_bit_offset\000"
 4686      745F6269 
 4686      745F6F66 
 4686      66736574 
 4686      203E3D20 
 4687 0059 000000   		.space	3
 4688              	.LC11:
 4689 005c 626C6F63 		.ascii	"block_end_bit_offset > block_bit_offset\000"
 4689      6B5F656E 
 4689      645F6269 
 4689      745F6F66 
 4689      66736574 
 4690              	.LC12:
 4691 0084 72656D61 		.ascii	"remaining_bit_length <= remaining_bits\000"
 4691      696E696E 
 4691      675F6269 
 4691      745F6C65 
 4691      6E677468 
 4692 00ab 00       		.space	1
 4693              	.LC13:
 4694 00ac 696E7075 		.ascii	"input_bit_offset <= transfer->payload_len * 8\000"
 4694      745F6269 
 4694      745F6F66 
 4694      66736574 
 4694      203C3D20 
 4695 00da 0000     		.space	2
 4696              	.LC14:
 4697 00dc 6F757470 		.ascii	"output_bit_offset <= 64\000"
 4697      75745F62 
 4697      69745F6F 
 4697      66667365 
 4697      74203C3D 
 4698              	.LC15:
 4699 00f4 72656D61 		.ascii	"remaining_bit_length == 0\000"
 4699      696E696E 
 4699      675F6269 
 4699      745F6C65 
 4699      6E677468 
 4700              		.section	.rodata.enqueueTxFrames.str1.4,"aMS",%progbits,1
 4701              		.align	2
 4702              	.LC17:
 4703 0000 2863616E 		.ascii	"(can_id & 0x1FFFFFFFU) == can_id\000"
 4703      5F696420 
 4703      26203078 
 4703      31464646 
 4703      46464646 
 4704              		.section	.rodata.freeBlock.str1.4,"aMS",%progbits,1
 4705              		.align	2
ARM GAS  /tmp/ccbnltLA.s 			page 123


 4706              	.LC4:
 4707 0000 616C6C6F 		.ascii	"allocator->statistics.current_usage_blocks > 0\000"
 4707      6361746F 
 4707      722D3E73 
 4707      74617469 
 4707      73746963 
 4708              		.section	.rodata.incrementTransferID.str1.4,"aMS",%progbits,1
 4709              		.align	2
 4710              	.LC3:
 4711 0000 7472616E 		.ascii	"transfer_id != ((void *)0)\000"
 4711      73666572 
 4711      5F696420 
 4711      213D2028 
 4711      28766F69 
 4712              		.section	.rodata.prepareForNextTransfer.str1.4,"aMS",%progbits,1
 4713              		.align	2
 4714              	.LC5:
 4715 0000 73746174 		.ascii	"state->buffer_blocks == ((void *)0)\000"
 4715      652D3E62 
 4715      75666665 
 4715      725F626C 
 4715      6F636B73 
 4716              		.section	.rodata.pushTxQueue.str1.4,"aMS",%progbits,1
 4717              		.align	2
 4718              	.LC0:
 4719 0000 696E7320 		.ascii	"ins != ((void *)0)\000"
 4719      213D2028 
 4719      28766F69 
 4719      64202A29 
 4719      302900
 4720 0013 00       		.space	1
 4721              	.LC1:
 4722 0014 6C696263 		.ascii	"libcanard/canard.c\000"
 4722      616E6172 
 4722      642F6361 
 4722      6E617264 
 4722      2E6300
 4723 0027 00       		.space	1
 4724              	.LC2:
 4725 0028 6974656D 		.ascii	"item->frame.data_len > 0\000"
 4725      2D3E6672 
 4725      616D652E 
 4725      64617461 
 4725      5F6C656E 
 4726              		.section	.rodata.swapByteOrder.str1.4,"aMS",%progbits,1
 4727              		.align	2
 4728              	.LC16:
 4729 0000 64617461 		.ascii	"data != ((void *)0)\000"
 4729      20213D20 
 4729      2828766F 
 4729      6964202A 
 4729      29302900 
 4730              		.text
 4731              	.Letext0:
 4732              		.file 2 "/usr/bin/gcc-arm-none-eabi-6-2017-q2-update/arm-none-eabi/include/machine/_default_types.
 4733              		.file 3 "/usr/bin/gcc-arm-none-eabi-6-2017-q2-update/arm-none-eabi/include/sys/_stdint.h"
 4734              		.file 4 "/usr/bin/gcc-arm-none-eabi-6-2017-q2-update/lib/gcc/arm-none-eabi/6.3.1/include/stddef.h"
ARM GAS  /tmp/ccbnltLA.s 			page 124


 4735              		.file 5 "libcanard/canard.h"
 4736              		.file 6 "/usr/bin/gcc-arm-none-eabi-6-2017-q2-update/arm-none-eabi/include/sys/lock.h"
 4737              		.file 7 "/usr/bin/gcc-arm-none-eabi-6-2017-q2-update/arm-none-eabi/include/sys/_types.h"
 4738              		.file 8 "/usr/bin/gcc-arm-none-eabi-6-2017-q2-update/arm-none-eabi/include/sys/reent.h"
 4739              		.file 9 "/usr/bin/gcc-arm-none-eabi-6-2017-q2-update/arm-none-eabi/include/assert.h"
ARM GAS  /tmp/ccbnltLA.s 			page 125


DEFINED SYMBOLS
                            *ABS*:0000000000000000 canard.c
     /tmp/ccbnltLA.s:16     .text.computeTransferIDForwardDistance:0000000000000000 $t
     /tmp/ccbnltLA.s:22     .text.computeTransferIDForwardDistance:0000000000000000 computeTransferIDForwardDistance
     /tmp/ccbnltLA.s:53     .text.isPriorityHigher:0000000000000000 $t
     /tmp/ccbnltLA.s:59     .text.isPriorityHigher:0000000000000000 isPriorityHigher
     /tmp/ccbnltLA.s:166    .text.extractTransferType:0000000000000000 $t
     /tmp/ccbnltLA.s:172    .text.extractTransferType:0000000000000000 extractTransferType
     /tmp/ccbnltLA.s:207    .text.extractDataType:0000000000000000 $t
     /tmp/ccbnltLA.s:213    .text.extractDataType:0000000000000000 extractDataType
     /tmp/ccbnltLA.s:254    .text.findRxState:0000000000000000 $t
     /tmp/ccbnltLA.s:260    .text.findRxState:0000000000000000 findRxState
     /tmp/ccbnltLA.s:286    .text.isBigEndian:0000000000000000 $t
     /tmp/ccbnltLA.s:292    .text.isBigEndian:0000000000000000 isBigEndian
     /tmp/ccbnltLA.s:306    .text.crcAddByte:0000000000000000 $t
     /tmp/ccbnltLA.s:312    .text.crcAddByte:0000000000000000 crcAddByte
     /tmp/ccbnltLA.s:363    .text.crcAddSignature:0000000000000000 $t
     /tmp/ccbnltLA.s:369    .text.crcAddSignature:0000000000000000 crcAddSignature
     /tmp/ccbnltLA.s:419    .text.crcAdd:0000000000000000 $t
     /tmp/ccbnltLA.s:425    .text.crcAdd:0000000000000000 crcAdd
     /tmp/ccbnltLA.s:466    .text.initPoolAllocator:0000000000000000 $t
     /tmp/ccbnltLA.s:472    .text.initPoolAllocator:0000000000000000 initPoolAllocator
     /tmp/ccbnltLA.s:530    .text.allocateBlock:0000000000000000 $t
     /tmp/ccbnltLA.s:536    .text.allocateBlock:0000000000000000 allocateBlock
     /tmp/ccbnltLA.s:583    .text.createBufferBlock:0000000000000000 $t
     /tmp/ccbnltLA.s:589    .text.createBufferBlock:0000000000000000 createBufferBlock
     /tmp/ccbnltLA.s:619    .text.bufferBlockPushBytes:0000000000000000 $t
     /tmp/ccbnltLA.s:625    .text.bufferBlockPushBytes:0000000000000000 bufferBlockPushBytes
     /tmp/ccbnltLA.s:877    .text.pushTxQueue:0000000000000000 $t
     /tmp/ccbnltLA.s:883    .text.pushTxQueue:0000000000000000 pushTxQueue
     /tmp/ccbnltLA.s:988    .text.pushTxQueue:0000000000000070 $d
     /tmp/ccbnltLA.s:996    .text.incrementTransferID:0000000000000000 $t
     /tmp/ccbnltLA.s:1002   .text.incrementTransferID:0000000000000000 incrementTransferID
     /tmp/ccbnltLA.s:1041   .text.incrementTransferID:0000000000000024 $d
     /tmp/ccbnltLA.s:1048   .text.freeBlock:0000000000000000 $t
     /tmp/ccbnltLA.s:1054   .text.freeBlock:0000000000000000 freeBlock
     /tmp/ccbnltLA.s:1092   .text.freeBlock:0000000000000020 $d
     /tmp/ccbnltLA.s:1099   .text.releaseStatePayload:0000000000000000 $t
     /tmp/ccbnltLA.s:1105   .text.releaseStatePayload:0000000000000000 releaseStatePayload
     /tmp/ccbnltLA.s:1154   .text.prepareForNextTransfer:0000000000000000 $t
     /tmp/ccbnltLA.s:1160   .text.prepareForNextTransfer:0000000000000000 prepareForNextTransfer
     /tmp/ccbnltLA.s:1202   .text.prepareForNextTransfer:0000000000000034 $d
     /tmp/ccbnltLA.s:1209   .text.copyBitArray:0000000000000000 $t
     /tmp/ccbnltLA.s:1215   .text.copyBitArray:0000000000000000 copyBitArray
     /tmp/ccbnltLA.s:1333   .text.copyBitArray:0000000000000088 $d
     /tmp/ccbnltLA.s:1340   .text.descatterTransferPayload:0000000000000000 $t
     /tmp/ccbnltLA.s:1346   .text.descatterTransferPayload:0000000000000000 descatterTransferPayload
     /tmp/ccbnltLA.s:1746   .text.descatterTransferPayload:00000000000001f8 $d
     /tmp/ccbnltLA.s:1761   .text.swapByteOrder:0000000000000000 $t
     /tmp/ccbnltLA.s:1767   .text.swapByteOrder:0000000000000000 swapByteOrder
     /tmp/ccbnltLA.s:1827   .text.swapByteOrder:000000000000002c $d
     /tmp/ccbnltLA.s:1834   .text.createTxItem:0000000000000000 $t
     /tmp/ccbnltLA.s:1840   .text.createTxItem:0000000000000000 createTxItem
     /tmp/ccbnltLA.s:1874   .text.enqueueTxFrames:0000000000000000 $t
     /tmp/ccbnltLA.s:1880   .text.enqueueTxFrames:0000000000000000 enqueueTxFrames
     /tmp/ccbnltLA.s:2139   .text.enqueueTxFrames:0000000000000130 $d
     /tmp/ccbnltLA.s:2147   .text.createRxState:0000000000000000 $t
ARM GAS  /tmp/ccbnltLA.s 			page 126


     /tmp/ccbnltLA.s:2153   .text.createRxState:0000000000000000 createRxState
     /tmp/ccbnltLA.s:2214   .text.prependRxState:0000000000000000 $t
     /tmp/ccbnltLA.s:2220   .text.prependRxState:0000000000000000 prependRxState
     /tmp/ccbnltLA.s:2255   .text.traverseRxStates:0000000000000000 $t
     /tmp/ccbnltLA.s:2261   .text.traverseRxStates:0000000000000000 traverseRxStates
     /tmp/ccbnltLA.s:2321   .text.canardInit:0000000000000000 $t
     /tmp/ccbnltLA.s:2328   .text.canardInit:0000000000000000 canardInit
     /tmp/ccbnltLA.s:2402   .text.canardInit:0000000000000048 $d
     /tmp/ccbnltLA.s:2409   .text.canardGetUserReference:0000000000000000 $t
     /tmp/ccbnltLA.s:2416   .text.canardGetUserReference:0000000000000000 canardGetUserReference
     /tmp/ccbnltLA.s:2447   .text.canardGetUserReference:0000000000000014 $d
     /tmp/ccbnltLA.s:2454   .text.canardSetLocalNodeID:0000000000000000 $t
     /tmp/ccbnltLA.s:2461   .text.canardSetLocalNodeID:0000000000000000 canardSetLocalNodeID
     /tmp/ccbnltLA.s:2510   .text.canardSetLocalNodeID:000000000000002c $d
     /tmp/ccbnltLA.s:2518   .text.canardGetLocalNodeID:0000000000000000 $t
     /tmp/ccbnltLA.s:2525   .text.canardGetLocalNodeID:0000000000000000 canardGetLocalNodeID
     /tmp/ccbnltLA.s:2541   .text.canardBroadcast:0000000000000000 $t
     /tmp/ccbnltLA.s:2548   .text.canardBroadcast:0000000000000000 canardBroadcast
     /tmp/ccbnltLA.s:2704   .text.canardRequestOrRespond:0000000000000000 $t
     /tmp/ccbnltLA.s:2711   .text.canardRequestOrRespond:0000000000000000 canardRequestOrRespond
     /tmp/ccbnltLA.s:2844   .text.canardPeekTxQueue:0000000000000000 $t
     /tmp/ccbnltLA.s:2851   .text.canardPeekTxQueue:0000000000000000 canardPeekTxQueue
     /tmp/ccbnltLA.s:2875   .text.canardPopTxQueue:0000000000000000 $t
     /tmp/ccbnltLA.s:2882   .text.canardPopTxQueue:0000000000000000 canardPopTxQueue
     /tmp/ccbnltLA.s:2910   .text.canardCleanupStaleTransfers:0000000000000000 $t
     /tmp/ccbnltLA.s:2917   .text.canardCleanupStaleTransfers:0000000000000000 canardCleanupStaleTransfers
     /tmp/ccbnltLA.s:3011   .text.canardCleanupStaleTransfers:0000000000000074 $d
     /tmp/ccbnltLA.s:3016   .text.canardDecodeScalar:0000000000000000 $t
     /tmp/ccbnltLA.s:3023   .text.canardDecodeScalar:0000000000000000 canardDecodeScalar
     /tmp/ccbnltLA.s:3427   .text.canardDecodeScalar:0000000000000274 $d
     /tmp/ccbnltLA.s:3436   .text.canardEncodeScalar:0000000000000000 $t
     /tmp/ccbnltLA.s:3443   .text.canardEncodeScalar:0000000000000000 canardEncodeScalar
     /tmp/ccbnltLA.s:3642   .text.canardEncodeScalar:00000000000000ec $d
     /tmp/ccbnltLA.s:3652   .text.canardReleaseRxTransferPayload:0000000000000000 $t
     /tmp/ccbnltLA.s:3659   .text.canardReleaseRxTransferPayload:0000000000000000 canardReleaseRxTransferPayload
     /tmp/ccbnltLA.s:3710   .text.canardHandleRxFrame:0000000000000000 $t
     /tmp/ccbnltLA.s:3717   .text.canardHandleRxFrame:0000000000000000 canardHandleRxFrame
     /tmp/ccbnltLA.s:4371   .text.canardHandleRxFrame:0000000000000398 $d
     /tmp/ccbnltLA.s:4382   .text.canardGetPoolAllocatorStatistics:0000000000000000 $t
     /tmp/ccbnltLA.s:4389   .text.canardGetPoolAllocatorStatistics:0000000000000000 canardGetPoolAllocatorStatistics
     /tmp/ccbnltLA.s:4412   .text.canardConvertNativeFloatToFloat16:0000000000000000 $t
     /tmp/ccbnltLA.s:4419   .text.canardConvertNativeFloatToFloat16:0000000000000000 canardConvertNativeFloatToFloat16
     /tmp/ccbnltLA.s:4480   .text.canardConvertFloat16ToNativeFloat:0000000000000000 $t
     /tmp/ccbnltLA.s:4487   .text.canardConvertFloat16ToNativeFloat:0000000000000000 canardConvertFloat16ToNativeFloat
     /tmp/ccbnltLA.s:4532   .text.canardConvertFloat16ToNativeFloat:0000000000000030 $d
     /tmp/ccbnltLA.s:4537   .rodata.__func__.4786:0000000000000000 $d
     /tmp/ccbnltLA.s:4541   .rodata.__func__.4786:0000000000000000 __func__.4786
     /tmp/ccbnltLA.s:4544   .rodata.__func__.4791:0000000000000000 $d
     /tmp/ccbnltLA.s:4548   .rodata.__func__.4791:0000000000000000 __func__.4791
     /tmp/ccbnltLA.s:4551   .rodata.__func__.4796:0000000000000000 $d
     /tmp/ccbnltLA.s:4555   .rodata.__func__.4796:0000000000000000 __func__.4796
     /tmp/ccbnltLA.s:4558   .rodata.__func__.4849:0000000000000000 $d
     /tmp/ccbnltLA.s:4562   .rodata.__func__.4849:0000000000000000 __func__.4849
     /tmp/ccbnltLA.s:4565   .rodata.__func__.4904:0000000000000000 $d
     /tmp/ccbnltLA.s:4569   .rodata.__func__.4904:0000000000000000 __func__.4904
     /tmp/ccbnltLA.s:4572   .rodata.__func__.4912:0000000000000000 $d
     /tmp/ccbnltLA.s:4576   .rodata.__func__.4912:0000000000000000 __func__.4912
ARM GAS  /tmp/ccbnltLA.s 			page 127


     /tmp/ccbnltLA.s:4579   .rodata.__func__.4966:0000000000000000 $d
     /tmp/ccbnltLA.s:4583   .rodata.__func__.4966:0000000000000000 __func__.4966
     /tmp/ccbnltLA.s:4586   .rodata.__func__.4975:0000000000000000 $d
     /tmp/ccbnltLA.s:4590   .rodata.__func__.4975:0000000000000000 __func__.4975
     /tmp/ccbnltLA.s:4593   .rodata.__func__.4993:0000000000000000 $d
     /tmp/ccbnltLA.s:4597   .rodata.__func__.4993:0000000000000000 __func__.4993
     /tmp/ccbnltLA.s:4600   .rodata.__func__.5018:0000000000000000 $d
     /tmp/ccbnltLA.s:4604   .rodata.__func__.5018:0000000000000000 __func__.5018
     /tmp/ccbnltLA.s:4607   .rodata.__func__.5094:0000000000000000 $d
     /tmp/ccbnltLA.s:4611   .rodata.__func__.5094:0000000000000000 __func__.5094
     /tmp/ccbnltLA.s:4614   .rodata.__func__.5111:0000000000000000 $d
     /tmp/ccbnltLA.s:4618   .rodata.__func__.5111:0000000000000000 __func__.5111
     /tmp/ccbnltLA.s:4621   .rodata.__func__.5137:0000000000000000 $d
     /tmp/ccbnltLA.s:4625   .rodata.__func__.5137:0000000000000000 __func__.5137
     /tmp/ccbnltLA.s:4628   .rodata.__func__.5188:0000000000000000 $d
     /tmp/ccbnltLA.s:4632   .rodata.__func__.5188:0000000000000000 __func__.5188
     /tmp/ccbnltLA.s:4635   .rodata.canardDecodeScalar.str1.4:0000000000000000 $d
     /tmp/ccbnltLA.s:4643   .rodata.canardEncodeScalar.str1.4:0000000000000000 $d
     /tmp/ccbnltLA.s:4653   .rodata.canardHandleRxFrame.str1.4:0000000000000000 $d
     /tmp/ccbnltLA.s:4663   .rodata.canardInit.str1.4:0000000000000000 $d
     /tmp/ccbnltLA.s:4667   .rodata.canardSetLocalNodeID.str1.4:0000000000000000 $d
     /tmp/ccbnltLA.s:4671   .rodata.copyBitArray.str1.4:0000000000000000 $d
     /tmp/ccbnltLA.s:4675   .rodata.descatterTransferPayload.str1.4:0000000000000000 $d
     /tmp/ccbnltLA.s:4701   .rodata.enqueueTxFrames.str1.4:0000000000000000 $d
     /tmp/ccbnltLA.s:4705   .rodata.freeBlock.str1.4:0000000000000000 $d
     /tmp/ccbnltLA.s:4709   .rodata.incrementTransferID.str1.4:0000000000000000 $d
     /tmp/ccbnltLA.s:4713   .rodata.prepareForNextTransfer.str1.4:0000000000000000 $d
     /tmp/ccbnltLA.s:4717   .rodata.pushTxQueue.str1.4:0000000000000000 $d
     /tmp/ccbnltLA.s:4727   .rodata.swapByteOrder.str1.4:0000000000000000 $d
                     .debug_frame:0000000000000010 $d

UNDEFINED SYMBOLS
__assert_func
memcpy
memset
__aeabi_fmul
__aeabi_fcmpge
